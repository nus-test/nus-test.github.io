[{"authors":null,"categories":null,"content":"Find more information about Manuel at https://www.manuelrigger.at/.\n","date":1746057600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1746057600,"objectID":"df434bd364d7b454c8d30090a4ec6702","permalink":"https://nus-test.github.io/author/manuel-rigger/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/manuel-rigger/","section":"authors","summary":"Find more information about Manuel at https://www.manuelrigger.at/.","tags":null,"title":"Manuel Rigger","type":"authors"},{"authors":null,"categories":null,"content":"Rajdeep is currently pursuing a Ph.D. in Computer Science at NUS, where he also completed both his Master\u0026rsquo;s in Computer Science and Bachelor\u0026rsquo;s in Computer Engineering. He currently serves as a Graduate Tutor at NUS, teaching CS4218 Software Testing. His research focuses on SE4AI, Software Testing, and Reinforcement Learning.\n","date":1746057600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1746057600,"objectID":"29a73227235d97184e108ae5dead126d","permalink":"https://nus-test.github.io/author/rajdeep-singh-hundal/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/rajdeep-singh-hundal/","section":"authors","summary":"Rajdeep is currently pursuing a Ph.D. in Computer Science at NUS, where he also completed both his Master\u0026rsquo;s in Computer Science and Bachelor\u0026rsquo;s in Computer Engineering. He currently serves as a Graduate Tutor at NUS, teaching CS4218 Software Testing.","tags":null,"title":"Rajdeep Singh Hundal","type":"authors"},{"authors":null,"categories":null,"content":"Find more information about Yuancheng.\n","date":1741185000,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1741185000,"objectID":"8a3961a72e36db9f69daf5360bd4b343","permalink":"https://nus-test.github.io/author/yuancheng-jiang/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/yuancheng-jiang/","section":"authors","summary":"Find more information about Yuancheng.","tags":null,"title":"Yuancheng Jiang","type":"authors"},{"authors":null,"categories":null,"content":"Zhaokun was a master student at DBHammer Lab at East China Normal University, focusing on database testing and benchmarking, query optimization, and intersection between DB and SE(DBMS Fuzzing and Verification, Query Oracle Generation).\n","date":1739973600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1739973600,"objectID":"92821170b1bb4aa5add884a9efadab7c","permalink":"https://nus-test.github.io/author/zhaokun-xiang/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/zhaokun-xiang/","section":"authors","summary":"Zhaokun was a master student at DBHammer Lab at East China Normal University, focusing on database testing and benchmarking, query optimization, and intersection between DB and SE(DBMS Fuzzing and Verification, Query Oracle Generation).","tags":null,"title":"Zhaokun Xiang","type":"authors"},{"authors":null,"categories":null,"content":"Find more information about Wenjia.\n","date":1737554400,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1737554400,"objectID":"b6c078c39f004b787feea69da6884381","permalink":"https://nus-test.github.io/author/wenjia-ye/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/wenjia-ye/","section":"authors","summary":"Find more information about Wenjia.","tags":null,"title":"Wenjia Ye","type":"authors"},{"authors":null,"categories":null,"content":"Tongjun (Albert) Zhang is an undergraduate student at School of Computing, National University of Singapore. His research focuses on grammar-based fuzzing for relational database management systems. He is generally interested in fuzzing, software-defined networks, network protocols, and operating systems.\nFind Albert\u0026rsquo;s homepage at https://albertzhangtj.at.\n","date":1732633200,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1732633200,"objectID":"5bf7f13440859b32bf0463bbdc144d9c","permalink":"https://nus-test.github.io/author/tongjun-zhang/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/tongjun-zhang/","section":"authors","summary":"Tongjun (Albert) Zhang is an undergraduate student at School of Computing, National University of Singapore. His research focuses on grammar-based fuzzing for relational database management systems. He is generally interested in fuzzing, software-defined networks, network protocols, and operating systems.","tags":null,"title":"Tongjun Zhang","type":"authors"},{"authors":null,"categories":null,"content":"Mehtab was a Master\u0026rsquo;s Student working on automated SQL reduction.\nFind out more about Mehtab at blog.mzfr.me/about\n","date":1731423600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1731423600,"objectID":"90d26c13330bef2ef6122b5a3c1a151a","permalink":"https://nus-test.github.io/author/mehtab-zafar/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/mehtab-zafar/","section":"authors","summary":"Mehtab was a Master\u0026rsquo;s Student working on automated SQL reduction.\nFind out more about Mehtab at blog.mzfr.me/about","tags":null,"title":"Mehtab Zafar","type":"authors"},{"authors":null,"categories":null,"content":"Find Chi Zhang\u0026rsquo;s homepage at https://ch1zhang.github.io/.\n","date":1730592000,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1730592000,"objectID":"31a4e8cb1b1884f9fdeae84ccbfb0cf2","permalink":"https://nus-test.github.io/author/chi-zhang/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/chi-zhang/","section":"authors","summary":"Find Chi Zhang\u0026rsquo;s homepage at https://ch1zhang.github.io/.","tags":null,"title":"Chi Zhang","type":"authors"},{"authors":null,"categories":null,"content":"Junwen joined NUS as a Ph.D. student in Fall 2024. He was an undergraduate at Southern University of Science and Technology (SUSTech).\nFind more information about Junwen at https://wanteatfruit.github.io/.\n","date":1729004400,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1729004400,"objectID":"be6472d3659cd596ecb0ab0b9aedd5b7","permalink":"https://nus-test.github.io/author/junwen-an/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/junwen-an/","section":"authors","summary":"Junwen joined NUS as a Ph.D. student in Fall 2024. He was an undergraduate at Southern University of Science and Technology (SUSTech).\nFind more information about Junwen at https://wanteatfruit.github.io/.","tags":null,"title":"Junwen An","type":"authors"},{"authors":null,"categories":null,"content":"","date":1728399600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1728399600,"objectID":"db764f439ea51fcbf8064546fb4d2bbf","permalink":"https://nus-test.github.io/author/ken-jin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/ken-jin/","section":"authors","summary":"","tags":null,"title":"Ken Jin","type":"authors"},{"authors":null,"categories":null,"content":"Lyu Jun. He is currently a third-year Ph.D. student in the DevOps+ Research Laboratory (https://softeng.nju.edu.cn/), supervised by Prof. He (Jason) Zhang (https://softeng.nju.edu.cn/faculty/HeZhang/index.html), at Nanjing University, China. He research interests focus on improving software build efficiency and quality in practice, and reducing CI computing costs.\n","date":1725375600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1725375600,"objectID":"7d728c3c60fa84952d88c3beaae4c199","permalink":"https://nus-test.github.io/author/jun-lyu/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/jun-lyu/","section":"authors","summary":"Lyu Jun. He is currently a third-year Ph.D. student in the DevOps+ Research Laboratory (https://softeng.nju.edu.cn/), supervised by Prof. He (Jason) Zhang (https://softeng.nju.edu.cn/faculty/HeZhang/index.html), at Nanjing University, China. He research interests focus on improving software build efficiency and quality in practice, and reducing CI computing costs.","tags":null,"title":"Jun Lyu","type":"authors"},{"authors":null,"categories":null,"content":"Suyang joined NUS as a Ph.D. student in Fall 2022. He was an undergraduate in the School of Computer Science and Technology at University of Science and Technology of China (USTC).\nFind more information about Suyang at https://suyang.zone/.\n","date":1723557600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1723557600,"objectID":"1d9952094438a20b2daaca50dec101b8","permalink":"https://nus-test.github.io/author/suyang-zhong/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/suyang-zhong/","section":"authors","summary":"Suyang joined NUS as a Ph.D. student in Fall 2022. He was an undergraduate in the School of Computer Science and Technology at University of Science and Technology of China (USTC).","tags":null,"title":"Suyang Zhong","type":"authors"},{"authors":null,"categories":null,"content":"Qiuyang Mang is doing an internship at the lab for half a year. Prior to this, He was a research assistant supervised by Prof. Pinjia He at Intelligent Software Engineering Lab of CUHK-SZ.\nFind more information about Qiuyang.\n","date":1722470400,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1722470400,"objectID":"1e6440f6bfb0b8db4695859c42c99744","permalink":"https://nus-test.github.io/author/qiuyang-mang/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/qiuyang-mang/","section":"authors","summary":"Qiuyang Mang is doing an internship at the lab for half a year. Prior to this, He was a research assistant supervised by Prof. Pinjia He at Intelligent Software Engineering Lab of CUHK-SZ.","tags":null,"title":"Qiuyang Mang","type":"authors"},{"authors":null,"categories":null,"content":"Wenjing is doing an internship at the lab for half a year.\nShe is a master student supervised by Prof. Geguang Pu and Dr. Chengyu Zhang at Trusted Intelligent Software Engineering Lab at East China Normal University.\nShe received B.S. degree from the School of Psychology and Cognitive Science at East China Normal University in 2021.\nFind more information about Wenjing.\n","date":1722470400,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1722470400,"objectID":"b841a19ac2a3226a248fe69a626068d4","permalink":"https://nus-test.github.io/author/wenjing-deng/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/wenjing-deng/","section":"authors","summary":"Wenjing is doing an internship at the lab for half a year.\nShe is a master student supervised by Prof. Geguang Pu and Dr. Chengyu Zhang at Trusted Intelligent Software Engineering Lab at East China Normal University.","tags":null,"title":"Wenjing Deng","type":"authors"},{"authors":null,"categories":null,"content":"Jovyn is a final year undergraduate at the National University of Singapore working on automated testing for TeX engines.\n","date":1721088000,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1721088000,"objectID":"7ff74d2547225effdbbda92f8aee790f","permalink":"https://nus-test.github.io/author/jovyn-tan/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/jovyn-tan/","section":"authors","summary":"Jovyn is a final year undergraduate at the National University of Singapore working on automated testing for TeX engines.","tags":null,"title":"Jovyn Tan","type":"authors"},{"authors":["hhkit"],"categories":null,"content":"Ivan is a final year Masters Stduent working on software reliability, program analysis and compilers. Once upon a time, he used to make games as well.\n","date":1710856800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1710856800,"objectID":"8bf820977b8668cbe19bc7cde74d056b","permalink":"https://nus-test.github.io/author/ivan-ho/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/ivan-ho/","section":"authors","summary":"Ivan is a final year Masters Stduent working on software reliability, program analysis and compilers. Once upon a time, he used to make games as well.","tags":null,"title":"Ivan Ho","type":"authors"},{"authors":null,"categories":null,"content":"Find more information about Jinsheng.\n","date":1710374400,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1710374400,"objectID":"cb5153d2f004382e7696d29ab119ed9b","permalink":"https://nus-test.github.io/author/jinsheng-ba/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/jinsheng-ba/","section":"authors","summary":"Find more information about Jinsheng.","tags":null,"title":"Jinsheng Ba","type":"authors"},{"authors":null,"categories":null,"content":"Shuxin Li is an undergraduate student from Southern University of Science and Technology. She did internship at the lab for half a year. She is expected to be a master student at the University of Tokyo supervised by Prof Hanawa.\n","date":1702598400,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1702598400,"objectID":"296f0441b1fcbd3334c116a0d74acb80","permalink":"https://nus-test.github.io/author/shuxin-li/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/shuxin-li/","section":"authors","summary":"Shuxin Li is an undergraduate student from Southern University of Science and Technology. She did internship at the lab for half a year. She is expected to be a master student at the University of Tokyo supervised by Prof Hanawa.","tags":null,"title":"Shuxin Li","type":"authors"},{"authors":null,"categories":null,"content":"Haoxiang is doing an internship at the lab for half a year.\nHe is a master student supervised by Prof. Ming Wen at Huazhong University of Science and Technology.\n","date":1701093600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1701093600,"objectID":"a0eec30d1fdaf48de1dc755f8ee14118","permalink":"https://nus-test.github.io/author/haoxiang-jia/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/haoxiang-jia/","section":"authors","summary":"Haoxiang is doing an internship at the lab for half a year.\nHe is a master student supervised by Prof. Ming Wen at Huazhong University of Science and Technology.","tags":null,"title":"Haoxiang Jia","type":"authors"},{"authors":null,"categories":null,"content":"Anxing graduated from the David R. Cheriton School of Computer Science at University of Waterloo, previously employed at CashApp. She joined NUS as a Master student in January 2022.\n","date":1699275600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1699275600,"objectID":"d6f458f7875249e73a1a10f28d530983","permalink":"https://nus-test.github.io/author/anxing-zhang/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/anxing-zhang/","section":"authors","summary":"Anxing graduated from the David R. Cheriton School of Computer Science at University of Waterloo, previously employed at CashApp. She joined NUS as a Master student in January 2022.","tags":null,"title":"Anxing Zhang","type":"authors"},{"authors":null,"categories":null,"content":"Nishita, graduated with a Masters in Computing from NUS in July 2023. She currently holds the role of a fullstack developer at PSA, Singapore, where she is actively engaged in crafting innovative solutions that bridge the realms of frontend and backend development. Find more information about Nishita.\n","date":1681740000,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1681740000,"objectID":"f8f5d3453d4db89427c9d153cad50200","permalink":"https://nus-test.github.io/author/nishita-dutta/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/nishita-dutta/","section":"authors","summary":"Nishita, graduated with a Masters in Computing from NUS in July 2023. She currently holds the role of a fullstack developer at PSA, Singapore, where she is actively engaged in crafting innovative solutions that bridge the realms of frontend and backend development.","tags":null,"title":"Nishita Dutta","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"62c40ba0fb52c3e8bb6c751df93c7a66","permalink":"https://nus-test.github.io/author/emily-ong/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/emily-ong/","section":"authors","summary":"","tags":null,"title":"Emily Ong","type":"authors"},{"authors":null,"categories":null,"content":"Find more information about Kabilan at https://kabilan.info.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"0a00e30d0f88c1dcab57f4ab6b34083a","permalink":"https://nus-test.github.io/author/kabilan-mahathevan/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/kabilan-mahathevan/","section":"authors","summary":"Find more information about Kabilan at https://kabilan.info.","tags":null,"title":"Kabilan Mahathevan","type":"authors"},{"authors":null,"categories":null,"content":"Nathee Jaywaree is an undergraduate student from King Mongkut’s University of Technology Thonburi. He was doing an internship at the lab for 2.5 months (May 2023 to August 2023).\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"4cadc412f4485dbf8a0504b3235291ec","permalink":"https://nus-test.github.io/author/nathee-jaywaree/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/nathee-jaywaree/","section":"authors","summary":"Nathee Jaywaree is an undergraduate student from King Mongkut’s University of Technology Thonburi. He was doing an internship at the lab for 2.5 months (May 2023 to August 2023).","tags":null,"title":"Nathee Jaywaree","type":"authors"},{"authors":null,"categories":null,"content":"Qingshuo Guo is doing an internship at the lab for one semester. Prior to this, He was a research assistant supervised by Prof. Pinjia He at Intelligent Software Engineering Lab of CUHK-SZ.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"5721dd47c08515b1889dc3b79d23ba3a","permalink":"https://nus-test.github.io/author/qingshuo-guo/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/qingshuo-guo/","section":"authors","summary":"Qingshuo Guo is doing an internship at the lab for one semester. Prior to this, He was a research assistant supervised by Prof. Pinjia He at Intelligent Software Engineering Lab of CUHK-SZ.","tags":null,"title":"Qingshuo Guo","type":"authors"},{"authors":null,"categories":null,"content":"Ming Wei was a final year student working on automated testing tools.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"e5495db608d7fc49fe73918173189b84","permalink":"https://nus-test.github.io/author/tan-ming-wei/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/tan-ming-wei/","section":"authors","summary":"Ming Wei was a final year student working on automated testing tools.","tags":null,"title":"Tan Ming Wei","type":"authors"},{"authors":null,"categories":null,"content":"Tiancheng is currently a Master student at School of Computing, NUS. He graduated from Nanjing University(NJU).\nFind more about Tiancheng at nayameow.github.io\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"fa243b1c6168ffb1017bc68c4e2e9011","permalink":"https://nus-test.github.io/author/tiancheng-xing/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/tiancheng-xing/","section":"authors","summary":"Tiancheng is currently a Master student at School of Computing, NUS. He graduated from Nanjing University(NJU).\nFind more about Tiancheng at nayameow.github.io","tags":null,"title":"Tiancheng Xing","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"c281f27e38e2d9e34463132c845dda7c","permalink":"https://nus-test.github.io/author/wong-kok-rui/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/wong-kok-rui/","section":"authors","summary":"","tags":null,"title":"Wong Kok Rui","type":"authors"},{"authors":null,"categories":null,"content":"Overview Database Management Systems: 801 bugs Compilers and Interpreters: 60 bugs Datalog Engines: 30 bugs XML Processors: 26 bugs Database Management Systems (801 bugs) SQLite (217 bugs) An Inconsistent Result Depending on Parenthesization Status: fixed\nLink: https://sqlite.org/forum/forumpost/af3d07f908 Found by: bajinsheng An Unexpected NULL Column Caused by Where Clause in RIGHT JOIN Status: fixed\nLink: https://sqlite.org/forum/forumpost/41cc3851d8 Found by: bajinsheng Rows are Unexpectedly Filtered Out by DISTINCT in RIGHT JOIN Status: fixed\nLink: https://sqlite.org/forum/forumpost/c06b10ad7e Found by: bajinsheng Expression or Constant in GroupBy Clause Status: fixed\nLink: https://sqlite.org/forum/forumpost/2458c5dea2 Found by: bajinsheng Ambiguous Reference Error for Right Join Status: confirmed\nLink: https://sqlite.org/forum/forumpost/e90a8e6e6f Found by: bajinsheng Unexpected Result by WHERE when Joining Tables Status: fixed\nLink: https://sqlite.org/forum/forumpost/687b0bf563 Found by: bajinsheng Unexpected Result by WHERE/RIGHT JOIN Status: fixed\nLink: https://sqlite.org/forum/forumpost/5cfe08eed6 Found by: bajinsheng Unexpected Result in Joining Virtual Tables Status: fixed\nLink: https://sqlite.org/forum/forumpost/3902c7b833 Found by: bajinsheng Unexpected Result by Joining Status: fixed\nLink: https://sqlite.org/forum/forumpost/c2554d560b Found by: bajinsheng Unexpected Result by RIGHT JOIN on RTree Tables Status: fixed\nLink: https://sqlite.org/forum/forumpost/087de2d9ec Found by: bajinsheng Unexpected Result by WHERE Again Status: fixed\nLink: https://sqlite.org/forum/forumpost/de16c4abe2 Found by: bajinsheng Unexpected Result by RIGHT JOIN Status: fixed\nLink: https://sqlite.org/forum/forumpost/206d99a16d Found by: bajinsheng Unexpected Assertion Error in SQLite3MemCompare Status: fixed\nLink: https://sqlite.org/forum/forumpost/800eecf5e6 Found by: bajinsheng Unexpected Result by ORDER BY Status: fixed\nLink: https://sqlite.org/forum/forumpost/323f86cc30 Found by: bajinsheng Unexpected Result by RIGHT JOIN with INDEX Status: fixed\nLink: https://sqlite.org/forum/forumpost/c4676c4956 Found by: bajinsheng Unexpected Result by JSON Status: fixed\nLink: https://sqlite.org/forum/forumpost/3d9caa45cb Found by: bajinsheng Unexpected Result by Complicated JOINING Status: unconfirmed\nLink: https://sqlite.org/forum/forumpost/eeb8173cf8 Found by: bajinsheng Assertion `pCur-\u003eeCurType==CURTYPE_VTAB' failed Status: fixed\nLink: https://sqlite.org/forum/forumpost/dafe0500b0 Found by: bajinsheng Unexpected Result by RIGHT JOIN Again Status: fixed\nLink: https://sqlite.org/forum/forumpost/51e6959f61 Found by: bajinsheng Unexpected Result by Complicated JOINING Again Status: fixed\nLink: https://sqlite.org/forum/forumpost/b40696f501 Found by: bajinsheng Unexpected Assertion Error in valueFromFunction Status: unconfirmed\nLink: https://sqlite.org/forum/forumpost/e3243e07e8 Found by: bajinsheng Unexpected Result by FULL OUTER JOIN Status: fixed\nLink: https://sqlite.org/forum/forumpost/5610c17c3d Found by: bajinsheng Unexpected Expression on ON clause Status: fixed\nLink: https://sqlite.org/forum/forumpost/57bdf2217d Found by: bajinsheng Unexpected Expression Result by FULL OUTER JOIN Status: fixed\nLink: https://sqlite.org/forum/forumpost/6650cd40b5 Found by: bajinsheng Unexpected Parse Error Status: fixed\nLink: https://sqlite.org/forum/forumpost/1a7fea4651 Found by: bajinsheng Unexpected Assertion Error in whereRangeScanEst Status: fixed\nLink: https://sqlite.org/forum/forumpost/c3496cf6b1 Found by: bajinsheng Unexpected Result by Union Status: unconfirmed\nLink: https://sqlite.org/forum/forumpost/174afeae57 Found by: bajinsheng Assertion `pRec-\u003enField\u003e0 \u0026\u0026 pRec-\u003enField\u0026lt;=pIdx-\u003enSampleCol' failed. Status: unconfirmed\nLink: https://sqlite.org/forum/forumpost/3607259d3c Found by: bajinsheng Incorrect results with the latest trunk version Status: fixed\nLink: https://sqlite.org/forum/info/0846211821513f50 Found by: Chi Zhang Incorrect result that might be caused by json function Status: fixed\nLink: https://sqlite.org/forum/info/37dd14a538ea84e0 Found by: Chi Zhang Incorrect result for COUNT on view with window function Status: fixed\nLink: https://sqlite.org/forum/info/2cd11c2d37696553 Found by: Chi Zhang Incorrect result might caused by INDEX Status: fixed\nLink: https://sqlite.org/forum/info/a68313d0545273c8 Found by: Chi Zhang An assertion failure only triggers in JDBC driver with -DSQLITE_DEBUG=1 compile option Status: fixed\nLink: https://sqlite.org/forum/info/dc4854437bda462c Found by: Chi Zhang Unexpected results of `JOIN` Status: fixed\nLink: https://sqlite.org/forum/forumpost/8f48e29d67 Found by: Chi Zhang Unexpected result of `JOIN` Status: fixed\nLink: https://sqlite.org/forum/forumpost/96cd4a7e9e Found by: Chi Zhang Unexpected results when using `REPLACE` function Status: fixed\nLink: https://sqlite.org/forum/forumpost/3776b48e71, https://www.sqlite.org/src/info/01868ebcd25fadb2 Found by: Suyang Zhong COLLATE nocase index on a WITHOUT ROWID table malfunctions Status: fixed\nLink: https://www.sqlite.org/src/tktview/3182d3879020ef3b2e6db56be2470a0266d3c773 Found by: mrigger PRAGMA case_sensitive_like can corrupt some databases Status: fixed\nLink: https://www.sqlite.org/src/info/a340eef47b0cad5 Found by: mrigger Unique index that uses GLOB does not detect duplicate due to REAL conversion Status: fixed\nLink: http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-April/084324.html Found by: mrigger Multi-row insert circumvents index check Status: fixed\nLink: https://www.sqlite.org/src/info/3be1295b264be2fa Found by: mrigger COLLATE NOCASE index on REAL column malfunctions Status: fixed\nLink: http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084334.html Found by: mrigger UPSERT documentation issue Status: fixed\nLink: http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084347.html Found by: mrigger TYPEOF index on REAL column malfunctions Status: fixed\nLink: http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084350.html Found by: mrigger Index on REAL column malfunctions when multiplying with a string Status: fixed\nLink: http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084355.html Found by: mrigger Problem with REAL values and string functions used in indexes or on expressions Status: fixed\nLink: http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084366.html Found by: mrigger GLOB and minus in index and real column Status: fixed\nLink: http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084367.html Found by: mrigger Incorrect result on a table scan of a partial index Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=5c6955204c Found by: mrigger ALTER TABLE fails when renaming an INTEGER PRIMARY KEY column in a WITHOUT ROWID table Status: fixed\nLink: http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084426.html Found by: mrigger INSERT OR FAIL inserts row although it violates a table constraint Status: fixed\nLink: http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084439.html Found by: mrigger Incorrect result for \"\u0026lt;\" and \"\u0026lt;=\" comparison of rowid and non-numeric text value Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=9cf6c9bb51 Found by: mrigger './' LIKE './' does not match Status: fixed\nLink: http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084478.html Found by: mrigger Row is not fetched with PRAGMA reverse_unordered_selects=true Status: fixed\nLink: http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084480.html Found by: mrigger Malformed database image when using a REAL PRIMARY KEY Status: fixed\nLink: https://www.sqlite.org/src/tktview/6c1d3febc00b22d457c7 Found by: mrigger Incorrect handling of Infinity by the ROUND function Status: fixed\nLink: http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084497.html Found by: mrigger Partial NOT NULL index malfunctions with IS NOT/!= Status: fixed\nLink: https://sqlite.org/src/tktview/80256748471a01 Found by: mrigger REINDEX causes rows not to be fetched in a WITHOUT ROWIDs table and PRIMARY KEY DESC Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=bba7b69f98 Found by: mrigger PRAGMA reverse_unordered_selects=true results in row not being fetched Status: fixed\nLink: http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084539.html Found by: mrigger REAL rounding seems to depend on FROM clause Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=3c27b97e31 Found by: mrigger Malformed image when using no journal mode, zero cache size, and failing when creating an index Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=f4ec250930 Found by: mrigger Query results in a SEGFAULT Status: fixed\nLink: https://sqlite.org/src/info/787fa716be3a7f650c Found by: mrigger Index on non-existing column results in a fabricated value being fetched Status: fixed\nLink: https://www.sqlite.org/src/tktview/9b78184be266fd7084e9e8038ad631a21b37eb9e Found by: mrigger Nested boolean formula with IN operator computes an incorrect result Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=d3e7f2ba5b Found by: mrigger \"Malformed database schema\" when creating a failing index within a transaction Status: fixed\nLink: https://www.sqlite.org/src/tktview/b5ca442af9fadf5eff5b2bf64839516ab82cfc3d Found by: mrigger CAST('-' AS NUMERIC) computes 0.0 Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=4c2d7639f0 Found by: mrigger Incorrect result when subtracting a large integer number from a TEXT value Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=e8bedb2a18 Found by: mrigger CAST to NUMERIC no longer converts to INTEGER Status: fixed\nLink: https://www.sqlite.org/src/tktview/dd6bffbfb6e61db9ecc9ea833d586427961ccc9d Found by: mrigger TEXT value interpreted as column name in an index with empty list in an IN expression Status: fixed\nLink: https://www.sqlite.org/src/tktview/fd76310a5e843e074a30ed98b859dd0be11d0276 Found by: mrigger LIKE malfunctions for INT PRIMARY KEY COLLATE NOCASE column Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=b1d8c79314 Found by: mrigger Illegal argument to LIKELIHOOD() does not result in error when combined with \"IN ()\" Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=533010b8ca Found by: mrigger CAST('.' AS NUMERIC) computes 0.0 rather than 0 Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=412bba9b22 Found by: mrigger COLLATE expression has an affinity Status: fixed\nLink: https://www.sqlite.org/src/tktview/d60b3cd7cb0bdff8ff39f76c9faf16ba2efa442f Found by: mrigger Another case of Illegal argument to LIKELIHOOD() does not result in error when combined with \"IN ()\" Status: fixed\nLink: https://www.sqlite.org/src/tktview/533010b8cacebe82533a8cd4e230fbb819565115 Found by: mrigger -'1.0' computes -1.0 rather than -1 Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=1819598c09 Found by: mrigger COLLATE expression in the right side of an IN operator results in an affinity conversion Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=57353f8243 Found by: mrigger Lossless conversion when casting a large TEXT number to NUMERIC is not performed Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=afdc5a29dc Found by: mrigger LIKELY(), UNLIKELY() and LIKELIHOOD() have affinities Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=0c620df60b Found by: mrigger IS TRUE operator malfunctions with COLLATE and REAL value Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=4d01eda811 Found by: mrigger CAST('-0.0' AS NUMERIC) computes 0.0 rather than 0 Status: fixed\nLink: https://www.sqlite.org/src/tktview/674385aeba91c774d47736f1aefd259b074dc5d3 Found by: mrigger CAST takes implicit COLLATE of its operand Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=b148fa6105 Found by: mrigger LIKE malfunctions for UNIQUE COLLATE NOCASE column Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=ce8717f088 Found by: mrigger Built-in RTRIM collating sequence yields incorrect comparisons Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=f1580ba1b5 Found by: mrigger COLLATE in BETWEEN expression is ignored Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=e1e07ef202 Found by: mrigger Query with ORDER BY results in \"database disk image is malformed\" error Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=ba2f4585cf Found by: mrigger ANALYZE causes DISTINCT to malfunction in CROSS JOIN Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=ccbe5759fb Found by: mrigger Query with DISTINCT does not fetch all distinct rows Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=ced41c7c7d Found by: mrigger MIN() malfunctions for UNIQUE column Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=41866dc373 Found by: mrigger MIN() malfunctions for a query with ISNULL condition Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=71e183cab6 Found by: mrigger Unexpected affinity conversion in view Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=d52a29a9e6 Found by: mrigger Row is not fetched in SELECT from VIEW Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=61c853857f Found by: mrigger Unexpected affinity conversion for view column in IN operator Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=0a5e2c1dcb Found by: mrigger Incorrect result for query that uses MIN() and a CAST on rowid Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=f8a7060ece Found by: mrigger Constant expression in partial index results in row not being fetched Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=9080b6227f Found by: mrigger Null pointer dereference caused by window functions in result-set of EXISTS(SELECT ...) Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=256741a16b Found by: mrigger LEFT JOIN fails to fetch row Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=6710d2f7a1 Found by: mrigger WHERE clause erroneously influences value of fetched column from view Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=c7a1171907 Found by: mrigger INDEXED BY results in row not being fetched Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=f043b1130b Found by: mrigger DISTINCT malfunctions for IS NULL Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=b86894020e Found by: mrigger Row is not fetched in table with INTEGER PRIMARY KEY Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=d9f584e936 Found by: mrigger Row with comparison on TEXT UNIQUE column is not fetched Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=ac184eb571 Found by: mrigger LIKELY() seems to cause unexpected affinity conversion for rowid Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=7e07a3dbf5 Found by: mrigger Unexpected affinity conversion is performed for the IN operator Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=dbaf8a6820 Found by: mrigger Partial index causes row to not be fetched Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=a6408d42b9 Found by: mrigger Partial index causes row to not be fetched in BETWEEN expression Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=fba33c8b1d Found by: mrigger Partial index and BETWEEN issue Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=f8f472cbc7 Found by: mrigger REINDEX causes \"UNIQUE constraint failed\" error Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=5a3dba8104 Found by: mrigger Expression computed on row yields incorrect result Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=57af00b664 Found by: mrigger Different rounding when converting TEXT to REAL Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=2841e99d10 Found by: mrigger IS NULL unexpectedly evaluates to TRUE Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=29f635e0af Found by: mrigger COLLATE NOCASE string comparison yields incorrect result Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=767a8cbc6d Found by: mrigger BETWEEN issue in view Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=a7debbe0ad Found by: mrigger COLLATE issue in view Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=18458b1ad6 Found by: mrigger GLOB unexpectedly does not match Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=0f0428096f Found by: mrigger Row is not fetched when using WHERE clause with INSTR() Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=587791f926 Found by: mrigger Comparison on view malfunctions Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=b2d4edaffd Found by: mrigger FTS integrity-check malfunctions Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=8fe768e9c9 Found by: mrigger FTS pgsz option results in \"database disk image is malformed\" error Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=265e935b26 Found by: mrigger FTS rebuild in transaction causes integrity-check to fail Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=e258f008ce Found by: mrigger FTS integrity-check indicates that the database disk image is malformed Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=81a7f7b9e2 Found by: mrigger FTS rebuild in combination with crisismerge results in error \"database or disk is full\" Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=d392017c8e Found by: mrigger LEFT JOIN in view malfunctions Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=a976c487d1 Found by: mrigger LEFT JOIN in view malfunctions with NOTNULL Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=c31034044b Found by: mrigger FTS order=DESC results into integrity-check failing Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=8a6fa2bb22 Found by: mrigger FTS integrity-check malfunctions for transaction and the prefix option Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=745f1abcdc Found by: mrigger FTS integrity_check fails when inserting x'00' Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=278ac14262 Found by: mrigger Trigger inserts duplicate value in UNIQUE column Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=a8a4847a2d Found by: mrigger FTS merge does not terminate Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=bf1aab8978 Found by: mrigger Comparison of row values results in incorrect result Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=b47e3627ec Found by: mrigger Comparison of row values results in incorrect result (incomplete fix) Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=b47e3627ec Found by: mrigger Row value comparison yields incorrect result Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=6ef984af89 Found by: mrigger Comparison of row values with COLLATE NOCASE yields incorrect result Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=135c9da751 Found by: mrigger Crash on REPLACE INTO of a table with an AFTER DELETE trigger Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=50c09fc2cf Found by: mrigger FTS integrity-check malfunctions nondeterministically with tokenize=\"ascii\" Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=dd1f67bf25 Found by: mrigger Trigger causes query to compute incorrect result Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=c1e19e1204 Found by: mrigger REINDEX causes \"UNIQUE constraint failed\" error for generated column Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=3ea1755124 Found by: mrigger Segfault in table with generated columns Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=91e8695101 Found by: mrigger Segfault when updating table with generated columns Status: fixed\nLink: https://sqlite.org/src/tktview?name=9621dd78a0 Found by: mrigger VACUUM issue on table with generated column Status: fixed\nLink: https://sqlite.org/src/tktview?name=166347c6fc Found by: mrigger VACUUM on table with generated column results in an error Status: fixed\nLink: https://sqlite.org/src/tktview?name=6484e6ce67 Found by: mrigger VACUUM on table with generated column that uses TYPEOF results in an error Status: fixed\nLink: https://sqlite.org/src/tktview?name=1d2a8efc6c Found by: mrigger Segfault in table with generated column and foreign key Status: fixed\nLink: https://sqlite.org/src/tktview?name=b9befa4b83 Found by: mrigger REPLACE causes segfault in table with generated column and foreign key Status: fixed\nLink: https://sqlite.org/src/tktview?name=c28a01da72 Found by: mrigger Incorrect result for GLOB operator Status: fixed\nLink: https://sqlite.org/src/tktview?name=a9efb42811 Found by: mrigger LEFT JOIN in view malfunctions with partial index on table Status: fixed\nLink: https://sqlite.org/src/tktview?name=623eff57e7 Found by: mrigger PRAGMA integrity_check fails due to CHECK constraint even without records Status: fixed\nLink: https://sqlite.org/src/tktview?name=3c9eadd2a6 Found by: mrigger Row value comparison malfunctions on view with left join Status: fixed\nLink: https://sqlite.org/src/tktview?name=02aa2bd02f Found by: mrigger REPLACE on table with generated NOT NULL column results in segfault Status: fixed\nLink: https://sqlite.org/src/tktview?name=2399f59861 Found by: mrigger NULL WHERE condition unexpectedly results in row being fetched Status: fixed\nLink: https://sqlite.org/src/tktview?name=ce22a07731 Found by: mrigger Segfault when inserting into table with generated columns Status: fixed\nLink: https://sqlite.org/src/tktview?name=4fc08501f4 Found by: mrigger UPDATE on table with two generated columns and CHECK clause results in segfault Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=299b50ba81 Found by: mrigger VACUUM results in \"database disk image is malformed\" for PRIMARY KEY with duplicate column Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=302027baf1 Found by: mrigger DISTINCT malfunctions for VIEW with virtual table Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=7e59041f9c Found by: mrigger LEFT JOIN malfunctions with partial ISNULL index Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=7f39060a24 Found by: mrigger Incorrect result for TEXT comparison on rtree table Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=a55ab6d97d Found by: mrigger column = NULL predicate evaluates to TRUE for rtree table Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=30e2c183b6 Found by: mrigger Join on two rtree tables malfunctions Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=9fe487ba3c Found by: mrigger Row value comparison malfunctions with rtree table Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=f096d191b6 Found by: mrigger Comparison on INT column in rtree table malfunctions Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=aa573a787b Found by: mrigger Incorrect result for predicate on rtree table Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=367a86e288 Found by: mrigger NOT NULL auxiliary column in rtree table malfunctions Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=8bf76328ac Found by: mrigger CREATE VIRTUAL TABLE causes segfault Status: fixed\nLink: Found by: mrigger Generated column and foreign key causes a segfault Status: fixed\nLink: Found by: mrigger Query on table without rows and generated column results in \"out of memory\" error Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=b92e5e8ec2 Found by: mrigger PRAGMA integrity_check does not terminate on table with generated column Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=bd8c280671 Found by: mrigger LEFT JOIN segfault on rtree table Status: fixed\nLink: Found by: mrigger REINDEX results in \"UNIQUE constraint failed\" for generated column Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=d7c3f125c9 Found by: mrigger FTS database disk image is malformed for UTF-16 encoding after update Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=cf36cb4e02 Found by: mrigger REINDEX segfaults on table with generated columns Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=b439bfcfb7 Found by: mrigger LEFT JOIN malfunctions with generated column Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=3b84b42943 Found by: mrigger UPDATE causes \"database table is locked\" for rtree table Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=56a74875be Found by: mrigger FILTER clause in window function causes a segfault Status: fixed\nLink: Found by: mrigger Incorrect result for BETWEEN and generated column Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=e0a8120553 Found by: mrigger FTS database disk image is malformed for UTF-16 encoding Status: fixed\nLink: https://sqlite.org/src/tktview?name=e431c35542 Found by: mrigger FTS database disk image is malformed for update on languageid Status: fixed\nLink: https://sqlite.org/src/tktview?name=cd3311e323 Found by: mrigger Debug assertion sqlite3VdbeMemAboutToChange: Assertion `(mFlags\u0026MEM_Str)==0 || (pMem-\u003en==pX-\u003en \u0026\u0026 pMem-\u003ez==pX-\u003ez)' failed Status: fixed\nLink: https://sqlite.org/src/tktview?name=5ad2aa6921 Found by: mrigger Debug assertion fts5StructureRead: Assertion `p-\u003eiStructVersion!=0' failed Status: fixed\nLink: https://sqlite.org/src/tktview?name=9cb7d0ef44 Found by: mrigger Debug assertion sqlite3VdbeExec: Assertion `memIsValid(pRec)' failed Status: fixed\nLink: https://sqlite.org/src/tktview?name=f00d096cae Found by: mrigger SELECT on window function causes a segfault Status: fixed\nLink: https://sqlite.org/src/tktview?name=d9ed4ebef1 Found by: mrigger Debug assertion sqlite3VdbeExec: Assertion `flags3==pIn3-\u003eflags' failed Status: fixed\nLink: https://sqlite.org/src/tktview?name=1b06916e01 Found by: mrigger Debug assertion sqlite3ExprSkipCollateAndLikely: Assertion `pExpr-\u003eop==TK_COLLATE' failed Status: fixed\nLink: https://sqlite.org/src/tktview?name=b0cb8aff56 Found by: mrigger Debug assertion constructAutomaticIndex: Assertion `!ExprHasProperty(pExpr, EP_FromJoin) || pExpr-\u003eiRightJoinTable!=pSrc-\u003eiCursor || pLoop-\u003eprereq!=0' failed Status: fixed\nLink: https://sqlite.org/src/tktview?name=7929c1efb2 Found by: mrigger Debug assertion sqlite3VdbeExec: Assertion `pIn1!=pIn3' failed Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=188f912b51 Found by: mrigger Debug assertion sqlite3VdbeExec: Assertion `flags3==pIn3-\u003eflags' failed (2) Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=9d708e4742 Found by: mrigger Debug assertion sqlite3MemCompare: Assertion `pMem1-\u003eenc==pMem2-\u003eenc || pMem1-\u003edb-\u003emallocFailed' failed Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=0911b5d161 Found by: mrigger Debug assertion sqlite3VdbeMemAboutToChange: Assertion `(mFlags\u0026MEM_Str)==0 || (pMem-\u003en==pX-\u003en \u0026\u0026 pMem-\u003ez==pX-\u003ez)' failed (2) Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=c62c5e5852 Found by: mrigger Debug assertion sqlite3VdbeExec: Assertion `pC!=0' failed Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=3ab4a9f02c Found by: mrigger Debug assertion impliesNotNullRow: Assertion `pWalker-\u003eeCode==0' failed Status: fixed\nLink: https://sqlite.org/src/tktview?name=dfd66334cf Found by: mrigger Debug assertion rtreeRelease: Assertion `pRtree-\u003enNodeRef==0 || pRtree-\u003ebCorrupt' failed Status: fixed\nLink: https://sqlite.org/src/tktview?name=5eadca17c4 Found by: mrigger FTS database disk image is malformed for special characters in table Status: fixed\nLink: https://sqlite.org/src/tktview?name=d62981b76d Found by: mrigger Debug assertion sqlite3VdbeExec: Assertion `pIn1!=pIn3' failed (2) Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=b383b90278 Found by: mrigger UPDATE with complex WHERE condition on rtree results in \"database table is locked\" error Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=cafeafe605 Found by: mrigger Debug assertion sqlite3Fts5HashScanNext: Assertion `!sqlite3Fts5HashScanEof(p)' failed Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=df46a6f38e Found by: mrigger FTS database disk image is malformed for UTF-16 encoding and integrity check Status: fixed\nLink: https://sqlite.org/src/tktview?name=752fdbf6e7 Found by: mrigger Debug assertion fts5CheckTransactionState: Assertion `iSavepoint\u0026lt;=p-\u003ets.iSavepoint' failed Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=167b2aac34 Found by: mrigger Debug assertion sqlite3TableColumnAffinity: Assertion `iColnCol' failed. Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=d87336c81c Found by: mrigger Debug assertion sqlite3BtreeInsert: Assertion `pCur-\u003ecurFlags \u0026 BTCF_ValidNKey' failed Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=ec8abb025e Found by: mrigger Debug assertion sqlite3FinishCoding: Assertion `!pParse-\u003eisMultiWrite || sqlite3VdbeAssertMayAbort(v, pParse-\u003emayAbort)' failed Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=7c13db5c3b Found by: mrigger Debug assertion assert_pager_state: Assertion `pPager-\u003echangeCountDone==0 || pPager-\u003eeLock\u003e=RESERVED_LOCK' failed Status: fixed\nLink: https://sqlite.org/src/tktview?name=fb3b3024ea Found by: mrigger FTS4 integrity-check results in \"database disk image is malformed\" for UTF-16 encoding Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=1dc432db3b Found by: mrigger Debug assertion sqlite3VdbeExec: Assertion `memIsValid(\u0026aMem[pOp-\u003ep1])' failed. Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=37823501c6 Found by: mrigger Debug assertion exprSrcCount: Assertion `0' failed Status: fixed\nLink: https://sqlite.org/src/tktview?name=36ffedcb9a Found by: mrigger Debug assertion sqlite3VdbeExec: Assertion `memIsValid(pRec)' failed Status: fixed\nLink: https://sqlite.org/src/tktview?name=5fbc159eeb Found by: mrigger Debug assertion sqlite3VdbeMemAboutToChange: Assertion `(mFlags\u0026MEM_Real)==0 || pMem-\u003eu.r==pX-\u003eu.r' failed Status: fixed\nLink: https://sqlite.org/src/tktview?name=de4b04149b Found by: mrigger Trigger on normal table causes the database disk image to become malformed Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=314cc133e5 Found by: mrigger NATURAL JOIN on virtual table results in \"parse error in rank function\" Status: fixed\nLink: https://www3.sqlite.org/src/tktview?name=7c0e06b162 Found by: mrigger Debug assertion codeVectorCompare: Assertion `0' failed Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=892575cdba Found by: mrigger Debug assertion sqlite3VdbeMemAboutToChange: Assertion `(mFlags\u0026MEM_Real)==0 || pMem-\u003eu.r==pX-\u003eu.r' failed (2) Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=46fcd700b8 Found by: mrigger FTS5 integrity-check results in \"database disk image is malformed\" for UTF-16 encoding and SUBSTR Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=771fe61761 Found by: mrigger DBSTAT query computes incorrect result for aggregate column Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=727074e2ae Found by: mrigger DBSTAT query computes incorrect result for name column Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=74a4c3860c Found by: mrigger Incorrect result for query with 0 \u003e= t0.c0 AND t0.c0 = v0.c0 condition Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=82ac75ba00 Found by: mrigger Incorrect result for COUNT(), UTF16be encoding and SUBSTR Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=9eda2697f5 Found by: mrigger GROUP BY causes unexpected conversion Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=e0c2ad1aa8 Found by: mrigger MAX yields unexpected result for UTF-16 Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=1b8d726456 Found by: mrigger Unexpected result for MIN on string that contains a null character Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=fa146dcfe6 Found by: mrigger UNION operator malfunctions in LEFT JOIN on view Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=45f4bf4eb4 Found by: mrigger Incorrect result for IN expression with right-hand IS TRUE sub-expression Status: fixed\nLink: Found by: mrigger Unexpected result for % and '1E1' Status: fixed\nLink: https://www.sqlite.org/src/tktview?name=be31cf009c Found by: mrigger DuckDB (111 bugs) BETWEEN with subquery and column results in unexpected error Status: fixed\nLink: https://github.com/duckdb/duckdb/issues/3588 Found by: kokrui Unexpected Error for RTRIM Function in Where Clause Status: fixed\nLink: https://github.com/duckdb/duckdb/issues/3616 Found by: kokrui Crash When Creating Index Status: unconfirmed\nLink: https://github.com/duckdb/duckdb/issues/4976 Found by: bajinsheng Segmentation fault on `BETWEEN` Status: fixed\nLink: https://github.com/duckdb/duckdb/issues/6861 Found by: Chi Zhang Unexpected result when take subquery as operand Status: confirmed\nLink: https://github.com/duckdb/duckdb/issues/7044 Found by: Chi Zhang Different returned datatype of a `CASE` statement in different query. Status: confirmed\nLink: https://github.com/duckdb/duckdb/issues/7064 Found by: Chi Zhang Unexpected results when integer overflow Status: unconfirmed\nLink: https://github.com/duckdb/duckdb/issues/7094 Found by: Chi Zhang Unexpected results on specific values Status: fixed\nLink: https://github.com/duckdb/duckdb/issues/7142 Found by: Chi Zhang Hang on `SELECT` query Status: fixed\nLink: https://github.com/duckdb/duckdb/issues/7143 Found by: Chi Zhang `INTERNAL Error: Logical column index 1 out of range` Status: fixed\nLink: https://github.com/duckdb/duckdb/issues/7250 Found by: Chi Zhang DuckDB hang on `DELETE` Status: fixed\nLink: https://github.com/duckdb/duckdb/issues/7530 Found by: Chi Zhang Segmentation fault on `SELECT` Status: fixed\nLink: https://github.com/duckdb/duckdb/issues/7551 Found by: Chi Zhang Inconsistent results of subquery in `INSERT` and `SELECT`, and an unexpected error Status: fixed\nLink: https://github.com/duckdb/duckdb/issues/7601 Found by: Chi Zhang DuckDB hang on `DELETE` Status: fixed\nLink: https://github.com/duckdb/duckdb/issues/7610 Found by: Chi Zhang Unexpected results on common table expressions Status: fixed\nLink: https://github.com/duckdb/duckdb/issues/7960 Found by: Chi Zhang Incorrect result by subquery and join Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/100561 Found by: Chi Zhang internal error: null rejection requested on non-null column Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/100559 Found by: Chi Zhang kvcoord: setting `kv.range_descriptor_cache.size=0` results in range iterator to retry endlessly Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/101011 Found by: Chi Zhang internal error: failed to parse locale \"\": language: tag is not well-formed Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/101418 Found by: Chi Zhang Unexpected results of `TIME` value under JDBC Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/101591 Found by: Chi Zhang `internal error: expected subquery to be lazily planned as a routine` Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/101980 Found by: Chi Zhang Unexpected results of `CASE` and `BETWEEN` Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/102110 Found by: Chi Zhang Unexpected results might be related to `BIT` and `INDEX` Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/102412 Found by: Chi Zhang Unexpected error `unknown signature: bit_length(string) (desired )` Status: confirmed\nLink: https://github.com/cockroachdb/cockroach/issues/102716 Found by: Chi Zhang Unexpected results of `IN` with redundant values list Status: confirmed\nLink: https://github.com/cockroachdb/cockroach/issues/102864 Found by: Chi Zhang Unexpected results related to `INDEX` Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/103755 Found by: Chi Zhang Inconsistent result of `AVG` on big float number Status: confirmed\nLink: https://github.com/cockroachdb/cockroach/issues/104319 Found by: Chi Zhang Unexpected hang on subquery Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/105882 Found by: Chi Zhang Unexpected Results when using IS NOT NULL Status: fixed\nLink: https://github.com/duckdb/duckdb/issues/9806 Found by: Suyang Zhong Missing Results when using Floating-point in BETWEEN Status: fixed\nLink: https://github.com/duckdb/duckdb/issues/9825 Found by: Suyang Zhong Internal Error: Calling StringValue::Get on a NULL value Status: fixed\nLink: https://github.com/duckdb/duckdb/issues/9870 Found by: Suyang Zhong INTERNAL Error: Failed to bind column reference \"\" [1.2] (bindings: [1.1]) Status: fixed\nLink: https://github.com/duckdb/duckdb/issues/10087 Found by: Suyang Zhong Unexpected Result When Using `IS DISTINCT FROM` and `CASE WHEN` in a JOIN clause Status: fixed\nLink: https://github.com/duckdb/duckdb/issues/12181 Found by: Suyang Zhong Unexpected result when using IN with DATE values Status: fixed\nLink: https://github.com/duckdb/duckdb/issues/13380 Found by: Suyang Zhong Unexpected result when casting negative integer to BIT Status: fixed\nLink: https://github.com/duckdb/duckdb/issues/13506 Found by: Suyang Zhong Unexpected result after creating index on varchar column Status: fixed\nLink: https://github.com/duckdb/duckdb/issues/13785 Found by: Suyang Zhong Unexpected result when using IN with TIME values Status: confirmed\nLink: https://github.com/duckdb/duckdb/issues/13813 Found by: Suyang Zhong INTERNAL ERROR: Unimplemented type for normalify Status: fixed\nLink: https://github.com/duckdb/duckdb/issues/13933 Found by: Ming Wei Tan A predicate NOT(NULL OR TRUE) unexpectedly evaluates to TRUE Status: fixed\nLink: https://github.com/cwida/duckdb/issues/489 Found by: mrigger A comparison column=column unexpectedly evaluates to TRUE for column=NULL Status: fixed\nLink: https://github.com/cwida/duckdb/issues/490 Found by: mrigger PRAGMA table_info provides no output Status: fixed\nLink: https://github.com/cwida/duckdb/issues/491 Found by: mrigger SIMILAR TO results in an \"Unknown error -1\" Status: fixed\nLink: https://github.com/cwida/duckdb/issues/493 Found by: mrigger Comparison on UNIQUE NUMERIC column causes a query to omit a row in the result set Status: fixed\nLink: https://github.com/cwida/duckdb/issues/495 Found by: mrigger INSERT causes an abort with \"terminate called after throwing an instance of 'duckdb::InvalidTypeException'\" Status: fixed\nLink: https://github.com/cwida/duckdb/issues/496 Found by: mrigger Comparison of two boolean columns in different tables results in an error \"Not implemented: Unimplemented type for sort\" Status: fixed\nLink: https://github.com/cwida/duckdb/issues/497 Found by: mrigger SELECT causes JDBC driver to crash Status: fixed\nLink: https://github.com/cwida/duckdb/issues/500 Found by: mrigger RIGHT JOIN with a predicate that compares two integer columns results in an \"Unhandled type\" error Status: fixed\nLink: https://github.com/cwida/duckdb/issues/503 Found by: mrigger INSERT results in an error \"Not implemented: Cannot create data from this type\" Status: fixed\nLink: https://github.com/cwida/duckdb/issues/504 Found by: mrigger A RIGHT JOIN unexpectedly fetches rows Status: fixed\nLink: https://github.com/cwida/duckdb/issues/505 Found by: mrigger Query results in an error \"INTERNAL: Failed to bind column reference \"c0\" [5.0] (bindings: [6.0])\" Status: fixed\nLink: https://github.com/cwida/duckdb/issues/506 Found by: mrigger Creating an empty table results in a crash Status: fixed\nLink: https://github.com/cwida/duckdb/issues/507 Found by: mrigger LEFT JOIN on column with NULL value results in a segmentation fault Status: fixed\nLink: https://github.com/cwida/duckdb/issues/508 Found by: mrigger SIMILAR TO results in an incorrect result Status: fixed\nLink: https://github.com/cwida/duckdb/issues/510 Found by: mrigger LEFT JOIN with comparison on integer columns results in \"Not implemented: Unimplemented type for nested loop join!\" Status: fixed\nLink: https://github.com/cwida/duckdb/issues/513 Found by: mrigger Incorrect result after an INSERT violates a UNIQUE constraint Status: fixed\nLink: https://github.com/cwida/duckdb/issues/514 Found by: mrigger Query with a negative shift predicate yields an incorrect result Status: fixed\nLink: https://github.com/cwida/duckdb/issues/515 Found by: mrigger Query with comparison on boolean column results in \"Invalid type: Invalid Type [BOOL]: Invalid type for index\" Status: fixed\nLink: https://github.com/cwida/duckdb/issues/516 Found by: mrigger Query with an AND predicate, NOT and comparison yields an incorrect result Status: fixed\nLink: https://github.com/cwida/duckdb/issues/517 Found by: mrigger Query using the LN() function does not terminate Status: fixed\nLink: https://github.com/cwida/duckdb/issues/518 Found by: mrigger ROUND() evaluates to -nan Status: fixed\nLink: https://github.com/cwida/duckdb/issues/521 Found by: mrigger Casting a large number to REAL and multiplying it with zero results in -nan Status: fixed\nLink: https://github.com/cwida/duckdb/issues/522 Found by: mrigger The trigonometric functions can result in -nan Status: fixed\nLink: https://github.com/cwida/duckdb/issues/523 Found by: mrigger Incorrect result for a JOIN predicate t1.c0 IN (t0.c0) and WHERE predicate t1.c0\u0026lt;=t0.c0 Status: fixed\nLink: https://github.com/cwida/duckdb/issues/525 Found by: mrigger Query that uses the CONCAT() function and OR expression crashes Status: fixed\nLink: https://github.com/cwida/duckdb/issues/526 Found by: mrigger Incorrect result for query that uses REGEXP_MATCHES() Status: fixed\nLink: https://github.com/cwida/duckdb/issues/528 Found by: mrigger SELECT on DATE column with a large negative value results in a \"double free or corruption\" Status: fixed\nLink: https://github.com/cwida/duckdb/issues/531 Found by: mrigger Overflow when casting from REAL to INT results in \"Invalid TypeId -1\" Status: fixed\nLink: https://github.com/cwida/duckdb/issues/533 Found by: mrigger UPDATE causes subsequent query to segfault Status: fixed\nLink: https://github.com/cwida/duckdb/issues/534 Found by: mrigger GROUP BY clause results in non-deterministic result Status: fixed\nLink: https://github.com/cwida/duckdb/issues/535 Found by: mrigger Nondeterministic clause when using an UNION query and HAVING clause Status: fixed\nLink: https://github.com/cwida/duckdb/issues/536 Found by: mrigger Fetching from table and view results in a crash Status: fixed\nLink: https://github.com/cwida/duckdb/issues/537 Found by: mrigger Incorrect result for predicate with shift on a BIGINT column Status: fixed\nLink: https://github.com/cwida/duckdb/issues/538 Found by: mrigger [JDBC] Special character causes the JVM to terminate with \"basic_string::_M_construct null not valid\" Status: fixed\nLink: https://github.com/cwida/duckdb/issues/539 Found by: mrigger Nested MAX() results in nondeterministic result or double free Status: fixed\nLink: https://github.com/cwida/duckdb/issues/540 Found by: mrigger Unexpected result for SUM() upon overflow Status: fixed\nLink: https://github.com/cwida/duckdb/issues/543 Found by: mrigger SELECT on view with text constant in ORDER BY crashes Status: fixed\nLink: https://github.com/cwida/duckdb/issues/544 Found by: mrigger Query with SIMILAR TO results in \"Assertion `strlen(dataptr) == length' failed\" Status: fixed\nLink: https://github.com/cwida/duckdb/issues/547 Found by: mrigger Nested CASE expression results in Assertion `other.auxiliary-\u003etype == VectorBufferType::STRING_BUFFER' failed Status: fixed\nLink: https://github.com/cwida/duckdb/issues/549 Found by: mrigger RIGHT JOIN results in Assertion `filter-\u003eexpressions.size() == 1' failed Status: fixed\nLink: https://github.com/cwida/duckdb/issues/552 Found by: mrigger Incorrect result for SUM() and negative number Status: fixed\nLink: https://github.com/cwida/duckdb/issues/560 Found by: mrigger SELECT with CASE expression causes an assertion failure \"Assertion `!entry.first-\u003eEquals(\u0026expr)' failed\" Status: fixed\nLink: https://github.com/cwida/duckdb/issues/562 Found by: mrigger REVERSE() on special character results in \"Assertion `strcmp(dataptr, normalized) == 0' failed.\" Status: fixed\nLink: https://github.com/cwida/duckdb/issues/567 Found by: mrigger Incorrect result for BETWEEN query that casts column to boolean Status: fixed\nLink: https://github.com/cwida/duckdb/issues/571 Found by: mrigger Query using PREFIX() results in an error std::bad_alloc Status: fixed\nLink: https://github.com/cwida/duckdb/issues/572 Found by: mrigger Updated value in column is not visible in a SELECT Status: fixed\nLink: https://github.com/cwida/duckdb/issues/579 Found by: mrigger SUBSTRING with an invalid start position causes a segmentation fault Status: fixed\nLink: https://github.com/cwida/duckdb/issues/580 Found by: mrigger DISTINCT malfunctions for BOOLEAN Status: fixed\nLink: https://github.com/cwida/duckdb/issues/581 Found by: mrigger Comparing a string with a boolean yields an incorrect result after UPDATE Status: fixed\nLink: https://github.com/cwida/duckdb/issues/583 Found by: mrigger A select with BETWEEN and VARCHAR cast results in an incorrect result Status: fixed\nLink: https://github.com/cwida/duckdb/issues/584 Found by: mrigger Predicate checking for an empty string yields an incorrect result Status: fixed\nLink: https://github.com/cwida/duckdb/issues/585 Found by: mrigger NOACCENT.NOCASE comparison with a special character results in a segmentation fault Status: fixed\nLink: https://github.com/cwida/duckdb/issues/586 Found by: mrigger A negative DATE results in a \"double free or corruption\" crash Status: fixed\nLink: https://github.com/cwida/duckdb/issues/587 Found by: mrigger Query with complex ORDER BY causes an incorrect rowid value Status: fixed\nLink: https://github.com/cwida/duckdb/issues/588 Found by: mrigger Creating an index on rowid results in an internal error \"Failed to bind column reference\" Status: fixed\nLink: https://github.com/cwida/duckdb/issues/589 Found by: mrigger Comparison with a DATE yields an incorrect result Status: fixed\nLink: https://github.com/cwida/duckdb/issues/590 Found by: mrigger Expression with LIKE and comparison causes an assertion failure Status: fixed\nLink: https://github.com/cwida/duckdb/issues/592 Found by: mrigger STDDEV_POP unexpectedly does not fetch any rows Status: fixed\nLink: https://github.com/cwida/duckdb/issues/596 Found by: mrigger UPDATE results in crash or assertion failure Status: fixed\nLink: https://github.com/cwida/duckdb/issues/599 Found by: mrigger GROUP BY does not take COLLATE into account Status: fixed\nLink: https://github.com/cwida/duckdb/issues/602 Found by: mrigger BETWEEN with COLLATE NOACCENT.NOCASE expression results in a segfault/ASan failure Status: fixed\nLink: https://github.com/cwida/duckdb/issues/603 Found by: mrigger Incorrect result for MIN() on expression involving rowid Status: fixed\nLink: https://github.com/cwida/duckdb/issues/609 Found by: mrigger Large argument to RPAD results in std::bad_alloc Status: fixed\nLink: https://github.com/cwida/duckdb/issues/610 Found by: mrigger Failed ALTER COLUMN results in a \"Transaction conflict\" error that cannot be aborted Status: fixed\nLink: https://github.com/cwida/duckdb/issues/618 Found by: mrigger Query on altered table results in a segmentation fault Status: fixed\nLink: https://github.com/cwida/duckdb/issues/619 Found by: mrigger UPDATE on altered table results in an error \"Could not find node in column segment tree\" Status: fixed\nLink: https://github.com/cwida/duckdb/issues/622 Found by: mrigger ALTER TABLE results in an assertion failure \"Assertion `expr.return_type == vector.type' failed\" Status: fixed\nLink: https://github.com/cwida/duckdb/issues/624 Found by: mrigger DROP column results in an assertion failure unique.index \u0026lt; base.columns.size(). Status: fixed\nLink: https://github.com/cwida/duckdb/issues/625 Found by: mrigger DROP column results in an assertion failure unique.index \u0026lt; base.columns.size() 2 Status: fixed\nLink: https://github.com/cwida/duckdb/issues/628 Found by: mrigger ALTER TYPE with USING results in an assertion failure \"types.size() \u003e 0\" Status: fixed\nLink: https://github.com/cwida/duckdb/issues/629 Found by: mrigger Query using LEFT() results in a segmentation fault Status: fixed\nLink: https://github.com/cwida/duckdb/issues/633 Found by: mrigger SELECT with RIGHT JOIN causes an assertion failure \"Assertion `!finalized' failed\" Status: fixed\nLink: https://github.com/cwida/duckdb/issues/637 Found by: mrigger CockroachDB (83 bugs) sql: support SCRUB on temp tables Status: confirmed\nLink: https://github.com/cockroachdb/cockroach/issues/83770 Found by: bajinsheng Internal Error: Comparison Overload not Found Status: confirmed\nLink: https://github.com/cockroachdb/cockroach/issues/83792 Found by: bajinsheng ERROR: no builtin aggregate for SUM_INT on [unknown] Status: confirmed\nLink: https://github.com/cockroachdb/cockroach/issues/83874 Found by: bajinsheng Crashing by EXPLAIN Statement Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/83965 Found by: bajinsheng Invalid Memory Address Error of Specific SQL Query Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/83973 Found by: bajinsheng Unexpected Error of Unique Index Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/83976 Found by: bajinsheng Crash: panic: RecordingStructured has 30 recordings; expected 1 Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/84056 Found by: bajinsheng Unexpected Overflow Error by Huge Interval Value Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/84154 Found by: bajinsheng Inconsistent Case Return Types Decimal Int Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/85356 Found by: bajinsheng No Result Returned by SHOW COLUMN Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/85388 Found by: bajinsheng internal error: no volatility for cast decimal::timestamp Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/85389 Found by: bajinsheng opt: internal error: lookup for ComparisonExpr Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/85390 Found by: bajinsheng opt: internal error: no output column equivalent to 2 Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/85393 Found by: bajinsheng Unexpected Error in SHOW COLUMNS Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/85394 Found by: bajinsheng opt: internal error: estimated row count must be non-zero Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/85499 Found by: bajinsheng Unexpected Result by UNION Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/85502 Found by: bajinsheng An Unexpected Error in `CROSS MERGE JOIN` Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/88104 Found by: bajinsheng ERROR: internal error: expected *DInt, found tree.dNull Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/94264 Found by: bajinsheng An Unexpected Error in `CROSS MERGE JOIN` Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/88104 Found by: bajinsheng Potential Issue for Estimated Rows Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/88455 Found by: bajinsheng An Issue of Estimated Rows Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/89161 Found by: bajinsheng Unexpected Estimated Rows in `HAVING` clause Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/89462 Found by: bajinsheng Suspicious Estimated Rows by `OR` Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/90112 Found by: bajinsheng Suspicious Estimated Rows by `DISTINCT` Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/90113 Found by: bajinsheng ERROR: internal error: expected *DInt, found tree.dNull Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/94264 Found by: bajinsheng internal error: comparison overload not found (ge, unknown, unknown) Status: confirmed\nLink: https://github.com/cockroachdb/cockroach/issues/128889 Found by: Suyang Zhong Generated column causes query to omit a record in the result set Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/44132 Found by: mrigger Crash when using VECTORIZE=experimental_on Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/44133 Found by: mrigger Internal error in expression that uses a CAST and COLLATE Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/44137 Found by: mrigger Unexpected error when using EXPERIMENTAL SCRUB Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/44142 Found by: mrigger DEFAULT value causes unexpected syntax error when executing INSERT Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/44148 Found by: mrigger TO_ENGLISH(-9223372036854775808) results in an internal error Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/44152 Found by: mrigger Incorrect result for BETWEEN SYMMETRIC query Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/44154 Found by: mrigger Internal error for BETWEEN operator and CAST to BYTES Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/44181 Found by: mrigger Query on VIEW with OFFSET NULL and WHERE condition involving CURRENT_USER() unexpectedly fetches a row Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/44203 Found by: mrigger Incorrect result for query with IS NULL condition on UNIQUE column and VECTORIZE=experimental_on Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/44207 Found by: mrigger Internal error setting tracing=true Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/44244 Found by: mrigger Incorrect result for IS NULL query on VIEW using SELECT DISTINCT Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/44296 Found by: mrigger Internal error for CASE expression and VECTORIZE=experimental_on Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/44304 Found by: mrigger Deadlock in SHOW TABLES Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/44385 Found by: mrigger Internal error \"estimated distinct count must be non-zero\" Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/44418 Found by: mrigger Multi-record UPSERT inserts duplicate values in PRIMARY KEY, resulting in inconsistent results Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/44466 Found by: mrigger Internal error for NATURAL JOIN and VECTORIZE='experimental_on' Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/44547 Found by: mrigger Server exits on query with LEFT JOIN Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/44565 Found by: mrigger Internal error for ILIKE_ESCAPE and special characters Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/44621 Found by: mrigger Complex ORDER BY clause results in internal error with VECTORIZE=experimental_on Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/44624 Found by: mrigger Internal error for SUBSTRING with negative length and VECTORIZE=experimental_on Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/44625 Found by: mrigger Internal error for arithmetic operators and NULLIF Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/44632 Found by: mrigger Internal error for query with negative LIMIT on view with negative LIMIT Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/44683 Found by: mrigger Internal error for case expression involving NULLIF and VECTORIZE=experimental_on Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/44726 Found by: mrigger FULL JOIN with an SUBSTRING ON clause results in an internal error Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/44746 Found by: mrigger NOT BETWEEN query on VIEW results in an internal error with VECTORIZE=experimental_on Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/44822 Found by: mrigger Internal error for SUBSTRING, INT4 cast, and VECTORIZE=experimental_on Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/44881 Found by: mrigger Internal error when setting VECTORIZE = experimental_on and DEFAULT_INT_SIZE = 4 Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/44904 Found by: mrigger EXPERIMENTAL SCRUB TABLE crashes server for table with TIMESTAMP column Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/44992 Found by: mrigger Internal error for VECTORIZE=experimental_on, DEFAULT_INT_SIZE=4, and aggregate query Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/45038 Found by: mrigger COUNT_ROWS() malfunctions for GROUP BY Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/45453 Found by: mrigger EXPLAIN (VEC) SELECT results in an internal error \"zero length schema unsupported\" Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/46122 Found by: mrigger EXPLAIN (VEC) SELECT results in an internal error \"input to aggregatorBase is not an execinfra.OpNode\" Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/46123 Found by: mrigger Incorrect result for MAX, INTERLEAVE IN PARENT, and vectorize=experimental_on Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/46140 Found by: mrigger Query with negative LIMIT results in an internal error \"node lookup-join with MaxCost added to the memo\" Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/46187 Found by: mrigger VALUES table expression malfunctions with MAX Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/46196 Found by: mrigger DROP DATABASE issue with TEMP tables Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/46393 Found by: mrigger UPSERT causes a decoding error in collated string column Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/46394 Found by: mrigger INSERT ... DO NOTHING results in an error \"UPSERT or INSERT...ON CONFLICT command cannot affect row a second time\" Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/46395 Found by: mrigger UPSERT on table with FOREIGN KEY constraint results in an internal error \"cannot convert int to type bool\" Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/46397 Found by: mrigger NATURAL JOIN fails with \"duplicate column name\" on view Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/46403 Found by: mrigger EXPLAIN (VEC) results in an internal error \"input to aggregatorBase is not an execinfra.OpNode\" Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/46404 Found by: mrigger HAVING clause incorrectly evaluates to TRUE for VARIANCE(0) IS NOT NULL predicate Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/46412 Found by: mrigger Query with HAVING clause, DISTSQL=off, and vectorize=on results in an internal error Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/46503 Found by: mrigger Internal error for vectorize=on and multiplication of INT4 values Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/46714 Found by: mrigger Internal error: lookup for ComparisonExpr ((@2)[float] != ('NaN')[string])[bool]'s CmpOp failed Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/46914 Found by: mrigger Unexpected syntax error for expression involving ARRAY[NULL] Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/46915 Found by: mrigger CREATE STATISTICS on table with ARRAY column Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/46964 Found by: mrigger Comparison with (-9223372036854775808)::TIMESTAMP results in an unexpected error Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/46973 Found by: mrigger Query with an invalid regular expression unexpectedly does not fail Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/46981 Found by: mrigger Incorrect result for query on interleaved index when vectorize=on Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/47029 Found by: mrigger TRUNCATE on temporary table results in \"unexpected value: \" Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/47030 Found by: mrigger Internal error for an invalid CREATE INDEX statement Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/47037 Found by: mrigger SELECT statement on table with a hash-sharded index results in an internal error Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/47041 Found by: mrigger ORDER BY unexpectedly causes a value to be represented in E notation when VECTORIZE=on Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/47115 Found by: mrigger Column that is used both as an INT2 and INT4 results in an internal error Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/47131 Found by: mrigger BETWEEN expression with an INTERVAL and DECIMAL cast results in an incorrect result Status: fixed\nLink: https://github.com/cockroachdb/cockroach/issues/47327 Found by: mrigger TiDB (74 bugs) incorrect unresolved column when using natural join Status: confirmed\nLink: https://github.com/pingcap/tidb/issues/35522 Found by: bajinsheng unexpected unresolved column error when the view refers to dual table Status: fixed\nLink: https://github.com/pingcap/tidb/issues/35527 Found by: bajinsheng Runtime error: invalid memory address Status: confirmed\nLink: https://github.com/pingcap/tidb/issues/35623 Found by: bajinsheng Unexpected Result with a FALSE Expression in WHERE Status: confirmed\nLink: https://github.com/pingcap/tidb/issues/35645 Found by: bajinsheng Unexpected Error by CAST and CHAR functions Status: confirmed\nLink: https://github.com/pingcap/tidb/issues/35652 Found by: bajinsheng Unexpected Error for Function INET_ATON Status: confirmed\nLink: https://github.com/pingcap/tidb/issues/35677 Found by: bajinsheng Unexpected Connection Lost Status: confirmed\nLink: https://github.com/pingcap/tidb/issues/35678 Found by: bajinsheng Inconsistent Results in SELECT Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/36853 Found by: bajinsheng Unexpected Result by CONCAT_WS Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/36888 Found by: bajinsheng ERROR 8141 (HY000): assertion failed Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38295 Found by: bajinsheng Incorrect Results by `REGEXP` Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38303 Found by: bajinsheng Incorrect Result by `LEFT JOIN` Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38304 Found by: bajinsheng runtime error: invalid memory address or nil pointer dereference Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38305 Found by: bajinsheng Unexpected Results Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38310 Found by: bajinsheng Error [types:1690]%s value is out of range in '%s' Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38352 Found by: bajinsheng Unexpected Error: Failed to read auto-increment value from storage engine Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38483 Found by: bajinsheng Unexpected Results by RIGHT JOIN Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38654 Found by: bajinsheng rule PredicatePushDown pushes wrong filter across projection Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38736 Found by: bajinsheng ERROR 8141 (HY000): assertion failed Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38295 Found by: bajinsheng Incorrect Results by `REGEXP` Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38303 Found by: bajinsheng Incorrect Result by `LEFT JOIN` Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38304 Found by: bajinsheng runtime error: invalid memory address or nil pointer dereference Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38305 Found by: bajinsheng Unexpected Results Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38310 Found by: bajinsheng Unexpected Estimated Rows of `OR` Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38319 Found by: bajinsheng Error [types:1690]%s value is out of range in '%s' Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38352 Found by: bajinsheng Question About the Estimated Rows in `GROUP BY` Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38474 Found by: bajinsheng Suspicious Estimated Rows by `JOIN` Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38479 Found by: bajinsheng Suspicious Estimated Rows by HAVING Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38482 Found by: bajinsheng Unexpected Error: Failed to read auto-increment value from storage engine Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38483 Found by: bajinsheng Unexpected Results by RIGHT JOIN Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38654 Found by: bajinsheng Unexpected Estimated Rows by INNER JOIN Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38665 Found by: bajinsheng Unexpected Estimated Rows by WHERE clause Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38721 Found by: bajinsheng rule PredicatePushDown pushes wrong filter across projection Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38736 Found by: bajinsheng runtime error: index out of range [7] with length 4 Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/44747 Found by: bajinsheng Unexpected result of subquery Status: fixed\nLink: https://github.com/pingcap/tidb/issues/42912 Found by: Chi Zhang Unexpected error in `ORDER BY` Status: confirmed\nLink: https://github.com/pingcap/tidb/issues/42941 Found by: Chi Zhang Unexpected error message on constant Status: confirmed\nLink: https://github.com/pingcap/tidb/issues/42942 Found by: Chi Zhang An expression has two different value in two queries Status: confirmed\nLink: https://github.com/pingcap/tidb/issues/43026 Found by: Chi Zhang `runtime error: index out of range [1] with length 1` on `SELECT` Status: confirmed\nLink: https://github.com/pingcap/tidb/issues/43256 Found by: Chi Zhang Unexpected results of subquery in `INSERT` Status: confirmed\nLink: https://github.com/pingcap/tidb/issues/43373 Found by: Chi Zhang Unexpected error `Unknown column 't1.c0' in 'where clause'` Status: confirmed\nLink: https://github.com/pingcap/tidb/issues/43569 Found by: Chi Zhang Unexpected results when `CASE` and `IN` use together Status: confirmed\nLink: https://github.com/pingcap/tidb/issues/43624 Found by: Chi Zhang Unexpected error `Unknown table ''` on CTE Status: confirmed\nLink: https://github.com/pingcap/tidb/issues/44673 Found by: Chi Zhang Unexpected error when `CHECK` a predicate that is always true. Status: fixed\nLink: https://github.com/pingcap/tidb/issues/44689 Found by: Chi Zhang Unexpected results of `ANY` operator Status: confirmed\nLink: https://github.com/pingcap/tidb/issues/44706 Found by: Chi Zhang Unexpected Results of IN expression With NATURAL RIGHT JOIN Status: fixed\nLink: https://github.com/pingcap/tidb/issues/49476 Found by: Suyang Zhong Runtime error when using overflow integers Status: confirmed\nLink: https://github.com/pingcap/tidb/issues/50489 Found by: Suyang Zhong Unexpected Result with NATURAL RIGHT JOIN and Bitwise NOT Status: confirmed\nLink: https://github.com/pingcap/tidb/issues/53506 Found by: Suyang Zhong Double negation causes incorrect result Status: fixed\nLink: https://github.com/pingcap/tidb/issues/15725 Found by: mrigger Incorrect result for an UNION query and a generated column Status: fixed\nLink: https://github.com/pingcap/tidb/issues/15733 Found by: mrigger ANALYZE TABLE causes SIGSEGV on latest trunk Status: fixed\nLink: https://github.com/pingcap/tidb/issues/15746 Found by: mrigger ANALYZE TABLE results in \"analyze worker panic\" with tidb_enable_fast_analyze=1 Status: fixed\nLink: https://github.com/pingcap/tidb/issues/15751 Found by: mrigger ANALYZE TABLE results in \"invalid encoded key\" with tidb_enable_fast_analyze=1 Status: fixed\nLink: https://github.com/pingcap/tidb/issues/15752 Found by: mrigger COLLATE causes an incorrect result in the presence of an index Status: fixed\nLink: https://github.com/pingcap/tidb/issues/15789 Found by: mrigger Unexpected \"Data truncation: %s value is out of range in '%s'\" error in UNION query Status: fixed\nLink: https://github.com/pingcap/tidb/issues/15790 Found by: mrigger GROUP BY clause nondeterministically results in an incorrect result or error Status: fixed\nLink: https://github.com/pingcap/tidb/issues/15810 Found by: mrigger A predicate column1 = -column2 incorrectly evaluates to false for 0 values Status: fixed\nLink: https://github.com/pingcap/tidb/issues/15812 Found by: mrigger Join on tables with redundant indexes causes a server panic Status: fixed\nLink: https://github.com/pingcap/tidb/issues/15813 Found by: mrigger Incorrect result for LEFT JOIN and NULL values Status: fixed\nLink: https://github.com/pingcap/tidb/issues/15846 Found by: mrigger Query with a NATURAL LEFT JOIN unexpectedly results in an error Status: fixed\nLink: https://github.com/pingcap/tidb/issues/15850 Found by: mrigger Query with RIGHT JOIN causes a server panic Status: fixed\nLink: https://github.com/pingcap/tidb/issues/15858 Found by: mrigger Incorrect result for a predicate that uses the CHAR() function Status: fixed\nLink: https://github.com/pingcap/tidb/issues/15986 Found by: mrigger LIKE operator malfunctions for COLLATE 'latin1_bin' Status: fixed\nLink: https://github.com/pingcap/tidb/issues/15988 Found by: mrigger Using a column both in a string comparison and as a boolean yields an incorrect result Status: fixed\nLink: https://github.com/pingcap/tidb/issues/15990 Found by: mrigger A USE_INDEX_MERGE hint causes a server panic Status: fixed\nLink: https://github.com/pingcap/tidb/issues/15991 Found by: mrigger USE_INDEX_MERGE on table with generated column causes a server crash Status: fixed\nLink: https://github.com/pingcap/tidb/issues/15992 Found by: mrigger fast ANALYZE TABLE on INDEX PRIMARY causes an error \"analyze worker panic\" Status: fixed\nLink: https://github.com/pingcap/tidb/issues/15993 Found by: mrigger USE_INDEX_MERGE results in an incorrect result for a generated column Status: fixed\nLink: https://github.com/pingcap/tidb/issues/15994 Found by: mrigger SELECT on table with generated column causes a server panic Status: fixed\nLink: https://github.com/pingcap/tidb/issues/16020 Found by: mrigger RIGHT JOIN with CONCAT_WS fails to fetch a row Status: fixed\nLink: https://github.com/pingcap/tidb/issues/16023 Found by: mrigger INSERT IGNORE causes an incorrect result for a query on a DECIMAL column Status: fixed\nLink: https://github.com/pingcap/tidb/issues/16025 Found by: mrigger REGEXP predicate unexpectedly results in an error \"No valid regexp pattern found\" Status: fixed\nLink: https://github.com/pingcap/tidb/issues/16029 Found by: mrigger NATURAL LEFT JOIN with a NOT predicate results in a server panic Status: fixed\nLink: https://github.com/pingcap/tidb/issues/16419 Found by: mrigger A predicate with COLLATE 'binary' results in a server panic \"invalid memory address or nil pointer dereference\" Status: fixed\nLink: https://github.com/pingcap/tidb/issues/16779 Found by: mrigger Umbra (46 bugs) Unexpected Results when Comparing Boolean Values Status: fixed\nLink: None Found by: Suyang Zhong Potential Issue in BETWEEN operator Status: fixed\nLink: None Found by: Suyang Zhong Potential Issue in NULLIF function Status: fixed\nLink: None Found by: Suyang Zhong Potential Issue about boolean pruning in filter Status: fixed\nLink: None Found by: Suyang Zhong Potential Issue about UNIQUE INDEX Status: fixed\nLink: None Found by: Suyang Zhong Potential Issue when Dropping table Status: fixed\nLink: None Found by: Suyang Zhong Segmentation fault when Using NATURAL LEFT JOIN Status: fixed\nLink: None Found by: Suyang Zhong Potential issue when Using Boolean values and BETWEEN Operator Status: fixed\nLink: None Found by: Suyang Zhong Potential issue handling Boolean values after INDEX Status: fixed\nLink: None Found by: Suyang Zhong Unexpected results after triggering an index scan Status: fixed\nLink: None Found by: Suyang Zhong Potential Issue when Using CONCAT with overflow integers Status: fixed\nLink: None Found by: Suyang Zhong Segmentation fault when Using Between Operator Status: fixed\nLink: None Found by: Suyang Zhong Unexpected Results When Using Between Operator and String Concatenation Status: fixed\nLink: None Found by: Suyang Zhong Segmentation fault when Using Between Operator and integer Status: fixed\nLink: None Found by: Suyang Zhong Unexpected results when Using BETWEEN Operator and Comparison Status: fixed\nLink: None Found by: Suyang Zhong Unexpected results when LEFT JOIN a view Status: fixed\nLink: None Found by: Suyang Zhong Unexpected results when Using UNION ALL for JOIN Status: fixed\nLink: None Found by: Suyang Zhong Unexpected results when Mod negative number with View Status: fixed\nLink: None Found by: Suyang Zhong Segmentation fault when Using NATURAL FULL JOIN Status: fixed\nLink: None Found by: Suyang Zhong Unexpected results when Using IN expression With INDEX Status: fixed\nLink: None Found by: Suyang Zhong Unexpected results when Using BETWEEN With VIEW Status: fixed\nLink: None Found by: Suyang Zhong Unexpected Results when Using NOT IN expression Status: fixed\nLink: None Found by: Suyang Zhong Unexpected Results when Using IS NULL with empty VIEW Status: fixed\nLink: None Found by: Suyang Zhong Unexpected Results when Using CAST Status: fixed\nLink: None Found by: Suyang Zhong Unexpected Results when Using IN and BETWEEN AND for VIEW Status: fixed\nLink: None Found by: Suyang Zhong FATAL ERROR when Using NATURAL FULL JOIN Status: fixed\nLink: None Found by: Suyang Zhong Unexpected Results when Using IN and BETWEEN AND for VIEW Status: fixed\nLink: None Found by: Suyang Zhong Segmentation fault when Using NATURAL FULL JOIN Status: fixed\nLink: None Found by: Suyang Zhong Unexpected Results when Using Multiple Comparison Status: fixed\nLink: None Found by: Suyang Zhong Unexpected Results when Using LEFT JOIN with VIEW on IS NOT NULL Status: fixed\nLink: None Found by: Suyang Zhong Assertion failure when using UNION ALL Status: fixed\nLink: None Found by: Suyang Zhong Unexpected Abort Status: fixed\nLink: None Found by: Suyang Zhong Unexpected results when Using COS and IN expression Status: fixed\nLink: None Found by: Suyang Zhong Assertion failure when using NATURAL JOIN Status: fixed\nLink: None Found by: Suyang Zhong Unexpected results when Casting to VARCHAR Status: fixed\nLink: None Found by: Suyang Zhong Unexpected results when using NATURAL RIGHT JOIN with INDEX Status: fixed\nLink: None Found by: Suyang Zhong ERROR: AddressSanitizer: stack-buffer-overflow Status: fixed\nLink: None Found by: Suyang Zhong Assertion failure when using COT and BETWEEN AND Status: fixed\nLink: None Found by: Suyang Zhong Crash when using BETWEEN operator and large integer Status: fixed\nLink: None Found by: Suyang Zhong ERROR: AddressSanitizer: use-after-poison Status: fixed\nLink: None Found by: Suyang Zhong Assertion failure when using COALESCE and CASE WHEN Status: fixed\nLink: None Found by: Suyang Zhong Crash when using INNER JOIN Status: fixed\nLink: None Found by: Suyang Zhong Unexpected result when using LEFT JOIN and VIEW Status: fixed\nLink: None Found by: Suyang Zhong Unexpected result when using NULLIF and CAST in VIEW Status: fixed\nLink: None Found by: Suyang Zhong Unexpected result when using LEFT JOIN and NULL values Status: fixed\nLink: None Found by: Suyang Zhong Unexpected results when using logical operator in VIEW Status: fixed\nLink: None Found by: Suyang Zhong MonetDB (45 bugs) Unexpected result for INNER JOIN with IS NOT NULL Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7426 Found by: Suyang Zhong Unexpected result when using AND and IS NOT NULL Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7430 Found by: Suyang Zhong Unexpected result when using CASE WHEN Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7429 Found by: Suyang Zhong Unexpected result when using BETWEEN operator Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7428 Found by: Suyang Zhong Unexpected result when using AND/OR chain Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7448 Found by: Suyang Zhong Unexpected result when using BETWEEN in INNER JOIN Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7447 Found by: Suyang Zhong Unexpected result when using BETWEEN and CAST Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7451 Found by: Suyang Zhong Unexpected result when CREATE VIEW with WHERE NULL Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7450 Found by: Suyang Zhong Unexpected result when using BETWEEN with BOOLEAN values Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7455 Found by: Suyang Zhong Crash when INNER JOIN with VIEW Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7456 Found by: Suyang Zhong Unexpected result when using AND with INTEGER Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7457 Found by: Suyang Zhong Unexpected result when using SIGN Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7458 Found by: Suyang Zhong Crash when using CONTAINS in ORDER BY clause Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7459 Found by: Suyang Zhong Crash when using CAST and BETWEEN AND Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7460 Found by: Suyang Zhong Crash by potentially use of bad escape characters Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7461 Found by: Suyang Zhong Unexpected result when using CONTAINS and type casting Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7463 Found by: Suyang Zhong Crash when using BETWEEN AND Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7462 Found by: Suyang Zhong Crash when INNER JOIN with CONTAINS Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7466 Found by: Suyang Zhong Unexpected result when using NULL in BETWEEN Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7465 Found by: Suyang Zhong Unexpected result when using IFNULL with large numbers Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7468 Found by: Suyang Zhong Crash when using CONTAINS Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7469 Found by: Suyang Zhong Unexpected result when using IS DISTINCT FROM Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7521 Found by: Suyang Zhong Assertion failure when using CONTAINS Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7523 Found by: Suyang Zhong Crash when creating view with HAVING Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7522 Found by: Suyang Zhong Unexpected error when using NATURAL RIGHT JOIN Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7524 Found by: Suyang Zhong Unexpected result when using IS DISTINCT FROM with RIGHT JOIN Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7527 Found by: Suyang Zhong Assertion failure when using JAROWINKLER in ORDER BY clause Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7528 Found by: Suyang Zhong Assertion failure when using JAROWINKLER with empty string Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7530 Found by: Suyang Zhong Unexpected result when using IS DISTINCT FROM with AND Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7534 Found by: Suyang Zhong Assertion failure when using GROUP BY when CREATE VIEW Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7535 Found by: Suyang Zhong Crash when using IS DISTINCT FROM with SIN Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7539 Found by: Suyang Zhong Assertion failure when using STARTSWITH Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7540 Found by: Suyang Zhong Unexpected result when using LEVENSHTEIN Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7541 Found by: Suyang Zhong Unexpected result when using IS DISTINCT FROM with constants Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7543 Found by: Suyang Zhong Unexpected result when using STARTSWITH Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7544 Found by: Suyang Zhong Crash when creating view with GROUP BY Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7545 Found by: Suyang Zhong Assertion failure when using INNER JOIN on STARTSWITH Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7553 Found by: Suyang Zhong Unexpected result when using NULL constant in comparison Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7552 Found by: Suyang Zhong Unexpected result when using range comparison with NULL Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7554 Found by: Suyang Zhong Unexpected result when casting integer to boolean in comparison Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7555 Found by: Suyang Zhong Assertion failure when using STARTSWITH with view Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7556 Found by: Suyang Zhong Assertion failure when comparing INTERVAL value Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7562 Found by: Suyang Zhong Unexpected result when using IS DISTINCT FROM in VIEW Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7563 Found by: Suyang Zhong Crash when integer overflow in ORDER BY Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7571 Found by: Suyang Zhong Crash at strcpy_len () Status: fixed\nLink: https://github.com/MonetDB/MonetDB/issues/7573 Found by: Suyang Zhong questdb (39 bugs) Unexpected Internal Error: Index -1 out of bounds for length 16 Status: fixed\nLink: https://github.com/questdb/questdb/issues/3322 Found by: Yuancheng Jiang Unexpected Internal Error: UnsupportedOperationException Status: fixed\nLink: https://github.com/questdb/questdb/issues/3323 Found by: Yuancheng Jiang Unexpected Internal Error: NullPointerException Status: fixed\nLink: https://github.com/questdb/questdb/issues/3324 Found by: Yuancheng Jiang Unexpected NullPointerException with null query Status: fixed\nLink: https://github.com/questdb/questdb/issues/3356 Found by: Yuancheng Jiang Unexpected ClassCastException with null query Status: fixed\nLink: https://github.com/questdb/questdb/issues/3357 Found by: Yuancheng Jiang Consuming input failed: server closed the connection unexpectedly Status: fixed\nLink: https://github.com/questdb/questdb/issues/3376 Found by: Yuancheng Jiang Unexpected UnsupportedOperationException with join query on non-boolean expression Status: fixed\nLink: https://github.com/questdb/questdb/issues/3386 Found by: Yuancheng Jiang Unexpected StringIndexOutOfBoundsException with empty string Status: fixed\nLink: https://github.com/questdb/questdb/issues/3418 Found by: Yuancheng Jiang NullPointerException Cannot invoke '.getAst()' because 'queryColumn' is null with order by clause Status: fixed\nLink: https://github.com/questdb/questdb/issues/3419 Found by: Yuancheng Jiang NullPointerException: Cannot read field 'type' because 'node' is null with constant expression Status: fixed\nLink: https://github.com/questdb/questdb/issues/3420 Found by: Yuancheng Jiang ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 16 Status: fixed\nLink: https://github.com/questdb/questdb/issues/3433 Found by: Yuancheng Jiang NullPointerException Cannot invoke '.isUndefined()' because the return value of '.getQuick(int)' is null Status: fixed\nLink: https://github.com/questdb/questdb/issues/3445 Found by: Yuancheng Jiang ImplicitCastException and stuck when comparing STRING with NULL Status: fixed\nLink: https://github.com/questdb/questdb/issues/3454 Found by: Yuancheng Jiang ClassCastException: NullConstant cannot be cast to class SymbolFunction Status: fixed\nLink: https://github.com/questdb/questdb/issues/3455 Found by: Yuancheng Jiang StringIndexOutOfBoundsException: String index out of range: 0 Status: fixed\nLink: https://github.com/questdb/questdb/issues/3467 Found by: Yuancheng Jiang NullPointerException: Cannot read field 'type' because 'column' is null Status: fixed\nLink: https://github.com/questdb/questdb/issues/3468 Found by: Yuancheng Jiang ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 0 at io.questdb.std.LongList.extendAndSet Status: fixed\nLink: https://github.com/questdb/questdb/issues/3469 Found by: Yuancheng Jiang CairoException when casting string to timestamp Status: fixed\nLink: https://github.com/questdb/questdb/issues/3470 Found by: Yuancheng Jiang java.lang.NullPointerException: Cannot read field 'type' because 'op' is null in rewriteAggregate(SqlOptimiser.java:3300) Status: fixed\nLink: https://github.com/questdb/questdb/issues/3526 Found by: Yuancheng Jiang Unrobust comparison between string and char Status: fixed\nLink: https://github.com/questdb/questdb/issues/3576 Found by: Yuancheng Jiang Inaccurate results with EXCEPT/INTERSECT Status: fixed\nLink: https://github.com/questdb/questdb/issues/3580 Found by: Yuancheng Jiang Incorrect result returned by INTERSECT Status: fixed\nLink: https://github.com/questdb/questdb/issues/3581 Found by: Yuancheng Jiang ClassCastException: GenericRecordMetadata cannot be cast to JoinRecordMetadata in generateJoins() Status: fixed\nLink: https://github.com/questdb/questdb/issues/3590 Found by: Yuancheng Jiang Unexpected Error Invalid Column with multiple JOIN Status: fixed\nLink: https://github.com/questdb/questdb/issues/3595 Found by: Yuancheng Jiang Invalid Column error with multiple JOIN Status: fixed\nLink: https://github.com/questdb/questdb/issues/3619 Found by: Yuancheng Jiang UnsupportedOperationException in IntFunction.getStr(IntFunction.java:145) Status: fixed\nLink: https://github.com/questdb/questdb/issues/3622 Found by: Yuancheng Jiang StringIndexOutOfBoundsException: String index out of range: 0 with ORDER BY empty string Status: fixed\nLink: https://github.com/questdb/questdb/issues/3623 Found by: Yuancheng Jiang Incorrect results returned from UNION Status: fixed\nLink: https://github.com/questdb/questdb/issues/3669 Found by: Yuancheng Jiang Invalid column error with LEFT OUTER JOIN Status: fixed\nLink: https://github.com/questdb/questdb/issues/3670 Found by: Yuancheng Jiang Invalid column error not completely fixed Status: fixed\nLink: https://github.com/questdb/questdb/issues/3733 Found by: Yuancheng Jiang Incorrect results with symbol comparison Status: fixed\nLink: https://github.com/questdb/questdb/issues/3828 Found by: Yuancheng Jiang ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 16 Status: fixed\nLink: https://github.com/questdb/questdb/issues/3833 Found by: Yuancheng Jiang Unexpected invalid column not completely fixed Status: fixed\nLink: https://github.com/questdb/questdb/issues/3933 Found by: Yuancheng Jiang Unexpected DatabaseError: queries have different number of columns in window function with union Status: fixed\nLink: https://github.com/questdb/questdb/issues/3934 Found by: Yuancheng Jiang NullPointerException: Cannot invoke 'io.questdb.cairo.sql.SymbolTable.valueOf(int)' because 'this.symbolTable' is null Status: fixed\nLink: https://github.com/questdb/questdb/issues/3935 Found by: Yuancheng Jiang Incorrect result with window function Status: fixed\nLink: https://github.com/questdb/questdb/issues/3936 Found by: Yuancheng Jiang Unexpected results when having brackets with window query Status: fixed\nLink: https://github.com/questdb/questdb/issues/3938 Found by: Yuancheng Jiang NullPointerException: Cannot read field 'token' because 'first' is null Status: fixed\nLink: https://github.com/questdb/questdb/issues/3949 Found by: Yuancheng Jiang Incorrect results with nested joins Status: fixed\nLink: https://github.com/questdb/questdb/issues/4010 Found by: Yuancheng Jiang cratedb (35 bugs) Couldn't create execution plan from logical plan because of: Index 2 out of bounds for length 2 Status: fixed\nLink: https://github.com/crate/crate/issues/14805 Found by: Yuancheng Jiang Incorrect result returned by UNION Status: fixed\nLink: https://github.com/crate/crate/issues/14807 Found by: Yuancheng Jiang Unexpected Exception with ORDER BY clause with UNION Status: fixed\nLink: https://github.com/crate/crate/issues/14815 Found by: Yuancheng Jiang Unexpected result when using CASE statement Status: fixed\nLink: https://github.com/crate/crate/issues/15029 Found by: Suyang Zhong Unexpected Results when Using AND Operator Status: fixed\nLink: https://github.com/crate/crate/issues/15050 Found by: Suyang Zhong Unexpected Results when Using Concat Operator Status: fixed\nLink: https://github.com/crate/crate/issues/15083 Found by: Suyang Zhong Unexpected Results Using Boolean Status: fixed\nLink: https://github.com/crate/crate/issues/15120 Found by: Suyang Zhong Unexpected Results Using NULLIF Status: fixed\nLink: https://github.com/crate/crate/issues/15121 Found by: Suyang Zhong Unexpected result when using BETWEEN AND Status: fixed\nLink: https://github.com/crate/crate/issues/15201 Found by: Suyang Zhong Unexpected result when Concatenating NULL Status: fixed\nLink: https://github.com/crate/crate/issues/15202 Found by: Suyang Zhong Unexpected Result when using IS NOT NULL Status: fixed\nLink: https://github.com/crate/crate/issues/15265 Found by: Suyang Zhong Unexpected Result when using LEFT JOIN Status: fixed\nLink: https://github.com/crate/crate/issues/15324 Found by: Suyang Zhong Unexpected Results Using NULLIF with VARCHAR Status: fixed\nLink: https://github.com/crate/crate/issues/15325 Found by: Suyang Zhong Unexpected Result when using IN Status: fixed\nLink: https://github.com/crate/crate/issues/15326 Found by: Suyang Zhong Unexpected result when using string comparison AND IS NULL Status: fixed\nLink: https://github.com/crate/crate/issues/15395 Found by: Suyang Zhong Unexpected results when using AND Status: fixed\nLink: https://github.com/crate/crate/issues/15458 Found by: Suyang Zhong Unexpected result when using CONCAT_WS containing NULL Status: fixed\nLink: https://github.com/crate/crate/issues/15459 Found by: Suyang Zhong Unexpected result when using % with NULL Status: fixed\nLink: https://github.com/crate/crate/issues/15500 Found by: Suyang Zhong Unexpected result when using LTRIM with NULL as second argument Status: fixed\nLink: https://github.com/crate/crate/issues/15527 Found by: Suyang Zhong Unexpected result when casting integer as boolean Status: fixed\nLink: https://github.com/crate/crate/issues/15537 Found by: Suyang Zhong Weird string substitution when using JDBC Status: fixed\nLink: https://github.com/crate/crate/issues/15566 Found by: Suyang Zhong Unexpected result when using OR Status: fixed\nLink: https://github.com/crate/crate/issues/15592 Found by: Suyang Zhong Unexpected result when using INNER JOIN and CASE in filter Status: fixed\nLink: https://github.com/crate/crate/issues/15613 Found by: Suyang Zhong Unexpected result when using LIKE Status: fixed\nLink: https://github.com/crate/crate/issues/15743 Found by: Suyang Zhong Unexpected results when using system information functions Status: fixed\nLink: https://github.com/crate/crate/issues/16026 Found by: Suyang Zhong Unexpected result when using CURRENT_SETTING Status: fixed\nLink: https://github.com/crate/crate/issues/16062 Found by: Suyang Zhong Unexpected result when using PG_GET_PARTKEYDEF Status: fixed\nLink: https://github.com/crate/crate/issues/16172 Found by: Suyang Zhong Unexpected result when using DEFAULT during creating table Status: fixed\nLink: https://github.com/crate/crate/issues/16173 Found by: Suyang Zhong Unexpected result when querying with boolean comparisons Status: fixed\nLink: https://github.com/crate/crate/issues/16227 Found by: Suyang Zhong Unexpected result when using FORMAT_TYPE Status: fixed\nLink: https://github.com/crate/crate/issues/16225 Found by: Suyang Zhong Unexpected result when using escape character in LIKE Status: fixed\nLink: https://github.com/crate/crate/issues/16350 Found by: Suyang Zhong Unexpected result when using empty OBJECT literal Status: fixed\nLink: https://github.com/crate/crate/issues/16476 Found by: Suyang Zhong Unexpected results when using OBJECT nulls Status: fixed\nLink: https://github.com/crate/crate/issues/16556 Found by: Suyang Zhong Unexpected results when matching empty string with indexing disabled Status: fixed\nLink: https://github.com/crate/crate/issues/16567 Found by: Suyang Zhong Unexpected result when querying partitioned table with null values Status: confirmed\nLink: https://github.com/crate/crate/issues/16577 Found by: Suyang Zhong Dolt (28 bugs) Unexpected Results when Using '%' operator Status: fixed\nLink: https://github.com/dolthub/dolt/issues/7006 Found by: Suyang Zhong Unexpected Results about Floating-point Type Casting Status: fixed\nLink: https://github.com/dolthub/dolt/issues/7018 Found by: Suyang Zhong Unexpected Results when Querying with NULL values Status: fixed\nLink: https://github.com/dolthub/dolt/issues/7025 Found by: Suyang Zhong Crashing by Division Operators Status: fixed\nLink: https://github.com/dolthub/dolt/issues/7026 Found by: Suyang Zhong Unexpected Results about Decimal-Boolean Casting in Filters Status: fixed\nLink: https://github.com/dolthub/dolt/issues/7038 Found by: Suyang Zhong Crash by Function DAYNAME Status: fixed\nLink: https://github.com/dolthub/dolt/issues/7039 Found by: Suyang Zhong Crash by ACOS Status: fixed\nLink: https://github.com/dolthub/dolt/issues/7046 Found by: Suyang Zhong Crash by Time Functions Status: fixed\nLink: https://github.com/dolthub/dolt/issues/7056 Found by: Suyang Zhong Crash by SQRT Status: fixed\nLink: https://github.com/dolthub/dolt/issues/7060 Found by: Suyang Zhong Unexpected Results when Querying with COT Status: fixed\nLink: https://github.com/dolthub/dolt/issues/7072 Found by: Suyang Zhong Potential Issue Using ROUND Status: fixed\nLink: https://github.com/dolthub/dolt/issues/7073 Found by: Suyang Zhong Unexpected Results when Using IN for Floating-Point Status: fixed\nLink: https://github.com/dolthub/dolt/issues/7120 Found by: Suyang Zhong Unexpected Results of In expressions Status: fixed\nLink: https://github.com/dolthub/dolt/issues/7147 Found by: Suyang Zhong Panic when Using BETWEEN and CASE WHEN Status: fixed\nLink: https://github.com/dolthub/dolt/issues/7154 Found by: Suyang Zhong Unexpected Results when Using IN after Creating Index Status: fixed\nLink: https://github.com/dolthub/dolt/issues/7155 Found by: Suyang Zhong Panic when Using BETWEEN AND Status: fixed\nLink: https://github.com/dolthub/dolt/issues/7216 Found by: Suyang Zhong Unexpected Results when Using ROUND() Status: fixed\nLink: https://github.com/dolthub/dolt/issues/7222 Found by: Suyang Zhong Unexpected Results when Using BETWEEN and LEFT JOIN Status: fixed\nLink: https://github.com/dolthub/dolt/issues/7229 Found by: Suyang Zhong Panic when Using INNER JOIN Status: fixed\nLink: https://github.com/dolthub/dolt/issues/7235 Found by: Suyang Zhong Unexpected Result when Using -'' in IN Status: fixed\nLink: None Found by: Suyang Zhong Unexpected Results when Using BETWEEN AND after CREATE INDEX Status: fixed\nLink: https://github.com/dolthub/dolt/issues/7260 Found by: Suyang Zhong Unexpected Result when Querying with CONCAT Status: fixed\nLink: https://github.com/dolthub/dolt/issues/7261 Found by: Suyang Zhong Panic when Using INNER JOIN with String in IN Status: fixed\nLink: https://github.com/dolthub/dolt/issues/7262 Found by: Suyang Zhong Unexpected results when comparing with empty string Status: fixed\nLink: https://github.com/dolthub/dolt/issues/7323 Found by: Suyang Zhong Unexpected result when using Boolean in IN Status: fixed\nLink: https://github.com/dolthub/dolt/issues/7338 Found by: Suyang Zhong Crash by INNER JOIN Status: fixed\nLink: https://github.com/dolthub/dolt/issues/7371 Found by: Suyang Zhong Unexpected results when comparing string with type conversion Status: confirmed\nLink: https://github.com/dolthub/dolt/issues/7372 Found by: Suyang Zhong Crash by IF and CHAR Status: fixed\nLink: https://github.com/dolthub/dolt/issues/7515 Found by: Suyang Zhong MySQL (27 bugs) Suspicious Estimated Rows Status: unconfirmed\nLink: https://bugs.mysql.com/bug.php?id=108833 Found by: bajinsheng Suspicious Estimated Rows by JOIN Status: unconfirmed\nLink: https://bugs.mysql.com/bug.php?id=108851 Found by: bajinsheng Suspicious Estimated Rows by DISTINCTROW Status: unconfirmed\nLink: https://bugs.mysql.com/bug.php?id=108852 Found by: bajinsheng Unexpected Error: Memory capacity exceeded Status: unconfirmed\nLink: https://bugs.mysql.com/bug.php?id=111471 Found by: bajinsheng Wrong result of `IN` clause Status: confirmed\nLink: https://bugs.mysql.com/bug.php?id=111241 Found by: Chi Zhang Unexpected error when `CHECK` a predicate that is always true Status: confirmed\nLink: https://bugs.mysql.com/bug.php?id=111421 Found by: Chi Zhang Unexpected Results when Using Math Function SIN Status: confirmed\nLink: https://bugs.mysql.com/bug.php?id=113180 Found by: Suyang Zhong Unexpected Results when Using IN for Floating-Point Status: confirmed\nLink: http://bugs.mysql.com/113298 Found by: Suyang Zhong Inconsistent result with index and collapsing symbol Status: confirmed\nLink: https://bugs.mysql.com/bug.php?id=114534 Found by: Ming Wei Tan Functional index seems to malfunction with UNSIGNED column Status: fixed\nLink: https://bugs.mysql.com/bug.php?id=95889 Found by: mrigger The negation of a \"\u0026lt;=\u003e\" comparison malfunctions depending on the column's type Status: fixed\nLink: https://bugs.mysql.com/bug.php?id=95908 Found by: mrigger Row is not fetched when using a function expression that should yield TRUE Status: fixed\nLink: https://bugs.mysql.com/bug.php?id=95926 Found by: mrigger XOR operator returns incorrect result for strings with a floating-point number Status: fixed\nLink: https://bugs.mysql.com/bug.php?id=95927 Found by: mrigger Duplicate entry for key 'PRIMARY' when querying information_schema.TABLES Status: fixed\nLink: https://bugs.mysql.com/bug.php?id=95929 Found by: mrigger CHECK TABLE FOR UPGRADE crashes server (segfault) Status: fixed\nLink: Found by: mrigger BENCHMARK() returns NULL in some cases but is documented to always return 0 Status: fixed\nLink: https://bugs.mysql.com/bug.php?id=95937 Found by: mrigger Function return value with newline yields wrong result when used as a boolean Status: fixed\nLink: https://bugs.mysql.com/bug.php?id=95938 Found by: mrigger TEXT column used as boolean incorrectly evaluates to false Status: fixed\nLink: https://bugs.mysql.com/bug.php?id=95942 Found by: mrigger CAST of negative function return value to UNSIGNED malfunctions with BIGINT Status: fixed\nLink: https://bugs.mysql.com/bug.php?id=95954 Found by: mrigger AND/OR/XOR compute wrong result for small floating-point numbers in TEXT columns Status: fixed\nLink: https://bugs.mysql.com/bug.php?id=95958 Found by: mrigger The logical operators \u0026, |, and ^ do not ignore newlines in TEXT Status: fixed\nLink: https://bugs.mysql.com/bug.php?id=95960 Found by: mrigger Compare that uses UNSIGNED cast and function malfunctions in the MEMORY engine Status: fixed\nLink: https://bugs.mysql.com/bug.php?id=95964 Found by: mrigger Setting sort_buffer_size to a large value causes query to go out of memory Status: fixed\nLink: https://bugs.mysql.com/bug.php?id=95969 Found by: mrigger Unexpected result for IN operator and constants Status: fixed\nLink: https://bugs.mysql.com/bug.php?id=95975 Found by: mrigger Query involving \u0026, \u0026lt;, and AND operators computes incorrect result Status: fixed\nLink: https://bugs.mysql.com/bug.php?id=95983 Found by: mrigger Query with GREATEST function malfunctions Status: fixed\nLink: https://bugs.mysql.com/bug.php?id=96012 Found by: mrigger A predicate that compares 0 with -0 yields an incorrect result Status: fixed\nLink: https://bugs.mysql.com/bug.php?id=99122 Found by: mrigger H2 (18 bugs) Potential issue when using ROUND Status: confirmed\nLink: https://github.com/h2database/h2database/issues/3982 Found by: Suyang Zhong Unexpected result when using trigonomeric functions Status: fixed\nLink: https://github.com/h2database/h2database/issues/3981 Found by: Suyang Zhong Query with an expression \"NOT NOT - C0\" causes a NullPointerException Status: fixed\nLink: https://github.com/h2database/h2database/issues/2804 Found by: mrigger Incorrect result for query and NOT (c0 != -1 AND c0) predicate Status: fixed\nLink: https://github.com/h2database/h2database/issues/2803 Found by: mrigger Query with CASE operator unexpectedly results in \"Column must be in the GROUP BY list\" error Status: fixed\nLink: https://github.com/h2database/h2database/issues/2813 Found by: mrigger Query on view that uses the BETWEEN operator results in an unexpected syntax error Status: fixed\nLink: https://github.com/h2database/h2database/issues/2816 Found by: mrigger Query with % operator results in a ClassCastException Status: fixed\nLink: https://github.com/h2database/h2database/issues/2825 Found by: mrigger Table with a generated column cycle results in a NullPointerException Status: fixed\nLink: https://github.com/h2database/h2database/issues/2826 Found by: mrigger Query on view with BINARY column results in an unexpected syntax error Status: fixed\nLink: https://github.com/h2database/h2database/issues/2828 Found by: mrigger Restore YEAR data type for MySQL compatibility mode Status: fixed\nLink: https://github.com/h2database/h2database/issues/2831 Found by: mrigger Calling math functions with a string argument results in a NullPointerException Status: fixed\nLink: https://github.com/h2database/h2database/issues/2835 Found by: mrigger MERGE INTO causes an unexpected syntax error Status: fixed\nLink: https://github.com/h2database/h2database/issues/2833 Found by: mrigger ROUND() function runs very long Status: fixed\nLink: https://github.com/h2database/h2database/issues/2837 Found by: mrigger INSERT() with NULL arguments for the original string and string to be added results in NPE Status: fixed\nLink: https://github.com/h2database/h2database/issues/2838 Found by: mrigger Querying a view that uses the POSITION() function results in an unexpected syntax error Status: fixed\nLink: https://github.com/h2database/h2database/issues/2839 Found by: mrigger Call to STRINGDECODE results in StringIndexOutOfBoundsException Status: fixed\nLink: https://github.com/h2database/h2database/issues/2841 Found by: mrigger Querying view that uses LTRIM/RTRIM results in a syntax error Status: fixed\nLink: https://github.com/h2database/h2database/issues/2842 Found by: mrigger CREATE TABLE with a BINARY column and large size specification results in a NegativeArraySizeException Status: fixed\nLink: https://github.com/h2database/h2database/issues/2832 Found by: mrigger PostgreSQL (11 bugs) GROUP BY and inheritance issue Status: fixed\nLink: https://www.postgresql.org/message-id/CA%2Bu7OA7VLKf_vEr6kLF3MnWSA9LToJYncgpNX2tQ-oWzYCBQAw%40mail.gmail.com Found by: mrigger DISCARD TEMP results in \"ERROR: cache lookup failed for type 0\" Status: fixed\nLink: https://www.postgresql.org/message-id/CA%2Bu7OA4JKCPFrdrAbOs7XBiCyD61XJxeNav4LefkSmBLQ-Vobg%40mail.gmail.com Found by: mrigger ERROR: found unexpected null value in index Status: fixed\nLink: https://www.postgresql.org/message-id/CA%2Bu7OA7W4NWEhCvftdV6_8bbm2vgypi5nuxfnSEJQqVKFSUoMg%40mail.gmail.com Found by: mrigger ERROR: negative bitmapset member not allowed in SELECT Status: fixed\nLink: https://www.postgresql.org/message-id/CA%2Bu7OA7fmtm3kR%2BY6Mgr9djU3WeOsMzQLWtNPMvoEVSm%3Dr9XaQ%40mail.gmail.com Found by: mrigger REINDEX CONCURRENTLY causes ALTER TABLE to fail Status: fixed\nLink: https://www.postgresql.org/message-id/CA%2Bu7OA5Hp0ra235F3czPom_FyAd-3%2BXwSJmX95r1%2BsRPOJc9VQ%40mail.gmail.com Found by: mrigger INSERT INTO causes segfault on trunk Status: fixed\nLink: Found by: mrigger Unexpected \"cache lookup failed for collation 0\" failure Status: fixed\nLink: https://www.postgresql.org/message-id/flat/CA%2Bu7OA4HOjtymxAbuGNh4-X_2R0Lw5n01tzvP8E5-i-2gQXYWA%40mail.gmail.com Found by: mrigger Failed assertion clauses != NIL Status: fixed\nLink: https://www.postgresql.org/message-id/flat/CA%2Bu7OA7H5rcE2%3D8f263w4NZD6ipO_XOrYB816nuLXbmSTH9pQQ%40mail.gmail.com Found by: mrigger No = operator for opfamily 426 Status: fixed\nLink: https://www.postgresql.org/message-id/flat/CA%2Bu7OA7nnGYy8rY0vdTe811NuA%2BFrr9nbcBO9u2Z%2BJxqNaud%2Bg%40mail.gmail.com Found by: mrigger Fetching from information_schema.tables results in segfault Status: fixed\nLink: Found by: mrigger Segfault when creating constant bit_length() index on TEMP table Status: fixed\nLink: Found by: mrigger neo4j (11 bugs) A potential performance bug (missing optimization) Status: confirmed\nLink: https://github.com/neo4j/neo4j/issues/12957 Found by: Yuancheng Jiang Unexpected DatabaseException: Exception closing multiple resources Status: fixed\nLink: https://github.com/neo4j/neo4j/issues/12968 Found by: Yuancheng Jiang One equivalent query can help improve performance hundred of times Status: fixed\nLink: https://github.com/neo4j/neo4j/issues/12973 Found by: Yuancheng Jiang Using OPTIONAL and DISTINCT together with shortestPath() outputs an error Status: fixed\nLink: https://github.com/neo4j/neo4j/issues/12988 Found by: Yuancheng Jiang Inconsistent results Status: fixed\nLink: https://github.com/neo4j/neo4j/issues/12991 Found by: Yuancheng Jiang Unexpected Result with SKIP 1 Status: fixed\nLink: https://github.com/neo4j/neo4j/issues/12996 Found by: Yuancheng Jiang Some queries are running unexpectedly slow Status: confirmed\nLink: https://github.com/neo4j/neo4j/issues/13003 Found by: Yuancheng Jiang Adding index incurs performance regression in some cases Status: confirmed\nLink: https://github.com/neo4j/neo4j/issues/13010 Found by: Yuancheng Jiang OPTIONAL MATCH is much faster than MATCH in some cases Status: confirmed\nLink: https://github.com/neo4j/neo4j/issues/13033 Found by: Yuancheng Jiang Inconsistent performance Status: fixed\nLink: https://github.com/neo4j/neo4j/issues/13034 Found by: Yuancheng Jiang Unexpected error: out of bounds for object Status: fixed\nLink: https://github.com/neo4j/neo4j/issues/13041 Found by: Yuancheng Jiang Firebird (10 bugs) Potential bug in BETWEEN Operator Status: fixed\nLink: https://github.com/FirebirdSQL/firebird/issues/7839 Found by: Manuel Rigger Crash potentially caused by BETWEEN Operator Status: fixed\nLink: https://github.com/FirebirdSQL/firebird/issues/7860 Found by: Suyang Zhong Unexpected Results when Using Natural Right Join Status: fixed\nLink: https://github.com/FirebirdSQL/firebird/issues/7879 Found by: Suyang Zhong Unexpected Results when Using CASE-WHEN with LEFT JOIN Status: fixed\nLink: https://github.com/FirebirdSQL/firebird/issues/7903 Found by: Suyang Zhong Unexpected results when the join condition contains the OR predicate Status: fixed\nLink: https://github.com/FirebirdSQL/firebird/issues/7908 Found by: Suyang Zhong Unexpected results when using CASE WHEN with RIGHT JOIN Status: fixed\nLink: https://github.com/FirebirdSQL/firebird/issues/7993 Found by: Suyang Zhong Unexpected results after creating partial index Status: fixed\nLink: https://github.com/FirebirdSQL/firebird/issues/7995 Found by: Suyang Zhong Unexpected results when using string concatenation for INTEGER Status: fixed\nLink: https://github.com/FirebirdSQL/firebird/issues/7997 Found by: Suyang Zhong Unexpected error and crash after creating a partial index Status: fixed\nLink: https://github.com/FirebirdSQL/firebird/issues/7998 Found by: Suyang Zhong Unexpected results when using LIKE with boolean values Status: confirmed\nLink: https://github.com/FirebirdSQL/firebird/issues/8132 Found by: Suyang Zhong Virtuoso (10 bugs) Unexpected results when Using Trigonometric functions Status: fixed\nLink: https://github.com/openlink/virtuoso-opensource/issues/1213 Found by: Suyang Zhong Unexpected results when Using RIGHT JOIN Status: fixed\nLink: https://github.com/openlink/virtuoso-opensource/issues/1214 Found by: Suyang Zhong Unexpected results when using trigonometric functions Status: fixed\nLink: https://github.com/openlink/virtuoso-opensource/issues/1213 Found by: Suyang Zhong Unexpected Results when using LEFT JOIN with NULL Status: fixed\nLink: https://github.com/openlink/virtuoso-opensource/issues/1236 Found by: Suyang Zhong Unexpected results when using LEFT JOIN with NULL as predicate Status: fixed\nLink: https://github.com/openlink/virtuoso-opensource/issues/1238 Found by: Suyang Zhong Crash by CASE WHEN and unknown identifier Status: fixed\nLink: https://github.com/openlink/virtuoso-opensource/issues/1239 Found by: Suyang Zhong Unexpected results when using ORDER BY Status: fixed\nLink: https://github.com/openlink/virtuoso-opensource/issues/1241 Found by: Suyang Zhong Crash by CASE WHEN Status: fixed\nLink: https://github.com/openlink/virtuoso-opensource/issues/1249 Found by: Suyang Zhong Unexpected results when using LEFT JOIN and UNION Status: fixed\nLink: https://github.com/openlink/virtuoso-opensource/issues/1250 Found by: Suyang Zhong Unexpected results when using INNER JOIN and UNION Status: fixed\nLink: https://github.com/openlink/virtuoso-opensource/issues/1251 Found by: Suyang Zhong risingwave (7 bugs) Panicked when processing: assertion failed: (left == right) Status: fixed\nLink: https://github.com/risingwavelabs/risingwave/issues/12818 Found by: Yuancheng Jiang Incorrect result with ORDER BY in OVER(PARTITION BY ...) Status: confirmed\nLink: https://github.com/risingwavelabs/risingwave/issues/12822 Found by: Yuancheng Jiang InternalError_: Panicked when processing: internal error: entered unreachable code: Subquery Subquery Status: fixed\nLink: https://github.com/risingwavelabs/risingwave/issues/12847 Found by: Yuancheng Jiang Unexpected Results when Inserting NULL to PK column Status: fixed\nLink: https://github.com/risingwavelabs/risingwave/issues/13497 Found by: Suyang Zhong Unexpected Results when Using NATURAL LEFT JOIN Status: fixed\nLink: https://github.com/risingwavelabs/risingwave/issues/13572 Found by: Suyang Zhong Unexpected Results when Comparing with Bigint Status: fixed\nLink: https://github.com/risingwavelabs/risingwave/issues/13601 Found by: Suyang Zhong Panicked: byte index 1024 is not a char boundary Status: fixed\nLink: https://github.com/risingwavelabs/risingwave/issues/14283 Found by: Suyang Zhong Doris (5 bugs) SELECT DISTINCT returns duplicate column with aggregate key Status: fixed\nLink: https://github.com/apache/doris/issues/36072 Found by: Ming Wei Tan Wrong result with TINYINT column Status: open\nLink: https://github.com/apache/doris/issues/36351 Found by: Ming Wei Tan SELECT DISTINCT returns wrong value for UNIQUE model Status: open\nLink: https://github.com/apache/doris/issues/36343 Found by: Ming Wei Tan `WHERE / HAVING TIMESTAMP 'CURRENT TIMESTAMP' IS NULL` retrieves unwante rows Status: open\nLink: https://github.com/apache/doris/issues/36342 Found by: Ming Wei Tan NULL expression from function ot recorgnised with BETWEEN of floats Status: open\nLink: https://github.com/apache/doris/issues/36070 Found by: Ming Wei Tan redisgraph (4 bugs) Unexpected results Status: confirmed\nLink: https://github.com/RedisGraph/RedisGraph/issues/2744 Found by: Yuancheng Jiang Buggy result Status: confirmed\nLink: https://github.com/RedisGraph/RedisGraph/issues/2858 Found by: Yuancheng Jiang Inconsistent results Status: confirmed\nLink: https://github.com/RedisGraph/RedisGraph/issues/2859 Found by: Yuancheng Jiang Inconsistent results when querying a symmetric path Status: confirmed\nLink: https://github.com/RedisGraph/RedisGraph/issues/2865 Found by: Yuancheng Jiang tdengine (4 bugs) Segmentation fault with certain queries Status: fixed\nLink: https://github.com/taosdata/TDengine/issues/21323 Found by: Yuancheng Jiang Unexpected generic error with LIKE query Status: open\nLink: https://github.com/taosdata/TDengine/issues/21368 Found by: Yuancheng Jiang Unexpected Syntax Error with Null Status: open\nLink: https://github.com/taosdata/TDengine/issues/21520 Found by: Yuancheng Jiang Segmentation fault when having IS NULL in JOIN condition Status: confirmed\nLink: https://github.com/taosdata/TDengine/issues/22857 Found by: Yuancheng Jiang Databend (3 bugs) `FALSE AND exp1 OR exp1` in WHERE clause results in Lost connection from server Status: fixed\nLink: https://github.com/databendlabs/databend/issues/15569 Found by: Ming Wei Tan WHERE clause not working as expected with NOT Status: fixed\nLink: https://github.com/databendlabs/databend/issues/15572 Found by: Ming Wei Tan Mismatch between SUM and AVERAGE due to optimisation Status: fixed\nLink: https://github.com/databendlabs/databend/issues/15867 Found by: Ming Wei Tan agensgraph (3 bugs) Query gives inconsistent result Status: fixed\nLink: https://github.com/bitnine-oss/agensgraph/issues/595 Found by: Yuancheng Jiang Seems to be an unexpected error Status: fixed\nLink: https://github.com/bitnine-oss/agensgraph/issues/609 Found by: Yuancheng Jiang Inconsistent results when executing equivalent queries Status: fixed\nLink: https://github.com/bitnine-oss/agensgraph/issues/617 Found by: Yuancheng Jiang MariaDB (2 bugs) Internal error from OPTIMIZE TABLE t0 NOWAIT Status: confirmed\nLink: https://jira.mariadb.org/browse/MDEV-33893 Found by: Ming Wei Tan UNIQUE constraint causes a query with string comparison to omit a row in the result set Status: fixed\nLink: https://jira.mariadb.org/browse/MDEV-21065 Found by: mrigger Percona (2 bugs) Unexpected result related to CREATE INDEX and RADIANS Status: confirmed\nLink: https://perconadev.atlassian.net/browse/PS-9049 Found by: Albert Zhang Unexpected results when using ASIN function with NULLIF Status: confirmed\nLink: https://perconadev.atlassian.net/jira/software/c/projects/PS/issues/PS-9085 Found by: Albert Zhang QuestDB (2 bugs) NULL record not retrieved if NULL is in WHERE clause Status: confirmed\nLink: https://github.com/questdb/questdb/issues/4965 Found by: Ming Wei Tan Internal error thrown in select query Status: fixed\nLink: https://github.com/questdb/questdb/issues/4981 Found by: Ming Wei Tan CUBRID (1 bugs) ORDER BY causes row to be omitted with index and case expression Status: fixed\nLink: http://jira.cubrid.org/browse/CBRD-25067 Found by: Manuel Rigger ClickHouse (1 bugs) Unexpected result when comparing IN expression and integer Status: confirmed\nLink: https://github.com/ClickHouse/ClickHouse/issues/65316 Found by: Suyang Zhong Presto (1 bugs) Query failed with error `failed: at index 1` Status: fixed\nLink: https://github.com/prestodb/presto/issues/23613 Found by: Ming Wei Tan TDEngine (1 bugs) DROP DATABASE seems to leave behind a table when using the \"tables\" configuration option Status: fixed\nLink: https://github.com/taosdata/TDengine/issues/586 Found by: mrigger Compilers and Interpreters (60 bugs) php-src (60 bugs) Out of int range in Zend/zend_strtod.c Status: open\nLink: https://github.com/php/php-src/issues/15712 Found by: YuanchengJiang Segmentation fault in Zend/zend_execute_API.c Status: open\nLink: https://github.com/php/php-src/issues/15672 Found by: YuanchengJiang Polymorphic cache slot issue in DOM Status: confirmed\nLink: https://github.com/php/php-src/issues/15670 Found by: YuanchengJiang Access null pointer in Zend/Optimizer/zend_inference.c Status: confirmed\nLink: https://github.com/php/php-src/issues/15661 Found by: YuanchengJiang Segmentation fault in Zend/zend_vm_execute.h Status: confirmed\nLink: https://github.com/php/php-src/issues/15658 Found by: YuanchengJiang Segmentation fault in ext/opcache/jit/ir/dynasm/dasm_x86.h Status: open\nLink: https://github.com/php/php-src/issues/15657 Found by: YuanchengJiang Signed integer overflow in ext/dom/nodelist.c Status: confirmed\nLink: https://github.com/php/php-src/issues/15654 Found by: YuanchengJiang Signed integer overflow in ext/standard/file.c Status: confirmed\nLink: https://github.com/php/php-src/issues/15653 Found by: YuanchengJiang Segmentation fault in the Zend engine (JIT enabled) Status: confirmed\nLink: https://github.com/php/php-src/issues/15652 Found by: YuanchengJiang Signed integer overflow in ext/standard/pack.c Status: open\nLink: https://github.com/php/php-src/issues/15613 Found by: YuanchengJiang Segmentation fault (access null pointer) in ext/date/lib/parse_tz.c Status: open\nLink: https://github.com/php/php-src/issues/15582 Found by: YuanchengJiang Segmentation fault (access null pointer) in ext/dom/html5_serializer.c Status: confirmed\nLink: https://github.com/php/php-src/issues/15570 Found by: YuanchengJiang Signed integer overflow in ext/standard/scanf.c Status: confirmed\nLink: https://github.com/php/php-src/issues/15552 Found by: YuanchengJiang Segmentation fault (access null pointer) in ext/dom/xml_common.h Status: confirmed\nLink: https://github.com/php/php-src/issues/15551 Found by: YuanchengJiang Segmentation fault (access null pointer) in Zend/zend_stack.c Status: open\nLink: https://github.com/php/php-src/issues/15496 Found by: YuanchengJiang Member access within misaligned address in ext/opcache/jit/zend_jit.c Status: confirmed\nLink: https://github.com/php/php-src/issues/15490 Found by: YuanchengJiang Member access within misaligned address in ext/opcache/jit/zend_jit_vm_helpers.c Status: confirmed\nLink: https://github.com/php/php-src/issues/15481 Found by: YuanchengJiang Segmentation fault (null pointer) in Zend/zend_builtin_functions.c Status: confirmed\nLink: https://github.com/php/php-src/issues/15456 Found by: YuanchengJiang heap buffer overflow in phpdbg (zend_hash_num_elements() Zend/zend_hash.h) Status: confirmed\nLink: https://github.com/php/php-src/issues/15268 Found by: YuanchengJiang Heap use-after-free in phpdbg (zend_hash.c:57 in _zend_is_inconsistent) Status: confirmed\nLink: https://github.com/php/php-src/issues/15210 Found by: YuanchengJiang Segmentation fault in phpdbg (phpdbg_bp.c:132) Status: open\nLink: https://github.com/php/php-src/issues/15208 Found by: YuanchengJiang Segmentation fault in dom extension (html5_serializer) Status: confirmed\nLink: https://github.com/php/php-src/issues/15192 Found by: YuanchengJiang Segmentation fault (access illegal address) in zend allocator Status: confirmed\nLink: https://github.com/php/php-src/issues/15187 Found by: YuanchengJiang Disabled output handler is flushed again Status: confirmed\nLink: https://github.com/php/php-src/issues/15181 Found by: YuanchengJiang Segmentation fault (null pointer dereference) in ext/standard/url_scanner_ex.re Status: confirmed\nLink: https://github.com/php/php-src/issues/15179 Found by: YuanchengJiang stack overflow when var serialization in ext/standard/var Status: open\nLink: https://github.com/php/php-src/issues/15169 Found by: YuanchengJiang stack overflow in json_encode() Status: open\nLink: https://github.com/php/php-src/issues/15168 Found by: YuanchengJiang Unexpected null pointer in Zend/zend_smart_str.h Status: confirmed\nLink: https://github.com/php/php-src/issues/15137 Found by: YuanchengJiang Unexpected null pointer in Zend/zend_string.h Status: confirmed\nLink: https://github.com/php/php-src/issues/14808 Found by: YuanchengJiang Signed integer overflow in ext/standard/levenshtein.c Status: open\nLink: https://github.com/php/php-src/issues/14807 Found by: YuanchengJiang Signed integer overflow in ext/standard/array.c Status: confirmed\nLink: https://github.com/php/php-src/issues/14775 Found by: YuanchengJiang Segmentation fault in Zend/zend_types.h Status: confirmed\nLink: https://github.com/php/php-src/issues/14741 Found by: YuanchengJiang Segmentation fault (jump to 0x0) in Zend/zend_vm_execute.h Status: confirmed\nLink: https://github.com/php/php-src/issues/14712 Found by: YuanchengJiang Signed integer overflow in ext/date/php_date.c Status: open\nLink: https://github.com/php/php-src/issues/14709 Found by: YuanchengJiang Segmentation fault (access null pointer) in ext/libxml/libxml.c Status: confirmed\nLink: https://github.com/php/php-src/issues/14698 Found by: YuanchengJiang Segmentation fault (access null pointer) in ext/spl/spl_directory.c Status: open\nLink: https://github.com/php/php-src/issues/14687 Found by: YuanchengJiang Segmentation fault in ext/dom/php_dom.c Status: confirmed\nLink: https://github.com/php/php-src/issues/14652 Found by: YuanchengJiang Member access within null pointer in ext/standard/basic_functions.c Status: confirmed\nLink: https://github.com/php/php-src/issues/14643 Found by: YuanchengJiang Member access within null pointer in ext/spl/spl_observer.c Status: confirmed\nLink: https://github.com/php/php-src/issues/14639 Found by: YuanchengJiang Memory access within the null pointer with simplexml extension Status: confirmed\nLink: https://github.com/php/php-src/issues/14638 Found by: YuanchengJiang Memory leak in xml extension with zend allocator Status: confirmed\nLink: https://github.com/php/php-src/issues/14637 Found by: YuanchengJiang Unexpected null pointer at Zend/zend_string.h:200:24 Status: confirmed\nLink: https://github.com/php/php-src/issues/14603 Found by: YuanchengJiang Deep recursion in zend_cfg.c causes segfault instead of error Status: confirmed\nLink: https://github.com/php/php-src/issues/14361 Found by: YuanchengJiang Memory leak in xml and dom Status: confirmed\nLink: https://github.com/php/php-src/issues/14343 Found by: YuanchengJiang Member access within null pointer in extension spl Status: confirmed\nLink: https://github.com/php/php-src/issues/14290 Found by: YuanchengJiang Segmentation fault on unknown address 0x0001ffff8041 with XML extension under certain memory limit Status: confirmed\nLink: https://github.com/php/php-src/issues/14124 Found by: YuanchengJiang Segmentation fault on unknown address 0x600000000018 in ext/opcache/jit/zend_jit.c Status: open\nLink: https://github.com/php/php-src/issues/14082 Found by: YuanchengJiang Signed Integer Overflow in ext/date/lib/parse_posix.c Status: open\nLink: https://github.com/php/php-src/issues/14075 Found by: YuanchengJiang Memory leak in xml extension Status: open\nLink: https://github.com/php/php-src/issues/14044 Found by: YuanchengJiang Applying zero offset to null pointer in Zend/zend_opcode.c Status: confirmed\nLink: https://github.com/php/php-src/issues/13931 Found by: YuanchengJiang Stack buffer underflow when executing copy() Status: confirmed\nLink: https://github.com/php/php-src/issues/13903 Found by: YuanchengJiang Member access within null pointer of type 'ps_files' in ext/session/mod_files.c Status: confirmed\nLink: https://github.com/php/php-src/issues/13856 Found by: YuanchengJiang Renaming a file in a Phar to an already existing filename causes a NULL pointer dereference Status: confirmed\nLink: https://github.com/php/php-src/issues/13836 Found by: YuanchengJiang Applying non-zero offset 36 to null pointer in zend_jit.c Status: confirmed\nLink: https://github.com/php/php-src/issues/13834 Found by: YuanchengJiang Applying zero offset to null pointer in zend_hash.c Status: confirmed\nLink: https://github.com/php/php-src/issues/13833 Found by: YuanchengJiang Null pointer access of type 'zval' in phpdbg_frame Status: confirmed\nLink: https://github.com/php/php-src/issues/13827 Found by: YuanchengJiang Segfault caused by a derefernce of a high value address Status: confirmed\nLink: https://github.com/php/php-src/issues/13695 Found by: YuanchengJiang Unexpected null pointer in zend_string.h Status: confirmed\nLink: https://github.com/php/php-src/issues/13685 Found by: YuanchengJiang phpdbg_watch null pointer access Status: confirmed\nLink: https://github.com/php/php-src/issues/13681 Found by: YuanchengJiang Segfault from ASan: SEGV on unknown address 0x7ffd00000042 Status: confirmed\nLink: https://github.com/php/php-src/issues/13680 Found by: YuanchengJiang Datalog Engines (30 bugs) Soufflé (23 bugs) Negative zero causes different results for interpreter mode and compiler mode Status: confirmed\nLink: https://github.com/souffle-lang/souffle/issues/2311 Found by: Chi Zhang A problem about ungrounded variable Status: unconfirmed\nLink: https://github.com/souffle-lang/souffle/issues/2318 Found by: Chi Zhang Souffle crashed on aggregates Status: confirmed\nLink: https://github.com/souffle-lang/souffle/issues/2320 Found by: Chi Zhang Assertion failure \"relation not found\" on provenance Status: confirmed\nLink: https://github.com/souffle-lang/souffle/issues/2321 Found by: Chi Zhang A problem about subsumption Status: confirmed\nLink: https://github.com/souffle-lang/souffle/issues/2322 Found by: Chi Zhang A problem that the result of subsumption is correct, but the final result is wrong Status: unconfirmed\nLink: https://github.com/souffle-lang/souffle/issues/2323 Found by: Chi Zhang The subsumption causes the execution of program been killed Status: confirmed\nLink: https://github.com/souffle-lang/souffle/issues/2324 Found by: Chi Zhang \"inline\" causes assertion failure \"functor type not set\" Status: confirmed\nLink: https://github.com/souffle-lang/souffle/issues/2326 Found by: Chi Zhang Wrong result caused by \"eqrel\" Status: unconfirmed\nLink: https://github.com/souffle-lang/souffle/issues/2327 Found by: Chi Zhang Wrong result with `inline` and `no_magic` Status: unconfirmed\nLink: https://github.com/souffle-lang/souffle/issues/2337 Found by: Chi Zhang `inline` cause `Ungrounded variable` not assertion failure Status: unconfirmed\nLink: https://github.com/souffle-lang/souffle/issues/2338 Found by: Chi Zhang `inline` cause `Floating-point arithmetic exception` without divide-by-zero Status: unconfirmed\nLink: https://github.com/souffle-lang/souffle/issues/2339 Found by: Chi Zhang `inline` and `magic` used together cause `Segmentation violation` Status: confirmed\nLink: https://github.com/souffle-lang/souffle/issues/2340 Found by: Chi Zhang different result under interpreter and compiler mode Status: unconfirmed\nLink: https://github.com/souffle-lang/souffle/issues/2343 Found by: Chi Zhang Assertion failure on auto-tuning Status: fixed\nLink: https://github.com/souffle-lang/souffle/issues/2346 Found by: Chi Zhang Insufficient grammar check for query plan Status: fixed\nLink: https://github.com/souffle-lang/souffle/issues/2351 Found by: Chi Zhang `inline` causes assertion failure `numeric constant type not set` Status: confirmed\nLink: https://github.com/souffle-lang/souffle/issues/2355 Found by: Chi Zhang `inline` in recursive query trigger an error with query plan Status: unconfirmed\nLink: https://github.com/souffle-lang/souffle/issues/2369 Found by: Chi Zhang `magic` causes different result Status: unconfirmed\nLink: https://github.com/souffle-lang/souffle/issues/2375 Found by: Chi Zhang Insufficient checking on unground variable Status: unconfirmed\nLink: https://github.com/souffle-lang/souffle/issues/2379 Found by: Chi Zhang A problem about subsumption. Status: unconfirmed\nLink: https://github.com/souffle-lang/souffle/issues/2382 Found by: Chi Zhang `eqrel` doesn't work well with provenance Status: unconfirmed\nLink: https://github.com/souffle-lang/souffle/issues/2385 Found by: Chi Zhang Assertion failure on `Auto-Scheduling` Status: confirmed\nLink: https://github.com/souffle-lang/souffle/issues/2426 Found by: Chi Zhang CozoDB (5 bugs) Unexpected error in query parser Status: fixed\nLink: https://github.com/cozodb/cozo/issues/97 Found by: Chi Zhang System panic on modulo by zero Status: fixed\nLink: https://github.com/cozodb/cozo/issues/99 Found by: Chi Zhang Inconsistent results of two equivalent programs Status: fixed\nLink: https://github.com/cozodb/cozo/issues/101 Found by: Chi Zhang unexpected error of function `trim_start` Status: confirmed\nLink: https://github.com/cozodb/cozo/issues/113 Found by: Chi Zhang Unexpected result of `ge` on `-0.0` and `0.0` under magic rewrite Status: confirmed\nLink: https://github.com/cozodb/cozo/issues/122 Found by: Chi Zhang μZ (2 bugs) Wrong result of z3 datalog Status: fixed\nLink: https://github.com/Z3Prover/z3/issues/6446 Found by: Chi Zhang Wrong result of z3 datalog with predict Status: confirmed\nLink: https://github.com/Z3Prover/z3/issues/6447 Found by: Chi Zhang XML Processors (26 bugs) BaseX (16 bugs) Error in arithemetic calculation result comparison Status: fixed\nLink: https://github.com/BaseXdb/basex/issues/2188 Found by: ShuxinLi Unexpected exception of division by zero Status: fixed\nLink: https://github.com/BaseXdb/basex/issues/2189 Found by: ShuxinLi Bug of operation on non-existing attribute Status: fixed\nLink: https://github.com/BaseXdb/basex/issues/2190 Found by: ShuxinLi Bug on node selection with last() Status: fixed\nLink: https://github.com/BaseXdb/basex/issues/2191 Found by: ShuxinLi Bug on child node selection with count() Status: fixed\nLink: https://github.com/BaseXdb/basex/issues/2193 Found by: ShuxinLi Bug on node selection with self axis Status: fixed\nLink: https://github.com/BaseXdb/basex/issues/2194 Found by: ShuxinLi Internal crash on has-children() result comparison Status: fixed\nLink: https://github.com/BaseXdb/basex/issues/2213 Found by: ShuxinLi Incorrect result for count after subsequence Status: fixed\nLink: https://github.com/BaseXdb/basex/issues/2214 Found by: ShuxinLi Unexpected exception of mapping double attributes Status: fixed\nLink: https://github.com/BaseXdb/basex/issues/2215 Found by: ShuxinLi Bug on map operation of empty sequence Status: fixed\nLink: https://github.com/BaseXdb/basex/issues/2216 Found by: ShuxinLi Bug on consecutive map with distinct-values Status: fixed\nLink: https://github.com/BaseXdb/basex/issues/2217 Found by: ShuxinLi Bug on node selection with position() Status: fixed\nLink: https://github.com/BaseXdb/basex/issues/2219 Found by: ShuxinLi Bug on arithemetic operations with last() and position() Status: fixed\nLink: https://github.com/BaseXdb/basex/issues/2220 Found by: ShuxinLi Bug on contains-token() with token index Status: fixed\nLink: https://github.com/BaseXdb/basex/issues/2222 Found by: ShuxinLi Unexpected exception of arithemetic operations with positional expression Status: fixed\nLink: https://github.com/BaseXdb/basex/issues/2224 Found by: ShuxinLi Incorrect result count with multiple sequence operators Status: fixed\nLink: https://github.com/BaseXdb/basex/issues/2225 Found by: ShuxinLi eXist-db (6 bugs) XQuery query with index after predicate selection Status: confirmed\nLink: https://github.com/eXist-db/exist/issues/4968 Found by: ShuxinLi XQuery fails to select node with true predicate Status: confirmed\nLink: https://github.com/eXist-db/exist/issues/4958 Found by: ShuxinLi XQuery bug of node selection of tail() after subsequence() Status: fixed\nLink: https://github.com/eXist-db/exist/issues/4830 Found by: ShuxinLi XQuery bug on selecting nodes with last() Status: confirmed\nLink: https://github.com/eXist-db/exist/issues/4824 Found by: ShuxinLi XQuery simple node selection return duplicate nodes Status: confirmed\nLink: https://github.com/eXist-db/exist/issues/4811 Found by: ShuxinLi XQuery return wrong results on start-with comparison Status: confirmed\nLink: https://github.com/eXist-db/exist/issues/4810 Found by: ShuxinLi Saxonica (4 bugs) Bug on exist() with non-existing attribute Status: fixed\nLink: https://saxonica.plan.io/issues/6051 Found by: ShuxinLi NullPointerException with upper-case function Status: fixed\nLink: https://saxonica.plan.io/issues/6067 Found by: ShuxinLi Bug on predicate with last() Status: fixed\nLink: https://saxonica.plan.io/issues/6093 Found by: ShuxinLi Bug on '-' castable to xs:duration Status: fixed\nLink: https://saxonica.plan.io/issues/6059 Found by: ShuxinLi ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"2a88633f88eb64900a842ab68da75d43","permalink":"https://nus-test.github.io/bugs/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/bugs/","section":"","summary":"Overview Database Management Systems: 801 bugs Compilers and Interpreters: 60 bugs Datalog Engines: 30 bugs XML Processors: 26 bugs Database Management Systems (801 bugs) SQLite (217 bugs) An Inconsistent Result Depending on Parenthesization Status: fixed","tags":null,"title":"","type":"page"},{"authors":null,"categories":null,"content":"I am looking for PhD students, postdocs, interns, and visitors whose vision aligns with ours to join our lab. In general, we aim to both have a practical impact by creating relevant and usable tools as well as by designing principled and fundamental approaches.\nThe group\u0026rsquo;s core areas are software engineering, computer systems, and programming languages. A current key focus is reliability aspects of data-centric systems.\nMore generally, topics of interest include, but are not limited to:\nsoftware reliability using techniques such as automated testing and program analysis; creating and improving essential systems such as data processing systems, compilers, and programming language environments; and programming languages, in particular, their efficient implementation. You can also consult my Google Scholar page for an up-to-date view of our research activities.\nAn ideal candidate has some of the following qualities:\nStrong implementation skills and a desire to create open-source tools The ability to come up with ideas and develop new approaches Not being afraid to tackle challenging, important problems The resilience to deal with fallbacks (which are quite common in research) and maintaining a work-life balance An interest in working on improving technical and non-technical skills A desire to write papers and publish at top venues (ICSE, ASPLOS, SIGMOD, OOPSLA, \u0026hellip;) A motivation to share your work with the community (through presentations, talking to your peers, on your website, \u0026hellip;) An interest to learn about what other people are working on (e.g., by reading papers) It is not expected that you have all of these qualities; I am unsure whether I have all of them myself. However, keep in consideration that these qualities reflect ways in which you will likely be challenged and develop further if you decide to join the lab.\nIf you are interested in a position, feel free to reach out to me and send me your CV (and transcripts). In addition, I suggest making clear why you are interested in the lab, and how your experience and interests connect with some of the work we are doing.\nIf you are considering a PhD position, you can also directly apply here and mention my name in the application. The application deadlines are June 15 and December 15.\n\u0026ndash; Manuel RIGGER (rigger@comp.nus.edu.sg)\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"e2e00e66991b80529ffa9cff1c2bed24","permalink":"https://nus-test.github.io/positions/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/positions/","section":"","summary":"I am looking for PhD students, postdocs, interns, and visitors whose vision aligns with ours to join our lab. In general, we aim to both have a practical impact by creating relevant and usable tools as well as by designing principled and fundamental approaches.","tags":null,"title":"Open Positions","type":"page"},{"authors":["Rajdeep Singh Hundal","Yan Xiao","Xiaochun Cao","Jin Song Dong","Manuel Rigger"],"categories":null,"content":"","date":1746057600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1746057600,"objectID":"8c9492d75b0005be034429a6043b6788","permalink":"https://nus-test.github.io/publication/2025-icse-mistaken-assumption/","publishdate":"2025-02-08T00:00:00Z","relpermalink":"/publication/2025-icse-mistaken-assumption/","section":"publication","summary":"","tags":null,"title":"On the Mistaken Assumption of Interchangeable Deep Reinforcement Learning Implementations","type":"publication"},{"authors":["Ruishi Li"],"categories":null,"content":"","date":1741701600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1741701600,"objectID":"25acc160483e1dd4c729b547e22f3afe","permalink":"https://nus-test.github.io/event/250311/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/250311/","section":"event","summary":"Rust aims to offer full memory safety for programs, a guarantee that untamed C programs do not enjoy. How difficult is it to translate existing C code to Rust? To get a complementary view from that of automatic C to Rust translators, we report on a user study asking humans to translate real-world C programs to Rust. Our participants are able to produce safe Rust translations, whereas state-of-the-art automatic tools are not able to do so. Our analysis highlights that the high-level strategy taken by users departs significantly from those of automatic tools we study. We also find that users often choose zero-cost (static) abstractions for temporal safety, which addresses a predominant component of runtime costs in other full memory safety defenses. User-provided translations showcase a rich landscape of specialized strategies to translate the same C program in different ways to safe Rust, which future automatic translators can consider.","tags":["Weekly Talk"],"title":"Translating C To Rust: Lessons from a User Study","type":"event"},{"authors":["Yuancheng Jiang"],"categories":null,"content":"","date":1741185000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1741185000,"objectID":"5aef2bc4fd5dcebd99307397d9ea56da","permalink":"https://nus-test.github.io/event/250305_2/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/250305_2/","section":"event","summary":"The PHP interpreter, powering over 70% of websites on the internet, plays a crucial role in web development. Existing approaches to finding bugs in PHP primarily focus on detecting explicit security issues through crashes or sanitizer-based oracles, but fail to identify logic bugs that silently lead to incorrect results. We observe that the introduction of Just-In-Time (JIT) compilation mode in PHP presents an opportunity for differential testing, as it provides an alternative implementation of the same language specification. To leverage this opportunity, we propose DiffPHP, an automatic differential testing framework that efficiently detects logic bugs in the PHP interpreter by comparing JIT and non-JIT execution results. Our differential testing incorporates two key techniques: program state instrumentation for fine-grained execution state comparison, and dual verification to handle non-deterministic behaviors in PHP programs. Combined with a state-of-theart test case generation, these two techniques significantly reduce false alarms while maintaining high bug detection capability. Experimental results demonstrate that DiffPHP outperforms the official test suite used in PHP’s continuous integration, achieving higher code coverage and executing more Zend opcodes. Through ablation studies, we validate the effectiveness of both program state instrumentation and dual verification components. To date, DiffPHP has identified 35 previously unknown logic bugs in the PHP interpreter, with 25 already fixed and 5 confirmed by PHP developers. DiffPHP has been acknowledged by the PHP developers, and offers a practical tool for automatically discovering logic bugs in the PHP interpreter.","tags":["Weekly Talk"],"title":"Automatic Differential Testing of the PHP Interpreter","type":"event"},{"authors":["Yuancheng Jiang"],"categories":null,"content":"","date":1741183200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1741183200,"objectID":"d276ac841033a083d161067698ee1250","permalink":"https://nus-test.github.io/event/250305/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/250305/","section":"event","summary":"PHP, a dominant scripting language in web development, powers a vast range of websites, from personal blogs to major platforms. While existing research primarily focuses on PHP application-level security issues like code injection, memory errors within the PHP interpreter have been largely overlooked. These memory errors, prevalent due to the PHP interpreter’s extensive C codebase, pose significant risks to the confidentiality, integrity, and availability of PHP servers. This paper introduces FlowFusion, the first automatic fuzzing framework to detect memory errors in the PHP interpreter. FlowFusion leverages dataflow as an efficient representation of test cases maintained by PHP developers, merging two or more test cases to produce fused test cases with more complex code semantics. Moreover, FlowFusion employs strategies such as test mutation, interface fuzzing, and environment crossover to increase bug finding. In our evaluation, FlowFusion found 158 unknown bugs in the PHP interpreter, with 125 fixed and 11 confirmed. Comparing FlowFusion against the official test suite and a naive test concatenation approach, FlowFusion can detect new bugs that these methods miss, while also achieving greater code coverage. FlowFusion also outperformed state-of-the-art fuzzers AFL++ and Polyglot, covering 24% more lines of code after 24 hours of fuzzing. FlowFusion has gained wide recognition among PHP developers and is now integrated into the official PHP toolchain.","tags":["Weekly Talk"],"title":"Fuzzing the PHP Interpreter via Dataflow Fusion","type":"event"},{"authors":["Zhaokun Xiang"],"categories":null,"content":"","date":1739973600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1739973600,"objectID":"cd5543e6296451a8a87b4573400f308e","permalink":"https://nus-test.github.io/event/250219/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/250219/","section":"event","summary":"Query engines are the cornerstone of any relational databases, including query optimizers and query executors. It is imperative for database developers to be equipped with a tool to detect the query execution bug and evaluate the query optimizer quality during rapid iterative development phases. We propose a testing framework for query (especially join) execution verification, cardinality estimation benchmarking, and join order selection evaluation. Our core components are a data and schema generator, a complex and effective join query generator, as well as an exact cardinality and join oracle generator. In the data and schema generator, we propose a PK-driven deterministic data generation mechanism which not only compresses the entire database in a memory-saving way via mathematical relationships but also enables our tool to be aware of data and orchestrate data meaningfully. We can generate large-scale data with customizable skewness and a complex schema with rich joinable key sets, providing an ample search space for diverse join generation. For the join query generation, we implement a complex join template generator which covers intricate join graphs including chain join, star join, tree join, cycle query, and other complex join graphs. The biggest obstacle preventing existing database fuzzers from generating massive joins is to ensure their meaningfulness. To address it, we propose a synergy-aware and result-guided query parameter inference method to quantify and infer the sample spaces for query parameters, guaranteeing the effectiveness of complex join queries. In terms of the exact cardinality and join oracle generation, we formulate the Join Query Processing as the Constraint Satisfaction Problem (CSP) and build a true cardinality and join oracle generator on top of SMT solvers, providing a formal, provable, and highly reliable solution for generating exact cardinality and join ground-truth results in a self-inferable way. Our tool has been collaborating with many famous database vendors such as OceanBase, demonstrating its effectiveness by evaluating it on many open-sourced databases regarding cardinality estimation benchmarking, join order performance diagnostics, and logic bug detection.","tags":["Weekly Talk"],"title":"A Benchmark Harness for Query Execution Correctness Verification and Query Optimizer Evaluation of Database Systems","type":"event"},{"authors":["Chaoyi Ruan"],"categories":null,"content":"","date":1739368800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1739368800,"objectID":"0a33ffc8a55523a9406100c598eb2915","permalink":"https://nus-test.github.io/event/250212/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/250212/","section":"event","summary":"Training Large Language Models (LLMs) is often inefficient due to high communication overhead, resulting in sub-50% Model FLOPS Utilization (MFU). In this talk, I will discuss how to build a cost-efficient and scalable machine learning system, using DHelix as an example. Inspired by the DNA double-helix structure, DHelix improves efficiency through Strand Interleaving (SI), which overlaps forward and backward passes to maximize computation-communication concurrency. It seamlessly integrates with all parallelism strategies, including pipeline parallelism via a model folding design.\nExperiments on Llama, GPT, and Phi MoE models across A40, A800, and H100 clusters demonstrate up to 58% MFU on A40 and 71% on A800, significantly outperforming state-of-the-art methods. I will explore DHelix’s design, optimization techniques, and its broader impact on distributed LLM training.","tags":["Weekly Talk"],"title":"Efficient and Scalable Distributed LLM Training: Hiding Communication Overhead","type":"event"},{"authors":null,"categories":null,"content":"","date":1739145600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1739145600,"objectID":"704ba6a6fdc1a42d3471f0c1cb00284f","permalink":"https://nus-test.github.io/post/10-02-25-icse25-mistaken-assumption/","publishdate":"2025-02-10T00:00:00Z","relpermalink":"/post/10-02-25-icse25-mistaken-assumption/","section":"post","summary":"","tags":null,"title":"Our paper \"On the Mistaken Assumption of Interchangeable Deep Reinforcement Learning Implementations\" was accepted at ICSE '25!","type":"post"},{"authors":["Wenjia Ye"],"categories":null,"content":"","date":1737554400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1737554400,"objectID":"0d1b7d737a2ba776a80b651ae72179b5","permalink":"https://nus-test.github.io/event/250122/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/250122/","section":"event","summary":"In this talk, I will introduce type systems for query languages, with a focus on SQL and GQL. Practical SQL engines exhibit subtle differences in their handling of typing constraints and implicit type casts, often overlooked in formal accounts of SQL. These variations can significantly impact the portability of queries across engines. To address this issue, we present TRAF, a formal typing semantics for SQL that explicitly captures both static and dynamic type behaviors. In addition to SQL, we turn our attention to GQL, a widely used query language for graph databases. However, executing queries on graph databases can be computationally expensive, particularly due to the extensive use of joins. To mitigate these costs, we aim to design a type system capable of identifying 'useless' queries. For instance, queries that are guaranteed to yield empty results or stuck.","tags":["Weekly Talk"],"title":"Type Systems for Query Languages","type":"event"},{"authors":null,"categories":null,"content":"","date":1736294400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1736294400,"objectID":"7d66f3ed82e91bb9d549a8dca47f4cc2","permalink":"https://nus-test.github.io/post/25-01-08-researchaward-suyang/","publishdate":"2025-01-08T00:00:00Z","relpermalink":"/post/25-01-08-researchaward-suyang/","section":"post","summary":"","tags":null,"title":"Suyang Zhong received a \"Research Achievement Award\" from School of Computing!","type":"post"},{"authors":["Tongjun Zhang"],"categories":null,"content":"","date":1732633200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1732633200,"objectID":"e43ba46d46f0b0db67d7c780a0d9b305","permalink":"https://nus-test.github.io/event/241126/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/241126/","section":"event","summary":"Various automated testing approaches have been proposed for Database Management Systems (DBMS), which can automatically detect different kinds of bugs such as logic and performance bugs. Such approaches typically compare the results of executing two equivalent queries on the same database states; or two sequences of otherwise equivalent statements. Given that SQL dialects differ widely, these statement generators are typically manually written. For example, SQLancer is a popular DBMS-testing tool that provides multiple test oracles; it provides more than 20 database and query generators, which consist of more than 88,000 lines of code written in Java. It would be desirable to more concisely model these generators, and make them independent from the implementation details of the testing tool that uses them. However, existing grammar-based fuzzing approaches are inapplicable, as grammars lack important features required for DBMS testing tools, such as symbol relationship and repetition controls. In this work, we propose a domain-specific language to model database and query generators for automated testing tools. We have termed this language SQL Generation Language (SGL).  Furthermore, we present a tool named Seagull, which can use SGL specifications to produce database and query generators.","tags":["Weekly Talk"],"title":"SGL: Deriving Test Case Generators using Domain-Specific Language to Test Database Engines","type":"event"},{"authors":["Mehtab Zafar"],"categories":null,"content":"","date":1731423600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1731423600,"objectID":"4d855a0cff5bb6449721d93f131eeef0","permalink":"https://nus-test.github.io/event/241112/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/241112/","section":"event","summary":"Database testing tools like SQLsmith and SQLancer generate lengthy test cases to identify several categories of database bugs. While these tools are effective in identifying issues, usually the resulting test is large and complex, making it difficult to debug. Over the years, several methods have been proposed, with delta debugging being one of the traditional approaches. Though widely used for reducing test cases in imperative languages it may not be optimal for SQL, where statements can be executed independently and provide additional information about those individual statements, like their execution time.\nIn this study, we present enhanced approaches to delta debugging, specifically tailored to leverage the execution times of SQL statements to guide the reduction process. We introduce two strategies: block time analysis, which considers the collective execution time of statement groups, and individual time analysis, which estimates and uses per-statement timing information. And two simplified approaches based on percentage removal which aims to be a preprocessing step to delta debugging rather than an alternative to it. All of these methods seek to increase the convergence toward minimal bug-reproducing test cases by prioritizing the removal of time-intensive statements.\nThe study provides a view into various variations of delta debugging with timing context integrated into it. It also provides insight into which of the methods works well and which of the strategies fails to match the efficiency and effectiveness of delta debugging.","tags":["Weekly Talk"],"title":"Automated test case reduction in query specific language(s)","type":"event"},{"authors":null,"categories":null,"content":"See the award citation on \u0026ldquo;Open Research for Robustifying Data-centric Systems\u0026rdquo;.\nWe thank Meryl Chin Guiying for designing the poster below. ","date":1731369600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1731369600,"objectID":"22d8bc096b142064b70af5e3cf23f938","permalink":"https://nus-test.github.io/post/24-11-12-singapore-open-research-award/","publishdate":"2024-11-12T00:00:00Z","relpermalink":"/post/24-11-12-singapore-open-research-award/","section":"post","summary":"See the award citation on \u0026ldquo;Open Research for Robustifying Data-centric Systems\u0026rdquo;.\nWe thank Meryl Chin Guiying for designing the poster below. ","tags":null,"title":"We received a \"Singapore Open Research Award\"","type":"post"},{"authors":["Tan Ming Wei"],"categories":null,"content":"","date":1730818800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1730818800,"objectID":"20d30c011bb7f30402c666f05bc6ac90","permalink":"https://nus-test.github.io/event/241105/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/241105/","section":"event","summary":"SQLancer, an open-source tool for testing database management systems (DBMS), is instrumental in uncovering bugs within real-world applications. However, maintaining SQLancer has become increasingly challenging due to tightly coupled components, which make it difficult to integrate new testing approaches or adapt the tool for different DBMS. This issue largely arises from the inconsistencies in SQL dialects, as each DBMS often implements unique features that deviate from standard SQL. In this session, we’ll walk through strategies for rearchitecting SQLancer in a way that allows for ongoing enhancements without disrupting current functionality. We’ll also discuss techniques to facilitate interoperability between different SQL dialects, ensuring that SQLancer can effectively adapt to diverse DBMS.","tags":["Weekly Talk"],"title":"Improving the Extensibility of SQLancer","type":"event"},{"authors":["Chi Zhang","Manuel Rigger"],"categories":null,"content":"","date":1730592000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1730592000,"objectID":"f137784a7fa0ce7f8bd2b8e225a97c37","permalink":"https://nus-test.github.io/publication/2025-sigmod-coddtest/","publishdate":"2000-12-15T00:00:00Z","relpermalink":"/publication/2025-sigmod-coddtest/","section":"publication","summary":"Logic bugs are bugs that can cause database management systems (DBMSs) to silently produce incorrect results for given queries. Such bugs are severe, because they can easily be overlooked by both developers and users, and can cause applications that rely on the DBMSs to malfunction. In this work, we propose Constant-Optimization-Driven Database Testing (CODDTest) as a novel approach for detecting logic bugs in DBMSs. This method draws inspiration from two well-known optimizations in compilers: constant folding and constant propagation. Our key insight is that for a certain database state and query containing a predicate, we can apply constant folding on the predicate by replacing an expression in the predicate with a constant, anticipating that the results of this predicate remain unchanged; any discrepancy indicates a bug in the DBMS. We evaluated CODDTest on five mature and extensively-tested DBMSs–SQLite, MySQL, CockroachDB, DuckDB, and TiDB–and found 45 unique, previously unknown bugs in them. Out of these, 24 are unique logic bugs. Our manual analysis of the state-of-the-art approaches indicates that 11 logic bugs are detectable only by CODDTest. We believe that CODDTest is easy to understand and implement, and can be widely adopted in practice.","tags":null,"title":"Constant Optimization Driven Database System Testing","type":"publication"},{"authors":null,"categories":null,"content":"","date":1730592000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1730592000,"objectID":"1e83d63d56b1f6bf269c181aaf70be78","permalink":"https://nus-test.github.io/post/24-11-03-sigmod-r3-coddtest/","publishdate":"2024-11-03T00:00:00Z","relpermalink":"/post/24-11-03-sigmod-r3-coddtest/","section":"post","summary":"","tags":null,"title":"Our paper \"Constant Optimization Driven Database System Testing\" was accepted at SIGMOD 2025 (round 3).","type":"post"},{"authors":["Junwen An"],"categories":null,"content":"","date":1729004400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1729004400,"objectID":"c0264feaf7caa88723369b5a1a9d8357","permalink":"https://nus-test.github.io/event/241015/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/241015/","section":"event","summary":"Traditional methodologies for exploring programmers’ behaviors have primarily focused on capturing their actions within the Integrated Development Environment (IDE), offering limited view into their cognitive processes. Recent emergent work started using eye-tracking techniques in software engineering (SE) research. However, the lack of tools specifically designed for coordinated data collection poses technical barriers and requires significant effort from researchers who wish to combine these two complementary approaches. To address this gap, we present CodeGRITS, a plugin specifically designed for SE researchers. CodeGRITS is built on top of IntelliJ’s SDK, with wide compatibility with the entire family of JetBrains IDEs to track developers’ IDE interactions and eye gaze data. CodeGRITS also features various practical features for SE research (e.g., activity labeling) and a real-time API that provides interoperability for integration with other research instruments and developer tools. In addition to CodeGRITS, I will also talk about two other SE topics on Software Composition Analysis and LLM-based Code Generation.","tags":["Weekly Talk"],"title":"CodeGRITS: A Research Toolkit for Developer Behavior and Eye Tracking in IDE","type":"event"},{"authors":[],"categories":[],"content":"Spatter is an automated testing tool that finds bugs in geospatial database systems.\n","date":1728924063,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1728924063,"objectID":"729d1d0da5d4694b6a2106e5efd066b0","permalink":"https://nus-test.github.io/project/spatter/","publishdate":"2024-10-15T00:41:03+08:00","relpermalink":"/project/spatter/","section":"project","summary":"Spatter is an automated testing tool that finds bugs in geospatial database systems.","tags":[],"title":"Spatter","type":"project"},{"authors":[],"categories":[],"content":"SQuaLity is a project that aims to unify different database systems\u0026rsquo; test suites into one unified test suite.\n","date":1728924063,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1728924063,"objectID":"66f26707c23fdedc6e052921ce73d043","permalink":"https://nus-test.github.io/project/squality/","publishdate":"2024-10-15T00:41:03+08:00","relpermalink":"/project/squality/","section":"project","summary":"SQuaLity is a project that aims to unify different database systems\u0026rsquo; test suites into one unified test suite.","tags":[],"title":"SQuaLity","type":"project"},{"authors":["Ken Jin"],"categories":null,"content":"","date":1728399600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1728399600,"objectID":"820afeb0faf075f0ef4874d2099cc582","permalink":"https://nus-test.github.io/event/241008/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/241008/","section":"event","summary":"Just-in-Time (JIT) compilers can gain information at run time that are not available to Ahead-of-Time (AOT) compilers. As such, abstract interpretation baseline JIT compilers are common in many dynamic language implementations. Yet the reference implementation of Python --- CPython, has largely avoided implementing a baseline JIT compiler, likely due to the prohibitive maintenance costs associated with one. This paper implements an abstract-interpretation based optimizer for CPython bytecode that is easy to maintain and less error-prone by automatically generating the optimizer from a pre-existing Domain Specific Language (DSL) --- reusing the same DSL used to specify the interpreter. The key insight presented in this paper is that the very same DSL used to generate a concrete interpreter can also generate an abstract interpreter, providing multiple benefits such as being less error-prone and greater extensibility. The proposed abstract interpreter has been accepted into CPython 3.13 and forms a part of its experimental JIT compiler.","tags":["Weekly Talk"],"title":"Automatically Generating an Abstract Interpretation-Based Optimizer from a DSL (SPLASH SRC Practice)","type":"event"},{"authors":["Rajdeep Singh Hundal"],"categories":null,"content":"","date":1725980400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1725980400,"objectID":"c0805f11f43ac4ddcf1cfe64488dc0e8","permalink":"https://nus-test.github.io/event/240910/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/240910/","section":"event","summary":"Deep Reinforcement Learning (DRL) is a paradigm of artificial intelligence where an agent uses a neural network to learn which actions to take in a given environment. DRL has recently gained traction from being able to solve complex environments like driving simulators, 3D robotic control, and multiplayer-online-battle-arena video games. Numerous implementations of the state-of-the-art algorithms responsible for training these agents, like the Deep Q-Network (DQN) and Proximal Policy Optimization (PPO) algorithms, currently exist. However, studies assume implementations of the same algorithm to be interchangeable. In this paper, through a differential testing lens, we present the results of studying the extent of implementation discrepancies, their effect on the implementations' performance, as well as their impact on the conclusions of prior studies. The outcome of our differential tests showed significant discrepancies between the tested algorithm implementations. In particular, out of the five PPO implementations tested on 56 games, three implementations achieved superhuman performance for 50% of their total trials while the other two implementations only achieved superhuman performance for less than 15% of their total trials. Furthermore, the performance among the high-performing PPO implementations was found to differ significantly in nine games. As part of a meticulous manual analysis of the implementations' source code, we analyzed implementation discrepancies and determined that code-level inconsistencies primarily caused these discrepancies. Lastly, we replicated a study and showed that these implementation discrepancies were sufficient to flip experiment outcomes if left unaccounted for. Therefore, this calls for a shift in how implementations are being used. In addition, we encourage DRL libraries to avoid these discrepancies by either adopting the differential testing methodology proposed in this paper or explicitly documenting code-level inconsistencies.","tags":["Weekly Talk"],"title":"Are Deep Reinforcement Learning Implementations Really Interchangeable?","type":"event"},{"authors":["Jun Lyu"],"categories":null,"content":"","date":1725375600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1725375600,"objectID":"1d710dbca3a20faffe5bddfdb322c09f","permalink":"https://nus-test.github.io/event/240903/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/240903/","section":"event","summary":"Incremental and parallel builds performed by build tools such as Make are the heart of modern C/C++ software projects. Their correct and efficient execution depends on build scripts. However, build scripts are prone to errors. The most prevalent errors are missing dependencies (MDs) and redundant dependencies (RDs). The state-of-the-art methods for detecting these errors rely on clean builds (i.e., full builds of a subset of software configurations in a clean environment), which is costly and takes up to multiple hours for large-scale projects. To address these challenges, we propose a novel approach called EChecker to detect build dependency errors in the context of incremental builds. The core idea of EChecker is to automatically update actual build dependencies by inferring them from C/C++ pre-processor directives and Makefile changes from new commits, which avoids clean builds when possible. EChecker achieves higher efficiency than the methods that rely on clean builds while maintaining effectiveness. We selected 12 representative projects, with their sizes ranging from small to large, with 240 commits (20 commits for each project), based on which we evaluated the effectiveness and efficiency of EChecker. We compared the evaluation results with a state-of-the-art build dependency error detection tool. The evaluation shows that the F-1 score of EChecker improved by 0.18 over the state-of-the-art method. EChecker increases the build dependency error detection efficiency by an average of 85.14 times (with the median at 16.30 times). The results demonstrate that EChecker can support practitioners in detecting build dependency errors efficiently.","tags":["Weekly Talk"],"title":"Detecting Build Dependency Errors in Incremental Builds","type":"event"},{"authors":["Keqiang Li (ECNU)"],"categories":null,"content":"","date":1724680800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1724680800,"objectID":"ab7a7c28961030b4be2fa47201bc0430","permalink":"https://nus-test.github.io/event/240826/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/240826/","section":"event","summary":"Isolation levels act as correctness contracts between real-world applications and database systems. Incorrect implementations of isolation levels would compromise the data consistency and integrity in the database. Therefore, exploring a correctness testing approach for isolation levels is of significant research importance. Specifically, correctness testing approaches for isolation levels involves addressing the following two research questions. A workload generation approach is needed to generate effective workloads for testing isolation levels and inputting them into the tested database system. After that, a test oracle approach is required to verify whether the tested database system processes workloads according to the definition of isolation levels. However, existing studies for testing isolation levels in database systems lack an effective, non-redundant, customized workload generation approach, and they also are unable to accomplish the correctness verification task for isolation levels in a general, black-box, efficient manner. In our work, we conduct in-depth research and propose a simple yet effective framework to address the above two problems. From experimental results, our framework can generate various workloads to test isolation levels, which outperform existing approaches in testing effectiveness, efficiency, and coverage. Moreover, our framework has a superpower to verify various isolation levels for any workload running on black-box database systems, and its verification performance can even surpass the execution performance of the database systems. Practically, we have successfully found 33 bugs that cannot be found by other existing approaches in popular database systems.","tags":["Weekly Talk"],"title":"A Simple yet Effective Framework for Testing Various Isolation Levels in Black-Box Databases","type":"event"},{"authors":["Yuancheng Jiang"],"categories":null,"content":"","date":1724166000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1724166000,"objectID":"8b379d5ab364da85fbab142f82a5d099","permalink":"https://nus-test.github.io/event/240820/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/240820/","section":"event","summary":"PHP, a dominant scripting language for web development, powers a vast array of websites, ranging from personal blogs to major platforms. Despite its widespread use and benefits, the PHP runtime, with its extensive codebase written in C, faces significant security challenges, including buffer overflows. Existing research predominantly targets PHP script-level security issues, leaving runtime errors in the PHP engine underexplored. This paper presents FlowFusion, the first automatic fuzzing framework, which is effective in finding runtime errors in the PHP engine. Inspired by Semantic Fusion, FlowFusion leverages dataflow analysis to guide the fusion and mutation of test cases, significantly enhancing the existing test suite. Our framework effectively merges test cases by connecting their data flows and introduces randomness and fuzzy values through test case mutations. Our experiments show the effectiveness of FlowFusion in detecting new bugs, achieving higher line and branch coverage compared to built-in test suites, and outperforming general fuzzers like AFL++. Notably, FlowFusion identified 56 runtime errors, with 38 fixed and 4 confirmed, earning acknowledgments from PHP developers. We believe our approach provides a practical tool to improve the underlying security of PHP.","tags":["Weekly Talk"],"title":"Automatic Uncovering Memory Errors in the PHP Engine via Dataflow Fusion and Mutation","type":"event"},{"authors":["Suyang Zhong"],"categories":null,"content":"","date":1723557600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1723557600,"objectID":"cbe5264eddd628a045f2343a8ccbd24b","permalink":"https://nus-test.github.io/event/240813/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/240813/","section":"event","summary":"Recently, various automated testing approaches have been proposed that used specialized test oracles to find hundreds of logic bugs in mature, widely-used Database Management Systems (DBMSs). These test oracles require database and query generators, which must account for the often significant differences between the SQL dialects of these systems. Since it can take weeks to implement such generators, many DBMS developers are unlikely to invest the time to adopt such automated testing approaches. In short, existing approaches fail to scale to the plethora of DBMSs. In this work, we present both a vision and a platform, SQLancer++, to apply automated DBMS testing approaches at scale. Our technical core contribution is a novel architecture for an adaptive SQL statement generator. This adaptive SQL generator generates SQL statements with various features, some of which might not be supported by the given DBMS, and then learns through interaction with the DBMS, which of these are understood by the DBMS. Thus, over time, the generator will generate mostly valid SQL statements. We evaluated SQLancer++ across 15 DBMSs and discovered a total of 157 unique, previously unknown bugs, of which 146 were fixed. While SQLancer++ is the first major step towards scaling automated DBMS testing, various follow-up challenges remain.","tags":["Weekly Talk"],"title":"Scaling Automated Database System Testing","type":"event"},{"authors":["Wenjing Deng","Qiuyang Mang","Chengyu Zhang","Manuel Rigger"],"categories":null,"content":"","date":1722470400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1722470400,"objectID":"8d7a863955786868684ee47d852407d6","permalink":"https://nus-test.github.io/publication/2025-sigmod-spatial-db-testing/","publishdate":"2000-12-15T00:00:00Z","relpermalink":"/publication/2025-sigmod-spatial-db-testing/","section":"publication","summary":"Spatial Database Management Systems (SDBMSs) aim to store, manipulate, and retrieve spatial data. SDBMSs are employed in various modern applications, such as geographic information systems, computer-aided design tools, and location-based services. However, the presence of logic bugs in SDBMSs can lead to incorrect results, substantially undermining the reliability of these applications. Detecting logic bugs in SDBMSs is challenging due to the lack of ground truth for identifying incorrect results. In this paper, we propose an automated geometry-aware generator to generate high-quality SQL statements for SDBMSs and a novel concept named Affine Equivalent Inputs (AEI) to validate the results of SDBMSs. We implemented them as a tool named Spatter (Spatial DBMS Tester) for finding logic bugs in four popular SDBMSs: PostGIS, DuckDB Spatial, MySQL, and SQL Server. Our testing campaign detected 34 previously unknown and unique bugs in these SDBMSs, of which 30 have been confirmed, and 18 have already been fixed. Our testing efforts have been well appreciated by the developers. Experimental results demonstrate that the geometry-aware generator significantly outperforms a naive random-shape generator in detecting unique bugs, and AEI can identify 14 logic bugs in SDBMSs that were overlooked by previous methodologies.","tags":null,"title":"Finding Logic Bugs in Spatial Database Engines via Affine Equivalent Inputs","type":"publication"},{"authors":null,"categories":null,"content":"","date":1722470400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1722470400,"objectID":"91392a629f5ceec386edcb53addf108a","permalink":"https://nus-test.github.io/post/24-08-01-sigmod-r2-papers/","publishdate":"2024-08-01T00:00:00Z","relpermalink":"/post/24-08-01-sigmod-r2-papers/","section":"post","summary":"","tags":null,"title":"Our papers \"Understanding and Reusing Test Suites Across Database Systems\" and \"Finding Logic Bugs in Spatial Database Engines via Affine Equivalent Inputs\" were accepted at SIGMOD 2025.","type":"post"},{"authors":["Suyong Zhong","Manuel Rigger"],"categories":null,"content":"","date":1722470400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1722470400,"objectID":"ff76a49f48972f0cf52e2786a2303c22","permalink":"https://nus-test.github.io/publication/2025-sigmod-reusing-tests/","publishdate":"2000-12-15T00:00:00Z","relpermalink":"/publication/2025-sigmod-reusing-tests/","section":"publication","summary":"Database Management System (DBMS) developers have implemented extensive test suites to test their DBMSs. For example, the SQLite test suites contain over 92 million lines of code. Despite these extensive efforts, test suites are not systematically reused across DBMSs, leading to wasted effort. Integration is challenging, as test suites use various test case formats and rely on unstandardized test runner features. We present a unified test suite, SQuaLity, in which we integrated test cases from three widely-used DBMSs, SQLite, PostgreSQL, and DuckDB. In addition, we present an empirical study to determine the potential of reusing these systems’ test suites. Our results indicate that reusing test suites is challenging: First, test formats and test runner commands vary widely; for example, SQLite has 4 test runner commands, while MySQL has 112 commands with additional features, to, for example, execute file operations or interact with a shell. Second, while some test suites contain mostly standard-compliant statements (e.g., 99% in SQLite), other test suites mostly test non-standardized functionality (e.g., 31% of statements in the PostgreSQL test suite are nonstandardized). Third, test reuse is complicated by various explicit and implicit dependencies, such as the need to set variables and configurations, certain test cases requiring extensions not present by default, and query results depending on specific clients. Despite the above findings, we have identified 3 crashes, 3 hangs, and multiple compatibility issues across four different DBMSs by executing test suites across DBMSs, indicating the benefits of reuse. Overall, this work represents the first step towards test-case reuse in the context of DBMSs, and we hope that it will inspire follow-up work on this important topic.","tags":null,"title":"Understanding and Reusing Test Suites Across Database Systems","type":"publication"},{"authors":null,"categories":null,"content":"","date":1721260800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1721260800,"objectID":"c692b895e5e96006d432e75239fe692f","permalink":"https://nus-test.github.io/post/24-07-18-jinsheng-graduation/","publishdate":"2024-07-18T00:00:00Z","relpermalink":"/post/24-07-18-jinsheng-graduation/","section":"post","summary":"","tags":null,"title":"Jinsheng Ba has passed the oral defense of his PhD thesis titled \"Testing Database Engines via Query Plans\" and will join ETH Zurich as a postdoctoral researcher.","type":"post"},{"authors":["Jovyn Tan","Manuel Rigger"],"categories":null,"content":"","date":1721088000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1721088000,"objectID":"24d957e698837a23acae5c0065f85208","permalink":"https://nus-test.github.io/publication/2024-issta-tex-inconsistencies/","publishdate":"2000-12-15T00:00:00Z","relpermalink":"/publication/2024-issta-tex-inconsistencies/","section":"publication","summary":"TeX is a widely-used typesetting system adopted by most publishers and professional societies. While TeX is responsible for generating a significant number of documents, irregularities in the TeX ecosystem may produce inconsistent documents. These inconsistencies may occur across different TeX engines or different versions of TeX distributions, resulting in failures to adhere to formatting specifications, or the same document rendering differently for different authors. In this work, we investigate and quantify the robustness of the TeX ecosystem through a large-scale study of 432 documents. We developed an automated pipeline to evaluate the cross-engine and cross-version compatibility of the TeX ecosystem. We found significant inconsistencies in the outputs of different TeX engines: only 0.2% of documents compiled to identical output with XeTeX and PDFTeX due to a lack of cross-engine support in popular LaTeX packages and classes used in academic conferences. A smaller—yet significant—extent of inconsistencies was found across different TeX Live distributions, with only 42.1% of documents producing the same output from 2020 to 2023. Our automated pipeline additionally reduces the human effort in bug-finding: from a sample of 10 unique root causes of inconsistencies, we identified two new bugs in LaTeX packages and five existing bugs that were fixed independently of this study. We also observed potentially unintended inconsistencies across different TeX Live distributions beyond the updates listed in changelogs. We expect that this study will help authors of TeX documents to avoid unexpected outcomes by understanding how they may be affected by the often undocumented subtleties of the TeX ecosystem, while benefiting developers by demonstrating how different implementations result in unintended inconsistencies.","tags":null,"title":"Inconsistencies in TeX-produced Documents","type":"publication"},{"authors":null,"categories":null,"content":"","date":1719964800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1719964800,"objectID":"f5530949cc29b89649398155343d8a19","permalink":"https://nus-test.github.io/post/24-07-03-jovyn-issta/","publishdate":"2024-07-03T00:00:00Z","relpermalink":"/post/24-07-03-jovyn-issta/","section":"post","summary":"","tags":null,"title":"Our paper \"Inconsistencies in TeX-produced Documents\" was accepted at ISSTA 2024.","type":"post"},{"authors":["Xiang Liu (NUS)"],"categories":null,"content":"","date":1718719200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1718719200,"objectID":"40ca55e76680f275536bdfe172b38fb4","permalink":"https://nus-test.github.io/event/240618/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/240618/","section":"event","summary":"Atomicity is a crucial correctness criterion for concurrent programs. In multi-threaded programs, executions of procedures are regarded as transactions. These transactions may fail to behave atomically, resulting in transactional atomicity violations. To dynamically check for atomicity, existing atomicity checkers focus on the well-studied notions of conflict-serializability and view-serializability to ensure that every concurrent execution of a set of transactions is equivalent to some serial execution of the same transactions. However, all the current methods for checking view-serializability are inefficient. In this paper, we present ViewChecker, a novel violation detection method for checking view-serializability in an online (dynamic) setting. ViewChecker  is the first trace-based checker, using vector clocks to guarantee soundness and completeness. We also provethat ViewChecker is more efficient than any existing solution with quadratic time complexity","tags":["Weekly Talk"],"title":"ViewChecker: A Sound and Complete Checker for View-Serializability in Quadratic Time Complexity","type":"event"},{"authors":null,"categories":null,"content":"","date":1718236800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1718236800,"objectID":"14d92551a453340eb653a4c2615eb096","permalink":"https://nus-test.github.io/post/24-06-13-ken-jin-jules-award/","publishdate":"2024-06-13T00:00:00Z","relpermalink":"/post/24-06-13-ken-jin-jules-award/","section":"post","summary":"","tags":null,"title":"Ken Jin and Jules Poon were awarded an NUS-wide \"Outstanding Undergraduate Researcher Prize\" 🏆 for their work on improving the performance of CPython.","type":"post"},{"authors":["Zuming Jiang (ETH Zurich)"],"categories":null,"content":"","date":1714485600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1714485600,"objectID":"8d1503c83242f974275d310aa9fc2801","permalink":"https://nus-test.github.io/event/240430/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/240430/","section":"event","summary":"Database management systems (DBMSs) are crucial for storing and fetching data. To improve the reliability of such systems, approaches have been proposed to detect logic bugs that cause DBMSs to process data incorrectly. These approaches manipulate queries and check whether the query results produced by DBMSs follow the expectations. However, such query-level manipulation cannot handle complex query semantics and thus needs to limit the patterns of generated queries, degrading testing effectiveness.\nIn this paper, we tackle the problem using a fine-grained methodology—expression-level manipulation—which empowers the proposed approach to be applicable to arbitrary queries. To find logic bugs in DBMSs, we design a novel and general approach, equivalent expression transformation (EET). Our core idea is that manipulating expressions of a query in a semantic-preserving manner also preserves the semantics of the entire query and is independent of query patterns. EET validates DBMSs by checking whether the transformed queries still produce the same results as the corresponding original queries. We realize our approach and evaluate it on 5 widely used and extensively tested DBMSs: MySQL, PostgreSQL, SQLite, ClickHouse, and TiDB. In total, EET found 66 unique bugs, 35 of which are logic bugs. We expect the generality and effectiveness of EET to inspire follow-up research and benefit the reliability of many DBMSs.","tags":["Weekly Talk"],"title":"Detecting Logic Bugs in Database Engines via Equivalent Expression Transformation","type":"event"},{"authors":null,"categories":null,"content":"","date":1713830400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1713830400,"objectID":"e33baaa761cc9ac91d3d93392d118579","permalink":"https://nus-test.github.io/post/24-04-23-jack-eurosys-award/","publishdate":"2024-04-23T00:00:00Z","relpermalink":"/post/24-04-23-jack-eurosys-award/","section":"post","summary":"","tags":null,"title":"Our paper \"Validating Database System Isolation Level Implementations with Version Certificate Recovery\" received a Best Paper Award 🏆 at EuroSys 2024.","type":"post"},{"authors":null,"categories":null,"content":"","date":1713225600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1713225600,"objectID":"343db6ba1e5d6aa36d974b861884c913","permalink":"https://nus-test.github.io/post/24-04-16-jun-fse/","publishdate":"2024-04-16T00:00:00Z","relpermalink":"/post/24-04-16-jun-fse/","section":"post","summary":"","tags":null,"title":"Our paper \"Towards Efficient Build Ordering for Incremental Builds with Multiple Configurations\" was accepted at FSE 2024.","type":"post"},{"authors":["Jovyn Tan"],"categories":null,"content":"","date":1712671200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1712671200,"objectID":"2d924cbc09dfc0d6dd7120f71d375db3","permalink":"https://nus-test.github.io/event/240409/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/240409/","section":"event","summary":"TeX is a widely-used typesetting system adopted by most publishers and professional societies due to its versatility and formatting capabilities. While the TeX is responsible for generating a significant amount of documents, irregularities in the TeX ecosystem may produce inconsistent documents, resulting in failures to adhere to formatting specifications, or the same document rendering differently for different authors. In this work, we investigate and quantify the robustness of the TeX ecosystem through a large-scale study of 432 documents. We developed an automated pipeline to evaluate the cross-engine and cross-version compatibilities. We found significant inconsistencies in the outputs of different TeX engines: only 0.2% of documents compiled to identical output with XeTeX and PDFTeX due to a lack of cross-engine support in popular LaTeX packages and document classes used in academic conferences. A smaller---but still significant---extent of inconsistencies were found across different distributions of TeXlive, with only 42.1% of documents producing the same output from 2020 to 2023. From a sample of 10 unique root causes of inconsistencies, we identified two new bugs in LaTeX packages, and five existing bugs that were fixed independently of this study. We also observed potentially unintended inconsistencies across different versions of the TeXLive distribution outside of the updates listed in changelogs. We expect that this study will help authors of TeX documents to understand the often undocumented differences between TeX engines and how their documents may be affected by updates in the TeX ecosystem, thus avoiding unexpected outcomes. This work may also benefit developers by enhancing understanding of how different implementations result in unintended differences, as well as the typical inconsistencies that may occur.","tags":["Weekly Talk"],"title":"Inconsistencies in TeX-produced Documents","type":"event"},{"authors":["Yun Peng"],"categories":null,"content":"","date":1712066400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1712066400,"objectID":"0db69e7e50c32baaa5fdf6d2b267038b","permalink":"https://nus-test.github.io/event/240402/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/240402/","section":"event","summary":"Code analysis and automatic program repair has been studied for a long time since high-level programming languages such as C language were invented in the 1970s. Traditional rule-based code analysis techniques and template-based automatic program repair methods have made a success on software development. Despite the widespread usage, there are also some intrinsic disadvantages such as false positives and low coverage identified in these techniques and hinder the further progress of modern software development. With the emergence of deep learning techniques in the natural language processing field, especially the great success of large language models, intelligent code analysis techniques are proposed and demonstrated to be more effective. In this talk, we take the most popular programming language Python as an example, to introduce our exploration of intelligent code analysis on two tasks: type inference and program repair for type errors.\n\n Bio: Yun Peng is the 4th year PhD candidate in computer science at the Chinese University of Hong Kong (CUHK). He is advised by Prof. Michael R. Lyu. He received his bachelor’s degree at the School of the Gifted Young in the University of Science and Technology of China (USTC). His research interests are in the scope of software engineering. More specifically, he is interested in intelligent code analysis, such as type inference and API recommendation. He is also interested in software reliability and software ecosystem. He published multiple papers on top software engineering conferences such as ICSE, ESEC/FSE, ASE and top software engineering journals such as IEEE TSE. He received the ACM SIGSOFT Distinguished Paper Award at ASE’23, Distinguished Paper Award at the Industry Challenge Track of ASE’23, and the ACM SIGSOFT Distinguished Paper Award Nomination at ICSE’22. He also serves as reviewers for top software engineering journals such as IEEE TSE and ACM TOSEM. ","tags":["Weekly Talk"],"title":"Intelligent Code Analysis and Program Repair in the Era of LLMs","type":"event"},{"authors":["Yuxi Lin"],"categories":null,"content":"","date":1711461600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1711461600,"objectID":"1e7e4cbe775335357c089b6921e89fa1","permalink":"https://nus-test.github.io/event/240326/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/240326/","section":"event","summary":"In this work, we focus on the automatic detection and verification of unexpected behaviors on the Web. The ultimate goal is to produce an end-to-end automated tool for both detection and verification. We split it into two parts and achieve them stage by stage: detection and verification. For the detection, we focus on front-end application, browser extensions, We propose a framework, BEG, to identify malicious extensions and extensions with privacy violations by the combination of static and dynamic analysis, and conduct a lagre-scale analysis of the whole browser extension ecosystem. Meanwhile, for the verification, we focus on web servers and propose a framework, MyDOP, to automatically generate exploits to memory corruption in web servers. MyDOP automatically verifies vulnerabilities by producing executable attack payloads. We conduct several case studies to illustrate the basic concept of MyDOP. Finally, we will dicuss some potential future works.","tags":["Weekly Talk"],"title":"Detecting and Verifying Unexpected Behaviors in Web Applications using Program Analysis","type":"event"},{"authors":["Ivan Ho"],"categories":null,"content":"","date":1710856800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1710856800,"objectID":"f8148985ebf4a96528b7a94d49469b2f","permalink":"https://nus-test.github.io/event/240319/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/240319/","section":"event","summary":"A lecture for CS3213 Foundations of Software Engineering","tags":["Weekly Talk"],"title":"CS3213 Lecture - Software Evolution","type":"event"},{"authors":["Jinsheng Ba","Manuel Rigger"],"categories":null,"content":"","date":1710374400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1710374400,"objectID":"819fcb4923d84f92ac4ec975f9ddd63b","permalink":"https://nus-test.github.io/publication/2024-sigmod-dqp/","publishdate":"2000-12-15T00:00:00Z","relpermalink":"/publication/2024-sigmod-dqp/","section":"publication","summary":"Query optimizers perform various optimizations, many of which have been proposed to optimize joins. It is pivotal that these optimizations are correct, meaning that they should be extensively tested. Besides manually written tests, automated testing approaches have gained broad adoption. Such approaches semi-randomly generate databases and queries. More importantly, they provide a so-called test oracle that can deduce whether the system's result is correct. Recently, researchers have proposed a novel testing approach called Transformed Query Synthesis (TQS) specifically designed to find logic bugs in join optimizations. TQS is a sophisticated approach that splits a given input table into several sub-tables and validates the results of the queries that join these sub-tables by retrieving the given table. We studied TQS's bug reports, and found that 14 of 15 unique bugs were reported by showing discrepancies in executing the same query with different query plans. Therefore, in this work, we propose a simple alternative approach to TQS. Our approach enforces different query plans for the same query and validates that the results are consistent. We refer to this approach as Differential Query Plan (DQP) testing. DQP can reproduce 14 of the 15 unique bugs found by TQS, and found 26 previously unknown and unique bugs. These results demonstrate that a simple approach with limited novelty can be as effective as a complex, conceptually appealing approach. Additionally, DQP is complementary to other testing approaches for finding logic bugs. 81% of the logic bugs found by DQP cannot be found by NoREC and TLP, whereas DQP overlooked 86% of the bugs found by NoREC and TLP. We hope that the practicality of our approach---we implemented in less than 100 lines of code per system---will lead to its wide adoption.","tags":null,"title":"Keep It Simple: Testing Databases via Differential Query Plans","type":"publication"},{"authors":null,"categories":null,"content":"","date":1710374400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1710374400,"objectID":"2fcf145c241ad63aca072ac8372c7eb7","permalink":"https://nus-test.github.io/post/15-03-24-dqp-sigmod/","publishdate":"2024-03-14T00:00:00Z","relpermalink":"/post/15-03-24-dqp-sigmod/","section":"post","summary":"","tags":null,"title":"Our paper \"Keep It Simple: Testing Databases via Differential Query Plans\" was accepted at SIGMOD 2024.","type":"post"},{"authors":["Wenjing Deng"],"categories":null,"content":"","date":1710252000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1710252000,"objectID":"efc4e2d8ce243f8270bf2ad94db6d660","permalink":"https://nus-test.github.io/event/240312/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/240312/","section":"event","summary":"Spatial Database Management Systems (SDBMSs) aim to store, manipulate, and retrieve spatial data spatial data. SDBMSs provide spatial data types, spatial indexing, and spatial join methods, which exist as the spatial extensions or spatial build-in features in famous DBMSs. These systems can be affected by logic bugs, the cause of returning incorrect results. A common key challenge to finding logic bugs is the so-called test oracle problem. Differential testing is a potential testing methodology that compares the results of multiple SDBMSs for a common input, and flags any discrepancy as a bug. However, differential testing is limited in overlooking bugs and false alarms in this setting. In this paper, we propose AEI (Affine Equivalent Inputs), a novel metamorphic testing approach to uncover unknown logic bugs in SDBMS.\n To evaluate the effectiveness of AEI , we implemented a tool named Spatter (Spatial DBMSs Tester) on testing four famous SDBMSs. In total, it detected 34 real, previously unknown, unique bugs, of which 30 have been confirmed and 19 already fixed. Our work has been well-recognized by SDBMSs' developers and we believe that AEI can help solidify SDBMS due to its generality and effectiveness. ","tags":["Weekly Talk"],"title":"Finding Logic Bugs in Spatial Database Engines via Affine Equivalent Inputs","type":"event"},{"authors":["Yakun Zhang (Peking University)"],"categories":null,"content":"","date":1709647200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1709647200,"objectID":"fff6ab9504a7507d0bb860edf293920d","permalink":"https://nus-test.github.io/event/240305/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/240305/","section":"event","summary":"GUI test case migration is to migrate GUI test cases from a source app to a target app. The key of test case migration is widget match- ing. Recently, researchers have proposed various approaches by formulating widget matching as a matching task. However, since these matching approaches depend on static word embeddings with- out using contextual information to represent widgets and man- ually formulated matching functions, there are main limitations of these matching approaches when handling complex matching relations in apps. To address the limitations, we propose the first learning-based widget matching approach named TEMdroid (TEst Migration) for test case migration. Unlike the existing approaches, TEMdroid uses BERT to capture contextual information and learns a matching model to match widgets. Additionally, to balance the significant imbalance between positive and negative samples in apps, we design a two-stage training strategy where we first train a hard-negative sample miner to mine hard-negative samples, and further train a matching model using positive samples and mined hard-negative samples. Our evaluation on 34 apps shows that TEM- droid is effective in event matching (i.e., widget matching and target event synthesis) and test case migration. For event matching, TEM- droid’s Top1 accuracy is 76%, improving over 17% compared to baselines. For test case migration, TEMdroid’s F1 score is 89%, also 7% improvement compared to the baseline approach. ","tags":["Weekly Talk"],"title":"Learning-based Widget Matching for Migrating GUI Test Cases","type":"event"},{"authors":["Jun Lyu","Shanshan Li","He Zhang","Yang Zhang","Guoping Rong","Manuel Rigger"],"categories":null,"content":"","date":1709337600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1709337600,"objectID":"606d20cd0fe16dec354f82e7a7283774","permalink":"https://nus-test.github.io/publication/2024-issta-build-errors/","publishdate":"2023-12-15T00:00:00Z","relpermalink":"/publication/2024-issta-build-errors/","section":"publication","summary":"","tags":null,"title":"Detecting Build Dependency Errors in Incremental Builds","type":"publication"},{"authors":null,"categories":null,"content":"","date":1709337600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1709337600,"objectID":"fd2b3c07ed448bb8d53a2b65cda3a079","permalink":"https://nus-test.github.io/post/15-03-24-builds-issta/","publishdate":"2024-03-02T00:00:00Z","relpermalink":"/post/15-03-24-builds-issta/","section":"post","summary":"","tags":null,"title":"Our paper \"Detecting Build Dependency Errors in Incremental Builds\" was accepted at ISSTA 2024.","type":"post"},{"authors":["Zeyang Zhuang"],"categories":null,"content":"","date":1708437600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1708437600,"objectID":"8905b7ce2359ea556043bc9cea8069ac","permalink":"https://nus-test.github.io/event/240220/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/240220/","section":"event","summary":"Graph database systems (GDBs) have supported many important real-world applications such as social networks, logistics, and path planning. Meanwhile, logic bugs are also prevalent in GDBs, leading to incorrect results and severe consequences. However, the logic bugs largely cannot be revealed by prior solutions which are unaware of the graph native structures of the graph data. In this paper, we propose Gamera (Graph-aware metamorphic relations), a novel metamorphic testing approach to uncover unknown logic bugs in GDBs. We design three classes of novel graph-aware Metamorphic Relations (MRs) based on the graph native structures. Gamera would generate a set of queries according to the graph-aware MRs to test diverse and complex GDB operations, and check whether the GDB query results conform to the chosen MRs. We thoroughly evaluated the effectiveness of Gamera on seven widely-used GDBs such as Neo4j and OrientDB. Gamera was highly effective in detecting logic bugs in GDBs. In total, it detected 39 logic bugs, of which 15 bugs have been confirmed, and three bugs have been fixed. Our experiments also demonstrated that Gamera significantly outperformed prior solutions including Grand, GDsmith and GDBMeter. Gamera has been well-recognized by GDB developers and we open-source our prototype implementation to contribute to the community. ","tags":["Weekly Talk"],"title":"Testing Graph Database via Graph-Aware Metamorphic Relations","type":"event"},{"authors":null,"categories":null,"content":"","date":1707350400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1707350400,"objectID":"2f8b541d0537715f0c5ff711d6fe13ab","permalink":"https://nus-test.github.io/post/08-02-24-certificates-eurosys24/","publishdate":"2024-02-08T00:00:00Z","relpermalink":"/post/08-02-24-certificates-eurosys24/","section":"post","summary":"","tags":null,"title":"Our paper \"Validating Database System Isolation Level Implementations with Version Certificate Recovery\" was accepted at EuroSys 2024.","type":"post"},{"authors":["Jack Clark","Alastair Donaldson","John Wickerson","Manuel Rigger"],"categories":null,"content":"","date":1707350400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1707350400,"objectID":"5f073b07e07b46cb2f0d41e158aab55b","permalink":"https://nus-test.github.io/publication/2024-eurosys-certificate/","publishdate":"2023-12-15T00:00:00Z","relpermalink":"/publication/2024-eurosys-certificate/","section":"publication","summary":"","tags":null,"title":"Validating Database System Isolation Level Implementations with Version Certificate Recovery","type":"publication"},{"authors":["Jinhao Dong (Peking University)"],"categories":null,"content":"","date":1707228000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1707228000,"objectID":"6c00a6b16054b4cdb9c8cbf165f846e1","permalink":"https://nus-test.github.io/event/240206/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/240206/","section":"event","summary":"In collaborative software development, different developers work independently for respective tasks, which increases the development productivity. However, this process sometimes exhibits inefficiencies. Each time a programmer submits code changes, they are required to attach a commit message. Besides, merge conflicts may emerge when distinct developers modify identical sections of the code. Therefore, automating the generation of commit messages and resolving merge conflicts could substantially improve developers' efficiency. We first conduct an empirical study of existing code commit techniques and propose a novel evaluation perspective, namely patterns. Subsequently, faced with the found problems, for commit message generation, we propose a fine-grained Abstract Syntax Tree (AST) to represent code changes. This representation captures the edit operations between the old and new versions, which can help models understand the key parts of code changes. Additionally, for merge conflict resolution, we propose to produce resolutions by generation instead of relying on classification, as done in prior techniques. In addition to the previous work, we will present our recent progress in merge conflict resolution. Existing techniques suffer from an unclear problem definition and a lack of clarity regarding which kind of resolutions should be produced. Consequently, we aim to provide a precise definition of this problem and propose reliable techniques based on this clarified understanding.","tags":["Weekly Talk"],"title":"Introduction to code commit process","type":"event"},{"authors":["Ivan Ho"],"categories":null,"content":"","date":1706623200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1706623200,"objectID":"1073f69ce92181427ab8c0daad0bae5d","permalink":"https://nus-test.github.io/event/240130/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/240130/","section":"event","summary":"In this era of multicore programming, industry engineers and scientists alike have turned to parallel algorithms to improve algorithmic performance at scale, resulting in a demand for massively parallel processors that manufacturers have been only too eager to meet. However, programming for performance in accelerators has proven to be error-prone, with data races being one of the most common, yet most difficult to detect, bugs encountered in the GPU domain on a daily basis. In this paper, we propose a polyhedral approach to the analysis of CUDA programs, and demonstrate the capability of Presburger logic to compactly model the peculiarities of working with GPU hardware accelerators.\nPolyhedral analysis has long been used to validate program transformations in optimizing compilers. By abstracting the concept of affine loops to scanning polyhedra, many hardware-focused optimizations such as tiling and vectorization can be applied through polyhedral analysis. We observe that there is a duality between the thread organization of graphics cards and nested loops, and attempted to apply the polyhedral model to analyze GPU-targeted programs --- colloquially referred as 'kernels' --- and realized that the further delineation of thread blocks into warps can be succinctly described in Presburger logic. However, we realize that the polyhedral model alone is insufficient to describe synchronization, and extended the model with a \u001bmph{synchronization schedule} that encapsulated the pair-wise synchronization relation for use in the integer linear program solver.\nWe implement our findings in our ILP-based tool, Golly, using a multitude of control flow analyses to extract the polyhedral model from LLVM IR. We then empirically evaluate the capabilities of our tool on a set of benchmarks in comparison to existing SMT-based static detectors. Our results retain a high precision while achieving an average speedup of 75% over previous work.\nIn summary, the key contributions of this work are as follows: the extension of the polyhedral model to account for synchronization, the modeling of hardware-level concepts in the polyhedral model, an application of said model by applying it in the context of race detection, and an evaluation of the approaches mentioned. ","tags":["Weekly Talk"],"title":"Golly! Granular Bug Finding via Polyhedral Analysis of GPU Kernels","type":"event"},{"authors":["Qiuyang Mang"],"categories":null,"content":"","date":1705413600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1705413600,"objectID":"2c64023874ff9fdd0f89193ccfae5144","permalink":"https://nus-test.github.io/event/240116/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/240116/","section":"event","summary":"Graph Database Management Systems (GDBMS), which utilize graph models for data storage and execute queries via graph traversals, have seen ubiquitous usage in real-world scenarios such as recommendation systems, knowledge graphs, and social networks. Much like Relational Database Management Systems (RDBMS), GDBMS are not immune to bugs. These bugs typically manifest as logic errors that yield incorrect results (e.g., omitting a node that should be included), performance bugs that lead to sub-optimal performance (e.g., long execution time caused by redundant graph scanning), and exception issues (e.g., unexpected or missing exceptions). This paper adapts Equivalent Query Rewriting (EQR), a high-level, widely applicable concept, to GDBMS testing.} Its core idea is to rewrite a GDBMS query into equivalent ones that trigger distinct query plans, and check whether they exhibit discrepancies in system behaviors. To facilitate the realization of EQR, we propose a general concept called Abstract Syntax Graph (ASG), which embeds the semantics of a query in the paths of a graph. Given a base query, an ASG will be constructed and then an equivalent query can be generated by finding paths collectively carrying the complete semantics of the base query. To this end, we further design Random Walk Covering (RWC), a simple yet effective path-covering algorithm. As a practical implementation of these ideas, we develop a tool GRev, which has successfully detected 22 previously unknown bugs across 5 popular GDBMS, with 15 of them being confirmed. In particular, 14 detected bugs are related to improper implementation of graph data retrieval in GDBMS, which is challenging to identify for existing techniques.","tags":["Weekly Talk"],"title":"Equivalent Query Rewriting in Graph Database without Hard-code Rules","type":"event"},{"authors":null,"categories":null,"content":"The article featured at https://www.comp.nus.edu.sg/ describes our Query Plan Guidance work, which received an ACM SIGSOFT Distinguished Paper Award at ICSE 2023.\n","date":1704412800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1704412800,"objectID":"5be307972a3b06a5be84a0362ab4dc7d","permalink":"https://nus-test.github.io/post/24-01-05-nus-interview/","publishdate":"2024-01-05T00:00:00Z","relpermalink":"/post/24-01-05-nus-interview/","section":"post","summary":"The article featured at https://www.comp.nus.edu.sg/ describes our Query Plan Guidance work, which received an ACM SIGSOFT Distinguished Paper Award at ICSE 2023.","tags":null,"title":"NUS School of Computing featured our work in an article!","type":"post"},{"authors":["Chi Zhang","Linzhang Wang","Manuel Rigger"],"categories":null,"content":"","date":1703289600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1703289600,"objectID":"a587fb3ac9b9967e930f8574bd494b72","permalink":"https://nus-test.github.io/publication/2024-oopsla-datalog-testing/","publishdate":"2023-12-15T00:00:00Z","relpermalink":"/publication/2024-oopsla-datalog-testing/","section":"publication","summary":"","tags":null,"title":"Finding Cross-rule Optimization Bugs in Datalog Engines","type":"publication"},{"authors":null,"categories":null,"content":"","date":1703289600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1703289600,"objectID":"bdd0234a74c7efba8b4fd19057d627ca","permalink":"https://nus-test.github.io/post/23-12-23-deopt-oopsla24/","publishdate":"2023-12-23T00:00:00Z","relpermalink":"/post/23-12-23-deopt-oopsla24/","section":"post","summary":"","tags":null,"title":"Our paper \"Finding Cross-rule Optimization Bugs in Datalog Engines\" was accepted at OOPSLA '24!","type":"post"},{"authors":["Jie Liang"],"categories":null,"content":"","date":1702908000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1702908000,"objectID":"cf1fd3165f8d8b3c6ce2b48a0d24f757","permalink":"https://nus-test.github.io/event/231218/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/231218/","section":"event","summary":" Testing database management systems (DBMSs) is a complex task. The vagueness and intricacy of the SQL specification make it difficult to model the semantics of queries, making it challenging to test the correctness and performance of DBMSs. Traditional approaches, such as metamorphic testing, require precise modeling of the SQL specification to create different inputs with equivalent semantics. This process can be labor-intensive and error-prone. To address this, we propose Mozi, a framework that finds DBMS bugs via configuration-based equivalent transformation. The key idea behind Mozi is to compare the results of equivalent DBMSs with different configurations, rather than between semantically equivalent queries. The framework involves analyzing the query plan, changing configurations to transform the DBMS to an equivalent one, and re-executing the query to compare the results using various test oracles. For example, detecting differences in query results indicates correctness bugs, while observing faster execution times on the optimization-closed DBMS suggests performance bugs. We demonstrate the effectiveness of Mozi by evaluating it on four widely used DBMSs, namely MySQL, MariaDB, Clickhouse, and PostgreSQL. In the continuous fuzzing, Mozi totally found 101 previously unknown bugs, including 49 correctness and 52 performance bugs in four DBMSs. Among them, 90 bugs are confirmed and 57 bugs have been fixed. In addition, Mozi can be extended to other DBMS fuzzers for testing various types of bugs. With Mozi, testing DBMSs becomes simpler and more effective, potentially saving time and effort that would otherwise be spent on precisely modeling SQL specifications for testing purposes.\n\n Bio: Jie Liang received the B.S. degree in computer science from Beijing University of Posts and Telecommunications, Beijing, China, in 2017, and the Ph.D. degree in software engineering from Tsinghua University, Beijing, China, in 2022. He is currently working as a Postdoc researcher in school of software at Tsinghua University. His research interests include program analysis, DBMS testing, and their applications to industry. ","tags":["Weekly Talk"],"title":"Mozi: Discovering DBMS Bugs via Configuration-Based Equivalent Transformation","type":"event"},{"authors":["Shuxin Li","Manuel Rigger"],"categories":null,"content":"","date":1702598400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1702598400,"objectID":"3b1eb896a2ec5379c3c34b57d4d87d1f","permalink":"https://nus-test.github.io/publication/2024-icse-xml-testing/","publishdate":"2023-12-15T00:00:00Z","relpermalink":"/publication/2024-icse-xml-testing/","section":"publication","summary":"","tags":null,"title":"Finding XPath Bugs in XML Document Processors via Differential Testing","type":"publication"},{"authors":null,"categories":null,"content":"","date":1702598400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1702598400,"objectID":"ee5204e7b39907f896001606860052f8","permalink":"https://nus-test.github.io/post/15-12-23-icse24-xml-testing/","publishdate":"2023-12-15T00:00:00Z","relpermalink":"/post/15-12-23-icse24-xml-testing/","section":"post","summary":"","tags":null,"title":"Our paper \"Finding XPath Bugs in XML Document Processors via Differential Testing\" was accepted at ICSE '24!","type":"post"},{"authors":["Chuannan Zhang"],"categories":null,"content":"","date":1701698400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1701698400,"objectID":"be4c87ca4e9a1f4d7f7606e1cc49d63d","permalink":"https://nus-test.github.io/event/231204/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/231204/","section":"event","summary":" Change Data Capture (CDC) tools play a pivotal role in tracking and managing alterations to databases. Most of them become crucial components in the realm of data management,providing a systematic approach to identify and capture changes made to data over and across databases. However, the correctness of CDC tools is not guaranteed like DBMS, and the bugs in CDC tools may lead to severe consequences. Existing techniques such as fuzzing and differential testing are generally used to test DBMS. Approaches to find logic bugs, such as when a DBMS computes an incorrect result set, lead to automatically generate tools like SQLancer. SQLancer has been used to find bugs in a range of widely-used, production-quality DBMS including SQLite, MySQL, PostgreSQL. However, these techniques are not well used in finding bugs inside CDC tools. The key conceptual challenge was to tackle the test oracle and test-case generation problems together with heterogeneous databases connected by CDC tools. In this talk, I will introduce the study of testing CDC tools via SQLancer-CDC, a tool for automatic testing of database management systems together with change data capture tool chain. The primary findings of this tool show two schema mismatch error messages within the MySQL and Flink CDC tool.","tags":["Weekly Talk"],"title":"Testing Change Data Capture Tools via SQLancer-CDC","type":"event"},{"authors":["Haoxiang Jia"],"categories":null,"content":"","date":1701093600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1701093600,"objectID":"9413223f70bac996c16c90bb75663ad1","permalink":"https://nus-test.github.io/event/231127/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/231127/","section":"event","summary":" Fuzzing of compilers and code analysers has led to a large number of bugs being found and fixed in widely-used frameworks such as LLVM, GCC and Frama-C. Most such fuzzing techniques have taken a blackbox approach, with compilers and code analysers starting to become relatively immune to such fuzzers. We propose a coverage-directed, mutation-based approach for fuzzing C compilers and code analysers, inspired by the success of this type of greybox fuzzing in other application domains. The main challenge of applying mutation-based fuzzing in this context is that naive mutations are likely to generate programs that do not compile. Such programs are not useful for finding deep bugs that affect optimisation, analysis, and code generation routines. We have designed a novel greybox fuzzer for C compilers and analysers by developing a new set of mutations to target common C constructs, and transforming fuzzed programs so that they produce meaningful output, allowing differential testing to be used as a test oracle, and paving the way for fuzzer-generated programs to be integrated into compiler and code analyser regression test suites. We have implemented our approach in GrayC, a new opensource LibFuzzer-based tool, and present experiments showing that it provides more coverage on the middle- and back-end stages of compilers and analysers compared to other mutation-based approaches, including Clang-Fuzzer, PolyGlot, and a technique similar to LangFuzz. We have used GrayC to identify 30 confirmed compiler and code analyser bugs: 25 previously unknown bugs (with 22 of them already fixed in response to our reports) and 5 confirmed bugs reported independently shortly before we found them. A further 3 bug reports are under investigation. Apart from the results above, we have contributed 24 simplified versions of coverage-enhancing test cases produced by GrayC to the Clang/LLVM test suite, targeting 78 previously uncovered functions in the LLVM codebase.","tags":["Weekly Talk"],"title":"GrayC: Greybox Fuzzing of Compilers and Analysers for C","type":"event"},{"authors":["Jun Lyu"],"categories":null,"content":"","date":1700488800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1700488800,"objectID":"0cf2dc08ebe30a9dcd62da1d2a0475f5","permalink":"https://nus-test.github.io/event/231120/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/231120/","section":"event","summary":"Complete and correct build dependencies are critical to successful builds and are often violated and ignored by practitioners using MAKE, one of the widely used build systems. Incomplete declarations of build dependencies can lead to incorrect or inefficient builds. In addition, software products provide many configurations to accommodate different environments and requirements. Building multiple configurations is a pressing need. The current common practice is to perform a clean build for each configuration, which is both expensive and time-consuming. Incremental builds have been shown to be suitable for building multiple software configurations. This means incrementally building one software configuration on top of another. A proper build order accelerates the build of the whole set of software build configurations.","tags":["Weekly Talk"],"title":"Software Build Maintenance​: Errors and Efficiency","type":"event"},{"authors":["Ken Jin","Jules Poon"],"categories":null,"content":"","date":1699970400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1699970400,"objectID":"e89cc4aa23d61db48a5221eb5c6f746b","permalink":"https://nus-test.github.io/event/231114/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/231114/","section":"event","summary":"","tags":["Weekly Talk"],"title":"Runtime Compiler Optimizations for CPython Bytecode","type":"event"},{"authors":["Anxing Zhang"],"categories":null,"content":"","date":1699275600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1699275600,"objectID":"a1ae38056a9ce7eb48758880f8ea5aed","permalink":"https://nus-test.github.io/event/231106/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/231106/","section":"event","summary":"Java Database Connectivity (JDBC) drivers are software components that enable Java applications to interact with relational database systems. The numerous APIs potentially introduce significant complexity and might make JDBC drivers prone to bugs. This study holds importance as JDBC drivers have been widely used in Java applications, the reliability of JDBC drivers have large impact on the security of those applications. We propose an automated testing approach based on a state-machine model, enabling the automatic generation of test cases specifically designed to differentially test various JDBC drivers. Thus, the key conceptual challenge was to tackle the so-called test oracle and test-case generation problems. The test oracle problem is the challenge of determining the correct outcome or expected result for a given test case, while the test generation problem involves creating effective test cases to thoroughly exercise a system or software. The primary findings of this research effort include the discovery of two bugs within the DuckDB JDBC driver, which were subsequently verified and confirmed by the developers. Additionally, the study has unearthed several previously unnoticed discrepancies in the behaviors exhibited by various JDBC drivers. Overall, this dissertation introduces a pragmatic approach to testing JDBC drivers, which can help identify and address critical issues in these drivers. This research contributes to the quest for dependable database connectivity within Java applications.","tags":["group meeting"],"title":"Improving Reliability of JDBC Drivers","type":"event"},{"authors":["Suyang Zhong"],"categories":null,"content":"","date":1698069600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1698069600,"objectID":"378a3bdae96196de5b18df775859fda6","permalink":"https://nus-test.github.io/event/231023/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/231023/","section":"event","summary":"Database Management Systems (DBMSs) are essential for efficient data storage and retrieval. To prevent bugs from being introduced, DBMS developers have implemented extensive test suites; for example, the SQLite test suites contain over 92 million lines of code. Despite these extensive efforts, test suites are not systematically reused across DBMSs, leading to wasted effort. Integration is challenging, as test suites use various test case formats and rely on unstandardized test runner features. We present a unified test suite, SQuaLity, in which we integrated test cases from three widely-used DBMSs, SQLite, PostgreSQL, and DuckDB. In addition, we present an empirical study to determine the potential of reusing these systems’ test suites. Our results indicate that reusing test suites is challenging: First, test formats and test runner commands vary widely; for example, SQLite has 4 test runner commands, while MySQL has 112 commands with additional features, to, for example, execute file operations or interact with a shell. Second, while some test suites contain mostly standard-compliant statements (e.g., 99% in SQLite), other test suites mostly test non-standardized functionality (e.g., 31% of statements in the PostgreSQL test suite are non-standardized). Third, test reuse is complicated by various explicit and implicit dependencies, such as the need to set variables and configurations, certain test cases requiring extensions not present by default, and query results depending on specific clients. Despite the above findings, we have identified 3 crashes, 3 hangs, and multiple compatibility issues across four different DBMSs by executing test suites across DBMSs, indicating the benefits of reuse. Overall, this work represents the first step towards test-case reuse in the context of DBMSs, and we believe that practitioners will benefit from SQuaLity as a practical tool.","tags":["Weekly Talk"],"title":"Reusing Test Suites Across Database Systems","type":"event"},{"authors":["Shaohua Li"],"categories":null,"content":"","date":1697464800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1697464800,"objectID":"3fb5d45a3316f888008e1b5f506bb859","permalink":"https://nus-test.github.io/event/231016/","publishdate":"2023-10-16T14:00:00Z","relpermalink":"/event/231016/","section":"event","summary":"Shaohua Li is a last-year Ph.D. student at ETH Zurich, advised by Prof. Zhendong Su. He is generally interested in fuzzing, security, and compilers. His current research focuses on detecting undefined behaviors, solidifying sanitizer implementations, and compiler testing. His research has discovered over 100 unknown bugs in mature compilers including GCC and LLVM. His research on finding sanitizer bugs has won the 2022 Meta Security Research RFP award.","tags":["Weekly Talk"],"title":"Sanitizers' Blind Spots: Invisible Undefined Behaviors","type":"event"},{"authors":["Jinsheng Ba","Manuel Rigger"],"categories":null,"content":"","date":1696896000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1696896000,"objectID":"8098528199761e6a7158444ad84745b5","permalink":"https://nus-test.github.io/publication/2024-icse-cert/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/2024-icse-cert/","section":"publication","summary":"Database Management Systems (DBMSs) process a given query by creating an execution plan, which is subsequently executed, to compute the query's result. Deriving an efficient query plan is challenging, and both academia and industry have invested decades into researching query optimization. Despite this, DBMSs are prone to performance issues, where a DBMS produces an inefficient query plan that might lead to the slow execution of a query. Finding such issues is a longstanding problem and inherently difficult, because no ground truth information on an expected execution time exists. In this work, we propose Cardinality Estimation Restriction Testing (CERT), a novel technique that detects performance issues through the lens of cardinality estimation. Given a query on a database, CERT derives a more restrictive query (e.g., by replacing a LEFT JOIN with an INNER JOIN), whose estimated number of rows should not exceed the number of estimated rows for the original query. CERT tests cardinality estimators specifically, because they were shown to be the most important component for query optimization; thus, we expect that finding and fixing such issues might result in the highest performance gains. In addition, we found that some other kinds of query optimization issues are exposed by the unexpected cardinality estimation, which can also be detected by CERT. CERT is a black-box technique that does not require access to the source code; DBMSs expose query plans via the EXPLAIN statement. CERT eschews executing queries, which is costly and prone to performance fluctuations. We evaluated CERT on three widely used and mature DBMSs, MySQL, TiDB, and CockroachDB. CERT found 13 unique issues, of which 2 issues were fixed and 9 confirmed by the developers. We expect that this new angle on finding performance bugs will help DBMS developers in improving DMBSs' performance.","tags":null,"title":"CERT: Finding Performance Issues in Database Systems Through the Lens of Cardinality Estimation","type":"publication"},{"authors":null,"categories":null,"content":"","date":1696896000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1696896000,"objectID":"c63fd5d556f584402273a2298ea71981","permalink":"https://nus-test.github.io/post/23-10-10-cert-icse24/","publishdate":"2023-10-10T00:00:00Z","relpermalink":"/post/23-10-10-cert-icse24/","section":"post","summary":"","tags":null,"title":"Our paper \"Finding Performance Issues in Database Systems Through the Lens of Cardinality Estimation\" was accepted at ICSE'24!","type":"post"},{"authors":["Wenjing Deng"],"categories":null,"content":"","date":1696860000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1696860000,"objectID":"8f14f5fb5a920795472238f9605ca933","permalink":"https://nus-test.github.io/event/231009/","publishdate":"2023-10-09T14:00:00Z","relpermalink":"/event/231009/","section":"event","summary":"We propose a testing framework for validating static typing procedures in compilers. Our core component is a program generator suitably crafted for producing programs that are likely to trigger typing compiler bugs. One of our main contributions is that our program generator gives rise to transformation-based compiler testing for finding typing bugs. We present two novel approaches (type erasure mutation and type overwriting mutation) that apply targeted transformations to an input program to reveal type inference and soundness compiler bugs respectively. Both approaches are guided by an intra-procedural type inference analysis used to capture type information flow. We implement our techniques as a tool, which we call Hephaestus. The extensibility of Hephaestus enables us to test the compilers of three popular JVM languages: Java, Kotlin, and Groovy. Within nine months of testing, we have found 156 bugs (137 confirmed and 85 fixed) with diverse manifestations and root causes in all the examined compilers. Most of the discovered bugs lie in the heart of many critical components related to static typing, such as type inference.","tags":["Weekly Talk"],"title":"Finding Typing Compiler Bugs","type":"event"},{"authors":["Qiuyang Mang"],"categories":null,"content":"","date":1696255200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1696255200,"objectID":"b4049119f49d057d8193479a382519dc","permalink":"https://nus-test.github.io/event/231002/","publishdate":"2023-10-02T14:00:00Z","relpermalink":"/event/231002/","section":"event","summary":"","tags":["Weekly Talk"],"title":"Automated Testing and Improvement of Named Entity Recognition Systems","type":"event"},{"authors":["Xinyuan Ma"],"categories":null,"content":"","date":1695045600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1695045600,"objectID":"8e9b64e139e125497be7ff6fe446e868","permalink":"https://nus-test.github.io/event/230918/","publishdate":"2023-09-18T14:00:00Z","relpermalink":"/event/230918/","section":"event","summary":"","tags":["Weekly Talk"],"title":"Autonomous driving system defect localization","type":"event"},{"authors":["Chi Zhang"],"categories":null,"content":"","date":1694440800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1694440800,"objectID":"837e54dccffca0311e4a723483dd933e","permalink":"https://nus-test.github.io/event/230911/","publishdate":"2023-09-11T14:00:00Z","relpermalink":"/event/230911/","section":"event","summary":"","tags":["Weekly Talk"],"title":"Testing Database Systems Through the Lens of Constant Folding and Constant Propagation","type":"event"},{"authors":["Ivan Ho"],"categories":null,"content":"","date":1693836000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1693836000,"objectID":"acb9795497f7a0891c89932f5a806a0f","permalink":"https://nus-test.github.io/event/230904/","publishdate":"2023-09-04T14:00:00Z","relpermalink":"/event/230904/","section":"event","summary":"","tags":["Weekly Talk"],"title":"Race Detection in CUDA Kernels","type":"event"},{"authors":[],"categories":null,"content":"","date":1693231200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1693231200,"objectID":"ff68aaef2610f96fcdd24b114c737a3b","permalink":"https://nus-test.github.io/event/230828/","publishdate":"2023-08-28T14:00:00Z","relpermalink":"/event/230828/","section":"event","summary":"","tags":["Weekly Talk"],"title":"Finding XPath Bugs in XML Processors via Differential Testing","type":"event"},{"authors":["Yuancheng Jiang","Jiahao Liu","Jinsheng Ba","Roland H.C. Yap","Zhenkai Liang","Manuel Rigger"],"categories":null,"content":"","date":1692835200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1692835200,"objectID":"6de57873e57b441de011fb0f3ef8d6f6","permalink":"https://nus-test.github.io/publication/2024-icse-gdbms-testing/","publishdate":"2023-08-24T00:00:00Z","relpermalink":"/publication/2024-icse-gdbms-testing/","section":"publication","summary":"","tags":null,"title":"Detecting Logic Bugs in Graph Database Management Systems via Injective and Surjective Graph Pattern Transformation","type":"publication"},{"authors":null,"categories":null,"content":"","date":1692835200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1692835200,"objectID":"6c9d67e6e351ee05c5787b5f43774170","permalink":"https://nus-test.github.io/post/23-08-23-icse24-gdbms-testing/","publishdate":"2023-08-24T00:00:00Z","relpermalink":"/post/23-08-23-icse24-gdbms-testing/","section":"post","summary":"","tags":null,"title":"Our paper \"Detecting Logic Bugs in Graph Database Management Systems via Injective and Surjective Graph Pattern Transformation\" was accepted at ICSE '24!","type":"post"},{"authors":["Xiu Tang"],"categories":null,"content":"","date":1692626400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1692626400,"objectID":"2e7cb0a83c72ca95a1895a73a87cab5c","permalink":"https://nus-test.github.io/event/230821/","publishdate":"2023-08-21T14:00:00Z","relpermalink":"/event/230821/","section":"event","summary":"Dr. Xiu Tang is an Assistant Professor at the School of Software Engineering, Zhejiang University. She earned her Ph.D. degree in Databse from Zhejiang University in 2023. Her primary research areas encompass database query optimization and data intelligence. Her research findings have been published in top international academic conferences such as SIGMOD, VLDB, and ICDE. Furthermore, her impactful contributions have been implemented within Alibaba Cloud's PolarDB, showcasing her pioneering query optimization strategies and adeptly addressing validation intricacies in optimizer engineering. Dr. Tang has being honored with the SIGMOD 2023 Best Paper Award and the Alibaba Outstanding Research Intern distinction.","tags":["Invited Talk"],"title":"Detecting Logic Bugs of Join Optimizations in DBMS","type":"event"},{"authors":null,"categories":null,"content":"","date":1691625600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1691625600,"objectID":"0306d6b05d29507c4647e45de16e21ae","permalink":"https://nus-test.github.io/post/23-08-10-deanaward-jinsheng/","publishdate":"2023-08-10T00:00:00Z","relpermalink":"/post/23-08-10-deanaward-jinsheng/","section":"post","summary":"","tags":null,"title":"Jinsheng Ba received a \"Dean's Graduate Excellent Research Award\" from School of Computing!","type":"post"},{"authors":["Albert Zhang"],"categories":null,"content":"","date":1681743600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1681743600,"objectID":"6a28dea6f6cab8bc6142305c9161469c","permalink":"https://nus-test.github.io/event/230417_2/","publishdate":"2023-04-17T15:00:00Z","relpermalink":"/event/230417_2/","section":"event","summary":"","tags":["Weekly Talk"],"title":"Deriving Test Case Generators using Domain-Specific Language to Test Database Engine (Interim Report)","type":"event"},{"authors":["Nishita Dutta"],"categories":null,"content":"","date":1681740000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1681740000,"objectID":"944d65c3f3050016459a3ff69147b0f8","permalink":"https://nus-test.github.io/event/230417/","publishdate":"2023-04-17T14:00:00Z","relpermalink":"/event/230417/","section":"event","summary":"","tags":["Weekly Talk"],"title":"Part1: Reusing testsuites of Databases","type":"event"},{"authors":["Xudong Han"],"categories":null,"content":"","date":1681135200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1681135200,"objectID":"9285888a0673b85d893257a801e1e71d","permalink":"https://nus-test.github.io/event/230410/","publishdate":"2023-04-10T14:00:00Z","relpermalink":"/event/230410/","section":"event","summary":"Xudong Han is a fourth-year Ph.D. candidate in the Natural Language Processing Group at The University of Melbourne, supervised by Prof. Trevor Cohn and Prof. Tim Baldwin. He’s working on topics concerning bias and fairness, especially in natural language processing. He received his MSc degree from The University of Melbourne and BEng degree from Shandong University (Weihai).","tags":["Invited Talk"],"title":"Measuring and Improving Fairness in NLP","type":"event"},{"authors":["Anxing Zhang"],"categories":null,"content":"","date":1680530400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1680530400,"objectID":"d2686c666dda7f5d174ff59ea5f79788","permalink":"https://nus-test.github.io/event/230403/","publishdate":"2023-04-03T14:00:00Z","relpermalink":"/event/230403/","section":"event","summary":"","tags":["Weekly Talk"],"title":"Testing JDBC drivers","type":"event"},{"authors":["Yuancheng Jiang"],"categories":null,"content":"","date":1679320800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1679320800,"objectID":"d1ac5de9bc28495a221ee626318effdd","permalink":"https://nus-test.github.io/event/230320/","publishdate":"2023-03-20T14:00:00Z","relpermalink":"/event/230320/","section":"event","summary":"","tags":["Weekly Talk"],"title":"Testing Graph Databases","type":"event"},{"authors":["Shuxin Li"],"categories":null,"content":"","date":1678716000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1678716000,"objectID":"dd36f151927f20f3abdf47b41da09a78","permalink":"https://nus-test.github.io/event/230313/","publishdate":"2023-03-13T14:00:00Z","relpermalink":"/event/230313/","section":"event","summary":"","tags":["Weekly Talk"],"title":"Automated Testing for XPath Query Processors","type":"event"},{"authors":[],"categories":[],"content":"DEOPT is an automated testing tool to find optimization bugs in Datalog engines.\n","date":1678466463,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1678466463,"objectID":"69758c902c709ceab0def88568c9e9cb","permalink":"https://nus-test.github.io/project/deopt/","publishdate":"2023-03-11T00:41:03+08:00","relpermalink":"/project/deopt/","section":"project","summary":"DEOPT is an automated testing tool to find optimization bugs in Datalog engines.","tags":[],"title":"DEOPT","type":"project"},{"authors":[],"categories":[],"content":"GraphGenie is an automated testing tool that finds logic and performance issues in graph database management systems.\n","date":1678466463,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1678466463,"objectID":"c76b216c92dba32ccfecbd8ec572fde8","permalink":"https://nus-test.github.io/project/graphgenie/","publishdate":"2023-03-11T00:41:03+08:00","relpermalink":"/project/graphgenie/","section":"project","summary":"GraphGenie is an automated testing tool that finds logic and performance issues in graph database management systems.","tags":[],"title":"GraphGenie","type":"project"},{"authors":[],"categories":[],"content":"SQLancer automatically finds bugs in database systems.\n","date":1678466463,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1678466463,"objectID":"33582b31a80d8bcf969c6da0910f0731","permalink":"https://nus-test.github.io/project/sqlancer/","publishdate":"2023-03-11T00:41:03+08:00","relpermalink":"/project/sqlancer/","section":"project","summary":"SQLancer automatically finds bugs in database systems.","tags":[],"title":"SQLancer","type":"project"},{"authors":[],"categories":[],"content":"XPress is an automated testing tool to find bugs in XML processors.\n","date":1678466463,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1678466463,"objectID":"f79b5da4e0b4dab81c99ce7e802730c9","permalink":"https://nus-test.github.io/project/xpress/","publishdate":"2023-03-11T00:41:03+08:00","relpermalink":"/project/xpress/","section":"project","summary":"XPress is an automated testing tool to find bugs in XML processors.","tags":[],"title":"XPress","type":"project"},{"authors":["Suyang Zhong"],"categories":null,"content":"","date":1678111200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1678111200,"objectID":"c8990f98ef0862fa9634e4876884c614","permalink":"https://nus-test.github.io/event/230306/","publishdate":"2023-03-06T14:00:00Z","relpermalink":"/event/230306/","section":"event","summary":"The aspect-opinion extraction tasks extract aspect terms and opinion terms from reviews. The supervised extraction methods achieve state-of-the-art performance but require large-scale human-annotated training data. Thus, they are restricted for open-domain tasks due to the lack of training data. This work addresses this challenge and simultaneously mines aspect terms, opinion terms, and their correspondence in a joint model. We propose an Open-Domain Aspect-Opinion Co-Mining (ODAO) method with a Double-Layer span extraction framework. Instead of acquiring human annotations, ODAO first generates weak labels for unannotated corpus by employing rules-based on universal dependency parsing. Then, ODAO utilizes this weak supervision to train a double-layer span extraction framework to extract aspect terms (ATE), opinion terms (OTE), and aspect-opinion pairs (AOPE). ODAO applies canonical correlation analysis as an early stopping indicator to avoid the model over-fitting to the noise to tackle the noisy weak supervision. ODAO applies a self-training process to gradually enrich the training data to tackle the weak supervision bias issue. We conduct extensive experiments and demonstrate the power of the proposed ODAO. The results on four benchmark datasets for aspect-opinion co-extraction and pair extraction tasks show that ODAO can achieve competitive or even better performance compared with the state-of-the-art fully supervised methods.","tags":["Weekly Talk"],"title":"Open-Domain Aspect-Opinion Co-Mining with Double-Layer Span Extraction","type":"event"},{"authors":["Qiyuan Zhao"],"categories":null,"content":"","date":1677506400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1677506400,"objectID":"cf6a2ac1f53899783b37325365c25146","permalink":"https://nus-test.github.io/event/230227/","publishdate":"2023-02-27T14:00:00Z","relpermalink":"/event/230227/","section":"event","summary":"Combinatorial interaction testing (CIT) is an effective paradigm for testing highly configurable systems, and its goal is to generate a t-wise covering array (CA) as a test suite, where t is the strength of testing. It is recognized that pairwise testing (i.e., CIT with t=2) is the most common CIT technique, and has high fault detection capability in practice. The problem of pairwise CA generation (PCAG), which is a core problem in pairwise testing, aims at generating a pairwise CA (i.e., 2-wise CA) of minimum size, subject to hard constraints. The PCAG problem is a hard combinatorial optimization problem, which urgently requires practical methods for generating pairwise CAs (PCAs) of small sizes. However, existing PCAG algorithms suffer from the severe scalability issue; that is, when solving large-scale PCAG instances, existing state-of-the-art PCAG algorithms usually cost a fairly long time to generate large PCAs, which would make the testing of highly configurable systems both ineffective and inefficient. In this paper, we propose a novel and effective sampling-based approach dubbed SamplingCA for solving the PCAG problem. SamplingCA first utilizes sampling techniques to obtain a small test suite that covers valid pairwise tuples as many as possible, and then adds a few more test cases into the test suite to ensure that all valid pairwise tuples are covered. Extensive experiments on 125 public PCAG instances show that our approach can generate much smaller PCAs than its state-of-the-art competitors, indicating the effectiveness of SamplingCA. Also, our experiments show that SamplingCA runs one to two orders of magnitude faster than its competitors, demonstrating the efficiency of SamplingCA. Our results confirm that SamplingCA is able to address the scalability issue and considerably pushes forward the state of the art in PCAG solving.","tags":["Weekly Talk"],"title":"SamplingCA: Effective and Efficient Sampling-Based Pairwise Testing for Highly Configurable Software Systems","type":"event"},{"authors":null,"categories":null,"content":"","date":1677110400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1677110400,"objectID":"b585acf372dbadd8873cf600ed78b7b0","permalink":"https://nus-test.github.io/post/23-02-23-distinguishedaward-icse23/","publishdate":"2023-02-23T00:00:00Z","relpermalink":"/post/23-02-23-distinguishedaward-icse23/","section":"post","summary":"","tags":null,"title":"Our paper \"Testing Database Engines via Query Plan Guidance\" received \"ACM SIGSOFT Distinguished Paper Award\" at ICSE'23!","type":"post"},{"authors":["Chi Zhang"],"categories":null,"content":"","date":1676901600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1676901600,"objectID":"4bcaa25d8a60bb97e1c3a4acef0d1911","permalink":"https://nus-test.github.io/event/230220/","publishdate":"2023-02-20T14:00:00Z","relpermalink":"/event/230220/","section":"event","summary":"","tags":["Weekly Talk"],"title":"Finding Optimization Bugs in Datalog Engines","type":"event"},{"authors":["Albert Zhang"],"categories":null,"content":"","date":1676293200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1676293200,"objectID":"15096ab7fc7dde9b52937ae5d6b39242","permalink":"https://nus-test.github.io/event/230213/","publishdate":"2023-02-13T13:00:00Z","relpermalink":"/event/230213/","section":"event","summary":"","tags":["Weekly Talk"],"title":"General SQL Grammar for Testing Case Generation","type":"event"},{"authors":["Jinsheng Ba"],"categories":null,"content":"","date":1675688400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1675688400,"objectID":"83db2006d1013b61e24c8759837180d3","permalink":"https://nus-test.github.io/event/230206/","publishdate":"2023-02-06T13:00:00Z","relpermalink":"/event/230206/","section":"event","summary":"Database Management Systems (DBMSs) process a given query by creating an execution plan, which is subsequently executed, to compute the query's result. Deriving an efficient query plan is challenging, and both academia and industry have invested decades into researching query optimization. Despite this, DBMSs are prone to performance issues, where a DBMS produces an inefficient query plan that might lead to the slow execution of a query. Finding such issues is a longstanding problem and inherently difficult, because no ground truth information on an expected execution time exists. In this work, we propose Cardinality Estimation Restriction Testing (CERT), a novel technique that detects performance issues through the lens of cardinality estimation. Given a query on a database, CERT derives a more restrictive query (e.g., by replacing a LEFT JOIN with an INNER JOIN), whose estimated number of rows should not exceed the number of estimated rows for the original query. CERT tests cardinality estimators specifically, because they were shown to be the most important component for query optimization; thus, we expect that finding and fixing such issues might result in the highest performance gains. In addition, we found that some other kinds of query optimization issues are exposed by the unexpected cardinality estimation, which can also be detected by CERT. CERT is a black-box technique that does not require access to the source code; DBMSs expose query plans via the EXPLAIN statement. CERT eschews executing queries, which is costly and prone to performance fluctuations. We evaluated CERT on three widely used and mature DBMSs, MySQL, TiDB, and CockroachDB. CERT found 13 unique issues, of which 2 issues were fixed and 9 confirmed by the developers. We expect that this new angle on finding performance bugs will help DBMS developers in improving DMBSs' performance.","tags":["Weekly Talk"],"title":"Cardinality Estimation Testing","type":"event"},{"authors":null,"categories":null,"content":"","date":1672876800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1672876800,"objectID":"3d5b9eaa0f8b340803c484e9a1c0ad81","permalink":"https://nus-test.github.io/post/23-01-05-researchaward-jinsheng/","publishdate":"2023-01-05T00:00:00Z","relpermalink":"/post/23-01-05-researchaward-jinsheng/","section":"post","summary":"","tags":null,"title":"Jinsheng Ba received a \"Research Achievement Award\" from School of Computing!","type":"post"},{"authors":null,"categories":null,"content":"","date":1670544000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1670544000,"objectID":"6689cfd9f4ecef2ebf0beda866702603","permalink":"https://nus-test.github.io/post/22-12-09-qpg-icse23/","publishdate":"2022-12-09T00:00:00Z","relpermalink":"/post/22-12-09-qpg-icse23/","section":"post","summary":"","tags":null,"title":"Our paper \"Testing Database Engines via Query Plan Guidance\" was accepted at ICSE'23!","type":"post"},{"authors":["Jinsheng Ba","Manuel Rigger"],"categories":null,"content":"","date":1670544000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1670544000,"objectID":"ff85067ccb75b9add56fa65f371f35bb","permalink":"https://nus-test.github.io/publication/2023-icse-qpg/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/2023-icse-qpg/","section":"publication","summary":"Database systems are widely used to store and query data. Test oracles have been proposed to find logic bugs in such systems, that is, bugs that cause the database system to compute an incorrect result. To realize a fully automated testing approach, such test oracles are paired with a test case generation technique; a test case refers to a database state and a query on which the test oracle can be applied. In this work, we propose the concept of Query Plan Guidance (QPG) for guiding automated testing towards \"interesting\" test cases. SQL and other query languages are declarative. Thus, to execute a query, the database system translates every operator in the source language to one of potentially many so-called physical operators that can be executed; the tree of physical operators is referred to as the query plan. Our intuition is that by steering testing towards exploring diverse query plans, we also explore more interesting behaviors—some of which are potentially incorrect. To this end, we propose a mutation technique that gradually applies promising mutations to the database state, causing the DBMS to create diverse query plans for subsequent queries. We applied our method to three mature, widely-used, and extensively-tested database systems—SQLite, TiDB, and CockroachDB—and found 53 unique, previously unknown bugs. Our method exercises 4.85—408.48× more unique query plans than a naive random generation method and 7.46× more than a code coverage guidance method. Since most database systems—including commercial ones—expose query plans to the user, we consider QPG a generally applicable, black-box approach and believe that the core idea could also be applied in other contexts (e.g., to measure the quality of a test suite).","tags":null,"title":"Testing Database Engines via Query Plan Guidance","type":"publication"},{"authors":["Matteo Kamm","Manuel Rigger","Chengyu Zhang","Zhendong Su"],"categories":null,"content":"","date":1670544000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1670544000,"objectID":"c33260c2c9eac0e9ce2084d526f8229a","permalink":"https://nus-test.github.io/publication/2023-issta-gdbmeter/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/2023-issta-gdbmeter/","section":"publication","summary":"Graph Database Management Systems (GDBMSs) store data as graphs and allow the efficient querying of nodes and their relationships. Logic bugs are bugs that cause a GDBMS to return an incorrect result for a given query (e.g., by returning incorrect nodes or relationships). The impact of such bugs can be severe, as they often go unnoticed. The core insight of this paper is that Query Partitioning, a test oracle that has been proposed to test Relational Database Systems, is applicable to testing GDBMSs as well. The core idea of Query Partitioning is that, given a query, multiple queries are derived whose results can be combined to reconstruct the given query’s result. Any discrepancy in the result indicates a logic bug. We have implemented this approach as a practical tool named GDBMeter and evaluated GDBMeter on three popular GDBMSs and found a total of 41 unique, previously unknown bugs. We consider 14 of them to be logic bugs, the others being error or crash bugs. Overall, 27 of the bugs have been fixed, and 35 confirmed. We compared our approach to the state-of-the-art approach to testing GDBMS, which relies on differential testing; we found that it results in a high number of false alarms, while Query Partitioning reported actual logic bugs without any false alarms. Furthermore, despite the previous efforts in testing Neo4j and JanusGraph, we found 13 additional bugs. The developers appreciate our work and plan to integrate GDBMeter into their testing process. We expect that this simple, yet effective approach and the practical tool will be used to test other GDBMSs.","tags":null,"title":"Testing Graph Database Engines via Query Partitioning","type":"publication"},{"authors":null,"categories":null,"content":"See https://nus-plse.github.io/seminars.html.\n","date":1664755200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1664755200,"objectID":"1ba9d4a71ddb9c74be3faf4d4f0b4915","permalink":"https://nus-test.github.io/post/22-10-03-chi-plse-talk/","publishdate":"2022-10-03T00:00:00Z","relpermalink":"/post/22-10-03-chi-plse-talk/","section":"post","summary":"See https://nus-plse.github.io/seminars.html.","tags":null,"title":"Chi will give a talk on \"Infrared: A Meta Bug Detector\" in the PLSE seminar this week.","type":"post"},{"authors":["Philippe Voinov","Manuel Rigger","Zhendong Su"],"categories":null,"content":"","date":1664755200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1664755200,"objectID":"6dba1463fe05703a1705ea6cbda2523e","permalink":"https://nus-test.github.io/publication/2022-onward-forest/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/2022-onward-forest/","section":"publication","summary":"Software developers frequently refactor code. Often, a single logical refactoring change involves changing multiple related components in a source base such as renaming each occurrence of a variable or function. While many code editors can perform such common and generic refactorings, they do not support more complex refactorings or those that are specific to a given code base. For those, as a flexible — albeit less interactive — alternative, developers can write refactoring scripts that can implement arbitrarily complex logic by manipulating the program's tree representation. In this work, we present Forest, a structural code editor that aims to bridge the gap between the interactiveness of code editors and the expressiveness of refactoring scripts. While structural editors have occupied a niche as general code editors, the key insight of this work is that they enable a novel structural multi-cursor design that allows Forest to reach a similar expressiveness as refactoring scripts; Forest allows to perform a single action simultaneously in multiple program locations and thus support complex refactorings. To support interactivity, Forest provides features typical for text code editors such as writing and displaying the program through its textual representation. Our evaluation demonstrates that Forest allows performing edits similar to those from refactoring scripts, while still being interactive. We attempted to perform edits from 48 real-world refactoring scripts using Forest and found that 11 were possible, while another 17 would be possible with added features. We believe that a multi-cursor setting plays to the strengths of structural editing, since it benefits from reliable and expressive. Our results suggest that multi-cursor structural editors could be practical for performing small-scale specialized refactorings.","tags":null,"title":"Forest: Structural Code Editing with Multiple Cursors","type":"publication"},{"authors":["Manuel Rigger","Zhendong Su"],"categories":null,"content":"","date":1664755200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1664755200,"objectID":"eca017828c70a5a478ad171c1351cdd5","permalink":"https://nus-test.github.io/publication/2022-onward-intramorphic/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/2022-onward-intramorphic/","section":"publication","summary":"A test oracle determines whether a system behaves correctly for a given input. Automatic testing techniques rely on an automated test oracle to test the system without user interaction. Important families of automated test oracles include Differential Testing and Metamorphic Testing, which are both black-box approaches; that is, they provide a test oracle that is oblivious to the system’s internals. In this work, we propose Intramorphic Testing, which is a new methodology to tackle the test oracle problem. To realize an Intramorphic Testing testing approach, a modified version of the system is created, for which, given a single input, a test oracle can be provided that relates the output of the original and modified systems. As a concrete example, by replacing a greater-equals operator in the implementation of a sorting algorithm with smaller-equals, it would be expected that the output of the modified implementation is the reverse output of the original implementation. In this paper, we introduce the methodology and illustrate it via a set of use cases.","tags":null,"title":"Intramorphic Testing: A New Approach to the Test Oracle Problem","type":"publication"},{"authors":["Chi Zhang"],"categories":null,"content":"","date":1664456400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1664456400,"objectID":"dbf47428c37f559a48bc2d2ca53199c9","permalink":"https://nus-test.github.io/event/220929/","publishdate":"2022-09-29T13:00:00Z","relpermalink":"/event/220929/","section":"event","summary":"The recent breakthroughs in deep learning methods have sparked a wave of interest in learning-based bug detectors. Compared to the traditional static analysis tools, these bug detectors are directly learned from data, thus, easier to create. On the other hand, they are difficult to train, requiring a large amount of data which is not readily available. In this paper, we propose a new approach, called meta bug detection, which offers three crucial advantages over existing learning-based bug detectors: bug-type generic (i.e., capable of catching the types of bugs that are totally unobserved during training), self-explainable (i.e., capable of explaining its own prediction without any external interpretability methods) and sample efficient (i.e., requiring substantially less training data than standard bug detectors). Our extensive evaluation shows our meta bug detector (MBD) is effective in catching a variety of bugs including null pointer dereference, array index out-of-bound, file handle leak, and even data races in concurrent programs; in the process MBD also significantly outperforms several noteworthy baselines including Facebook Infer, a prominent static analysis tool, and FICS, the latest anomaly detection method.","tags":["group meeting"],"title":"Infrared: A Meta Bug Detector","type":"event"},{"authors":["Jinsheng Ba"],"categories":null,"content":"","date":1663246800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1663246800,"objectID":"1c7749c904bb50b317c36b8adc27d0fa","permalink":"https://nus-test.github.io/event/220915/","publishdate":"2022-09-15T13:00:00Z","relpermalink":"/event/220915/","section":"event","summary":"Greybox fuzzing is a proven effective testing method for the detection of security vulnerabilities and other bugs in modern software systems. Greybox fuzzing can also be used in combination with a sanitizer, such as AddressSanitizer (ASAN), to further enhance the detection of certain classes of bug such as buffer overflow and use-after-free errors. However, sanitizers also introduce additional performance overheads, and this can degrade the performance of greybox fuzzing---measured in the order of 2.36x for fuzzing with ASAN---potentially negating the benefit of using a sanitizer in the first place. Recent research attributes this to extra overheads to additional page faults that are generated when the disjoint sanitizer metadata is accessed at runtime.\nIn this paper, we present a new design that can detect memory errors without a proliferation of page faults. The basic idea is to track memory validity using randomized tokens that are stored directly in the memory itself, rather than in disjoint metadata. All read/write operations are instrumented to check for the token, and if present, a memory error will be detected. We implement our design in the form of the ReZZan---a sanitizer specifically optimized for fuzz testing. Since there is no disjoint metadata access, no additional page faults are generated, minimizing the performance overhead to around 1.14-1.27x (depending on the configuration).","tags":["group meeting"],"title":"Efficient Fuzzing to Detect Memory Errors","type":"event"},{"authors":null,"categories":null,"content":"Check out his website at https://ch1zhang.github.io/.\n","date":1661385600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1661385600,"objectID":"14108c62211665cd9d1c9a0bb445b1c1","permalink":"https://nus-test.github.io/post/22-08-25-chi/","publishdate":"2022-08-25T00:00:00Z","relpermalink":"/post/22-08-25-chi/","section":"post","summary":"Check out his website at https://ch1zhang.github.io/.","tags":null,"title":"Chi Zhang, a PhD student at Nanjing University, is visiting the lab for one year. Welcome!","type":"post"},{"authors":null,"categories":null,"content":"See APAC Modern Data Stack (MDS) Meetup Group.\n","date":1661385600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1661385600,"objectID":"2e7126f9a53bef16c102cbb8486e5108","permalink":"https://nus-test.github.io/post/22-08-25-singularity/","publishdate":"2022-08-25T00:00:00Z","relpermalink":"/post/22-08-25-singularity/","section":"post","summary":"See APAC Modern Data Stack (MDS) Meetup Group.","tags":null,"title":"Manuel gave a presentation on SQLancer at the APAC Modern Data Stack (MDS) Meetup Group.","type":"post"},{"authors":null,"categories":null,"content":"","date":1659312000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1659312000,"objectID":"29132b609c3a87a61cbdf3f59062110e","permalink":"https://nus-test.github.io/post/22-08-01-jinsheng-suyang/","publishdate":"2022-08-01T00:00:00Z","relpermalink":"/post/22-08-01-jinsheng-suyang/","section":"post","summary":"","tags":null,"title":"Jinsheng Ba and Suyang Zhong officially joined the NUS TEST lab. Welcome!","type":"post"},{"authors":null,"categories":null,"content":"More information about the module is provided on the Canvas page.\n","date":1659312000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1659312000,"objectID":"b1816de078f785c6606670158b438b75","permalink":"https://nus-test.github.io/post/22-08-01-cs6218/","publishdate":"2022-08-01T00:00:00Z","relpermalink":"/post/22-08-01-cs6218/","section":"post","summary":"More information about the module is provided on the Canvas page.","tags":null,"title":"We will offer module CS6218 on \"Ensuring the Correctness and Reliability of Data-Centric Systems\" next semester.","type":"post"},{"authors":null,"categories":null,"content":"Manuel presented his experience interviewing for faculty positions at a seminar and panel discussion to PhD students and postdocs at the School of Computing at NUS.\n","date":1632700800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1632700800,"objectID":"9dcde8b3e167a16375cd25ad19dff2c4","permalink":"https://nus-test.github.io/post/21-09-27-nus-academic-job-experience-talk/","publishdate":"2021-09-27T00:00:00Z","relpermalink":"/post/21-09-27-nus-academic-job-experience-talk/","section":"post","summary":"Manuel presented his experience interviewing for faculty positions at a seminar and panel discussion to PhD students and postdocs at the School of Computing at NUS.","tags":null,"title":"Manuel shared his experience on the academic job market at a seminar and panel discussion at NUS","type":"post"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"https://nus-test.github.io/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"6d99026b9e19e4fa43d5aadf147c7176","permalink":"https://nus-test.github.io/contact/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/contact/","section":"","summary":"","tags":null,"title":"","type":"widget_page"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"c1d17ff2b20dca0ad6653a3161942b64","permalink":"https://nus-test.github.io/people/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/people/","section":"","summary":"","tags":null,"title":"","type":"widget_page"}]